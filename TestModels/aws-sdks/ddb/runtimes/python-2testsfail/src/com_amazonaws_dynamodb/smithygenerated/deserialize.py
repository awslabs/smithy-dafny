# Code generated by smithy-python-codegen DO NOT EDIT.

from com_amazonaws_dynamodb_internaldafny_types import (
    BatchExecuteStatementOutput_BatchExecuteStatementOutput as DafnyBatchExecuteStatementOutput,
    BatchGetItemOutput_BatchGetItemOutput as DafnyBatchGetItemOutput,
    BatchWriteItemOutput_BatchWriteItemOutput as DafnyBatchWriteItemOutput,
    CreateBackupOutput_CreateBackupOutput as DafnyCreateBackupOutput,
    CreateGlobalTableOutput_CreateGlobalTableOutput as DafnyCreateGlobalTableOutput,
    CreateTableOutput_CreateTableOutput as DafnyCreateTableOutput,
    DeleteBackupOutput_DeleteBackupOutput as DafnyDeleteBackupOutput,
    DeleteItemOutput_DeleteItemOutput as DafnyDeleteItemOutput,
    DeleteTableOutput_DeleteTableOutput as DafnyDeleteTableOutput,
    DescribeBackupOutput_DescribeBackupOutput as DafnyDescribeBackupOutput,
    DescribeContinuousBackupsOutput_DescribeContinuousBackupsOutput as DafnyDescribeContinuousBackupsOutput,
    DescribeContributorInsightsOutput_DescribeContributorInsightsOutput as DafnyDescribeContributorInsightsOutput,
    DescribeEndpointsResponse_DescribeEndpointsResponse as DafnyDescribeEndpointsResponse,
    DescribeExportOutput_DescribeExportOutput as DafnyDescribeExportOutput,
    DescribeGlobalTableOutput_DescribeGlobalTableOutput as DafnyDescribeGlobalTableOutput,
    DescribeGlobalTableSettingsOutput_DescribeGlobalTableSettingsOutput as DafnyDescribeGlobalTableSettingsOutput,
    DescribeImportOutput_DescribeImportOutput as DafnyDescribeImportOutput,
    DescribeKinesisStreamingDestinationOutput_DescribeKinesisStreamingDestinationOutput as DafnyDescribeKinesisStreamingDestinationOutput,
    DescribeLimitsOutput_DescribeLimitsOutput as DafnyDescribeLimitsOutput,
    DescribeTableOutput_DescribeTableOutput as DafnyDescribeTableOutput,
    DescribeTableReplicaAutoScalingOutput_DescribeTableReplicaAutoScalingOutput as DafnyDescribeTableReplicaAutoScalingOutput,
    DescribeTimeToLiveOutput_DescribeTimeToLiveOutput as DafnyDescribeTimeToLiveOutput,
    DisableKinesisStreamingDestinationOutput_DisableKinesisStreamingDestinationOutput as DafnyDisableKinesisStreamingDestinationOutput,
    EnableKinesisStreamingDestinationOutput_EnableKinesisStreamingDestinationOutput as DafnyEnableKinesisStreamingDestinationOutput,
    Error,
    Error_BackupInUseException,
    Error_BackupNotFoundException,
    Error_ConditionalCheckFailedException,
    Error_ContinuousBackupsUnavailableException,
    Error_DuplicateItemException,
    Error_ExportConflictException,
    Error_ExportNotFoundException,
    Error_GlobalTableAlreadyExistsException,
    Error_GlobalTableNotFoundException,
    Error_IdempotentParameterMismatchException,
    Error_ImportConflictException,
    Error_ImportNotFoundException,
    Error_IndexNotFoundException,
    Error_InternalServerError,
    Error_InvalidEndpointException,
    Error_InvalidExportTimeException,
    Error_InvalidRestoreTimeException,
    Error_ItemCollectionSizeLimitExceededException,
    Error_LimitExceededException,
    Error_PointInTimeRecoveryUnavailableException,
    Error_ProvisionedThroughputExceededException,
    Error_ReplicaAlreadyExistsException,
    Error_ReplicaNotFoundException,
    Error_RequestLimitExceeded,
    Error_ResourceInUseException,
    Error_ResourceNotFoundException,
    Error_TableAlreadyExistsException,
    Error_TableInUseException,
    Error_TableNotFoundException,
    Error_TransactionCanceledException,
    Error_TransactionConflictException,
    Error_TransactionInProgressException,
    ExecuteStatementOutput_ExecuteStatementOutput as DafnyExecuteStatementOutput,
    ExecuteTransactionOutput_ExecuteTransactionOutput as DafnyExecuteTransactionOutput,
    ExportTableToPointInTimeOutput_ExportTableToPointInTimeOutput as DafnyExportTableToPointInTimeOutput,
    GetItemOutput_GetItemOutput as DafnyGetItemOutput,
    ImportTableOutput_ImportTableOutput as DafnyImportTableOutput,
    ListBackupsOutput_ListBackupsOutput as DafnyListBackupsOutput,
    ListContributorInsightsOutput_ListContributorInsightsOutput as DafnyListContributorInsightsOutput,
    ListExportsOutput_ListExportsOutput as DafnyListExportsOutput,
    ListGlobalTablesOutput_ListGlobalTablesOutput as DafnyListGlobalTablesOutput,
    ListImportsOutput_ListImportsOutput as DafnyListImportsOutput,
    ListTablesOutput_ListTablesOutput as DafnyListTablesOutput,
    ListTagsOfResourceOutput_ListTagsOfResourceOutput as DafnyListTagsOfResourceOutput,
    PutItemOutput_PutItemOutput as DafnyPutItemOutput,
    QueryOutput_QueryOutput as DafnyQueryOutput,
    RestoreTableFromBackupOutput_RestoreTableFromBackupOutput as DafnyRestoreTableFromBackupOutput,
    RestoreTableToPointInTimeOutput_RestoreTableToPointInTimeOutput as DafnyRestoreTableToPointInTimeOutput,
    ScanOutput_ScanOutput as DafnyScanOutput,
    TransactGetItemsOutput_TransactGetItemsOutput as DafnyTransactGetItemsOutput,
    TransactWriteItemsOutput_TransactWriteItemsOutput as DafnyTransactWriteItemsOutput,
    UpdateContinuousBackupsOutput_UpdateContinuousBackupsOutput as DafnyUpdateContinuousBackupsOutput,
    UpdateContributorInsightsOutput_UpdateContributorInsightsOutput as DafnyUpdateContributorInsightsOutput,
    UpdateGlobalTableOutput_UpdateGlobalTableOutput as DafnyUpdateGlobalTableOutput,
    UpdateGlobalTableSettingsOutput_UpdateGlobalTableSettingsOutput as DafnyUpdateGlobalTableSettingsOutput,
    UpdateItemOutput_UpdateItemOutput as DafnyUpdateItemOutput,
    UpdateTableOutput_UpdateTableOutput as DafnyUpdateTableOutput,
    UpdateTableReplicaAutoScalingOutput_UpdateTableReplicaAutoScalingOutput as DafnyUpdateTableReplicaAutoScalingOutput,
    UpdateTimeToLiveOutput_UpdateTimeToLiveOutput as DafnyUpdateTimeToLiveOutput,
)
import module_
from typing import Any

from .dafny_protocol import DafnyResponse
from .errors import (
    BackupInUseException,
    BackupNotFoundException,
    CollectionOfErrors,
    ConditionalCheckFailedException,
    ContinuousBackupsUnavailableException,
    DuplicateItemException,
    ExportConflictException,
    ExportNotFoundException,
    GlobalTableAlreadyExistsException,
    GlobalTableNotFoundException,
    IdempotentParameterMismatchException,
    ImportConflictException,
    ImportNotFoundException,
    IndexNotFoundException,
    InternalServerError,
    InvalidEndpointException,
    InvalidExportTimeException,
    InvalidRestoreTimeException,
    ItemCollectionSizeLimitExceededException,
    LimitExceededException,
    OpaqueError,
    PointInTimeRecoveryUnavailableException,
    ProvisionedThroughputExceededException,
    ReplicaAlreadyExistsException,
    ReplicaNotFoundException,
    RequestLimitExceeded,
    ResourceInUseException,
    ResourceNotFoundException,
    ServiceError,
    TableAlreadyExistsException,
    TableInUseException,
    TableNotFoundException,
    TransactionCanceledException,
    TransactionConflictException,
    TransactionInProgressException,
)
from .models import (
    BatchExecuteStatementOutput,
    BatchGetItemOutput,
    BatchWriteItemOutput,
    CreateBackupOutput,
    CreateGlobalTableOutput,
    CreateTableOutput,
    DeleteBackupOutput,
    DeleteItemOutput,
    DeleteTableOutput,
    DescribeBackupOutput,
    DescribeContinuousBackupsOutput,
    DescribeContributorInsightsOutput,
    DescribeEndpointsResponse,
    DescribeExportOutput,
    DescribeGlobalTableOutput,
    DescribeGlobalTableSettingsOutput,
    DescribeImportOutput,
    DescribeKinesisStreamingDestinationOutput,
    DescribeLimitsOutput,
    DescribeTableOutput,
    DescribeTableReplicaAutoScalingOutput,
    DescribeTimeToLiveOutput,
    DisableKinesisStreamingDestinationOutput,
    EnableKinesisStreamingDestinationOutput,
    ExecuteStatementOutput,
    ExecuteTransactionOutput,
    ExportTableToPointInTimeOutput,
    GetItemOutput,
    ImportTableOutput,
    ListBackupsOutput,
    ListContributorInsightsOutput,
    ListExportsOutput,
    ListGlobalTablesOutput,
    ListImportsOutput,
    ListTablesOutput,
    ListTagsOfResourceOutput,
    PutItemOutput,
    QueryOutput,
    RestoreTableFromBackupOutput,
    RestoreTableToPointInTimeOutput,
    ScanOutput,
    TransactGetItemsOutput,
    TransactWriteItemsOutput,
    UpdateContinuousBackupsOutput,
    UpdateContributorInsightsOutput,
    UpdateGlobalTableOutput,
    UpdateGlobalTableSettingsOutput,
    UpdateItemOutput,
    UpdateTableOutput,
    UpdateTableReplicaAutoScalingOutput,
    UpdateTimeToLiveOutput,
)

from .config import Config
from .models import Unit


async def _deserialize_delete_backup(input: DafnyResponse, config: Config) -> DeleteBackupOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DeleteBackupOutput(input.value)

async def _deserialize_delete_item(input: DafnyResponse, config: Config) -> DeleteItemOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DeleteItemOutput(input.value)

async def _deserialize_execute_transaction(input: DafnyResponse, config: Config) -> ExecuteTransactionOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ExecuteTransactionOutput(input.value)

async def _deserialize_update_global_table(input: DafnyResponse, config: Config) -> UpdateGlobalTableOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_UpdateGlobalTableOutput(input.value)

async def _deserialize_update_table_replica_auto_scaling(input: DafnyResponse, config: Config) -> UpdateTableReplicaAutoScalingOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_UpdateTableReplicaAutoScalingOutput(input.value)

async def _deserialize_describe_backup(input: DafnyResponse, config: Config) -> DescribeBackupOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeBackupOutput(input.value)

async def _deserialize_scan(input: DafnyResponse, config: Config) -> ScanOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ScanOutput(input.value)

async def _deserialize_update_global_table_settings(input: DafnyResponse, config: Config) -> UpdateGlobalTableSettingsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_UpdateGlobalTableSettingsOutput(input.value)

async def _deserialize_batch_get_item(input: DafnyResponse, config: Config) -> BatchGetItemOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_BatchGetItemOutput(input.value)

async def _deserialize_describe_table(input: DafnyResponse, config: Config) -> DescribeTableOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeTableOutput(input.value)

async def _deserialize_query(input: DafnyResponse, config: Config) -> QueryOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_QueryOutput(input.value)

async def _deserialize_describe_table_replica_auto_scaling(input: DafnyResponse, config: Config) -> DescribeTableReplicaAutoScalingOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeTableReplicaAutoScalingOutput(input.value)

async def _deserialize_put_item(input: DafnyResponse, config: Config) -> PutItemOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_PutItemOutput(input.value)

async def _deserialize_disable_kinesis_streaming_destination(input: DafnyResponse, config: Config) -> DisableKinesisStreamingDestinationOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DisableKinesisStreamingDestinationOutput(input.value)

async def _deserialize_batch_write_item(input: DafnyResponse, config: Config) -> BatchWriteItemOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_BatchWriteItemOutput(input.value)

async def _deserialize_untag_resource(input: DafnyResponse, config: Config) -> Unit:

  return None

async def _deserialize_tag_resource(input: DafnyResponse, config: Config) -> Unit:

  return None

async def _deserialize_batch_execute_statement(input: DafnyResponse, config: Config) -> BatchExecuteStatementOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_BatchExecuteStatementOutput(input.value)

async def _deserialize_list_tags_of_resource(input: DafnyResponse, config: Config) -> ListTagsOfResourceOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ListTagsOfResourceOutput(input.value)

async def _deserialize_list_tables(input: DafnyResponse, config: Config) -> ListTablesOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ListTablesOutput(input.value)

async def _deserialize_describe_export(input: DafnyResponse, config: Config) -> DescribeExportOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeExportOutput(input.value)

async def _deserialize_describe_time_to_live(input: DafnyResponse, config: Config) -> DescribeTimeToLiveOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeTimeToLiveOutput(input.value)

async def _deserialize_transact_get_items(input: DafnyResponse, config: Config) -> TransactGetItemsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_TransactGetItemsOutput(input.value)

async def _deserialize_list_contributor_insights(input: DafnyResponse, config: Config) -> ListContributorInsightsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ListContributorInsightsOutput(input.value)

async def _deserialize_describe_contributor_insights(input: DafnyResponse, config: Config) -> DescribeContributorInsightsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeContributorInsightsOutput(input.value)

async def _deserialize_update_contributor_insights(input: DafnyResponse, config: Config) -> UpdateContributorInsightsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_UpdateContributorInsightsOutput(input.value)

async def _deserialize_list_global_tables(input: DafnyResponse, config: Config) -> ListGlobalTablesOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ListGlobalTablesOutput(input.value)

async def _deserialize_list_exports(input: DafnyResponse, config: Config) -> ListExportsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ListExportsOutput(input.value)

async def _deserialize_list_backups(input: DafnyResponse, config: Config) -> ListBackupsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ListBackupsOutput(input.value)

async def _deserialize_enable_kinesis_streaming_destination(input: DafnyResponse, config: Config) -> EnableKinesisStreamingDestinationOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_EnableKinesisStreamingDestinationOutput(input.value)

async def _deserialize_export_table_to_point_in_time(input: DafnyResponse, config: Config) -> ExportTableToPointInTimeOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ExportTableToPointInTimeOutput(input.value)

async def _deserialize_describe_endpoints(input: DafnyResponse, config: Config) -> DescribeEndpointsResponse:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeEndpointsResponse(input.value)

async def _deserialize_update_time_to_live(input: DafnyResponse, config: Config) -> UpdateTimeToLiveOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_UpdateTimeToLiveOutput(input.value)

async def _deserialize_list_imports(input: DafnyResponse, config: Config) -> ListImportsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ListImportsOutput(input.value)

async def _deserialize_delete_table(input: DafnyResponse, config: Config) -> DeleteTableOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DeleteTableOutput(input.value)

async def _deserialize_restore_table_from_backup(input: DafnyResponse, config: Config) -> RestoreTableFromBackupOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_RestoreTableFromBackupOutput(input.value)

async def _deserialize_describe_global_table_settings(input: DafnyResponse, config: Config) -> DescribeGlobalTableSettingsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeGlobalTableSettingsOutput(input.value)

async def _deserialize_describe_limits(input: DafnyResponse, config: Config) -> DescribeLimitsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeLimitsOutput(input.value)

async def _deserialize_restore_table_to_point_in_time(input: DafnyResponse, config: Config) -> RestoreTableToPointInTimeOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_RestoreTableToPointInTimeOutput(input.value)

async def _deserialize_get_item(input: DafnyResponse, config: Config) -> GetItemOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_GetItemOutput(input.value)

async def _deserialize_update_table(input: DafnyResponse, config: Config) -> UpdateTableOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_UpdateTableOutput(input.value)

async def _deserialize_update_item(input: DafnyResponse, config: Config) -> UpdateItemOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_UpdateItemOutput(input.value)

async def _deserialize_describe_import(input: DafnyResponse, config: Config) -> DescribeImportOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeImportOutput(input.value)

async def _deserialize_describe_global_table(input: DafnyResponse, config: Config) -> DescribeGlobalTableOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeGlobalTableOutput(input.value)

async def _deserialize_transact_write_items(input: DafnyResponse, config: Config) -> TransactWriteItemsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_TransactWriteItemsOutput(input.value)

async def _deserialize_update_continuous_backups(input: DafnyResponse, config: Config) -> UpdateContinuousBackupsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_UpdateContinuousBackupsOutput(input.value)

async def _deserialize_create_backup(input: DafnyResponse, config: Config) -> CreateBackupOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_CreateBackupOutput(input.value)

async def _deserialize_import_table(input: DafnyResponse, config: Config) -> ImportTableOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ImportTableOutput(input.value)

async def _deserialize_describe_kinesis_streaming_destination(input: DafnyResponse, config: Config) -> DescribeKinesisStreamingDestinationOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeKinesisStreamingDestinationOutput(input.value)

async def _deserialize_create_global_table(input: DafnyResponse, config: Config) -> CreateGlobalTableOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_CreateGlobalTableOutput(input.value)

async def _deserialize_execute_statement(input: DafnyResponse, config: Config) -> ExecuteStatementOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_ExecuteStatementOutput(input.value)

async def _deserialize_create_table(input: DafnyResponse, config: Config) -> CreateTableOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_CreateTableOutput(input.value)

async def _deserialize_describe_continuous_backups(input: DafnyResponse, config: Config) -> DescribeContinuousBackupsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  # Import dafny_to_smithy at runtime to prevent introducing circular dependency on deserialize file.
  from . import dafny_to_smithy
  return dafny_to_smithy.DafnyToSmithy_com_amazonaws_dynamodb_DescribeContinuousBackupsOutput(input.value)

async def _deserialize_error(error: Error) -> ServiceError:
    if error.is_Opaque:
      return OpaqueError(obj=error.obj)
    elif error.is_CollectionOfErrors:
      return CollectionOfErrors(message=error.message, list=error.list)
    elif error.is_BackupInUseException:
      return BackupInUseException(message=error.message)
    elif error.is_BackupNotFoundException:
      return BackupNotFoundException(message=error.message)
    elif error.is_ConditionalCheckFailedException:
      return ConditionalCheckFailedException(message=error.message)
    elif error.is_ContinuousBackupsUnavailableException:
      return ContinuousBackupsUnavailableException(message=error.message)
    elif error.is_DuplicateItemException:
      return DuplicateItemException(message=error.message)
    elif error.is_ExportConflictException:
      return ExportConflictException(message=error.message)
    elif error.is_ExportNotFoundException:
      return ExportNotFoundException(message=error.message)
    elif error.is_GlobalTableAlreadyExistsException:
      return GlobalTableAlreadyExistsException(message=error.message)
    elif error.is_GlobalTableNotFoundException:
      return GlobalTableNotFoundException(message=error.message)
    elif error.is_IdempotentParameterMismatchException:
      return IdempotentParameterMismatchException(message=error.message)
    elif error.is_ImportConflictException:
      return ImportConflictException(message=error.message)
    elif error.is_ImportNotFoundException:
      return ImportNotFoundException(message=error.message)
    elif error.is_IndexNotFoundException:
      return IndexNotFoundException(message=error.message)
    elif error.is_InternalServerError:
      return InternalServerError(message=error.message)
    elif error.is_InvalidEndpointException:
      return InvalidEndpointException(message=error.message)
    elif error.is_InvalidExportTimeException:
      return InvalidExportTimeException(message=error.message)
    elif error.is_InvalidRestoreTimeException:
      return InvalidRestoreTimeException(message=error.message)
    elif error.is_ItemCollectionSizeLimitExceededException:
      return ItemCollectionSizeLimitExceededException(message=error.message)
    elif error.is_LimitExceededException:
      return LimitExceededException(message=error.message)
    elif error.is_PointInTimeRecoveryUnavailableException:
      return PointInTimeRecoveryUnavailableException(message=error.message)
    elif error.is_ProvisionedThroughputExceededException:
      return ProvisionedThroughputExceededException(message=error.message)
    elif error.is_ReplicaAlreadyExistsException:
      return ReplicaAlreadyExistsException(message=error.message)
    elif error.is_ReplicaNotFoundException:
      return ReplicaNotFoundException(message=error.message)
    elif error.is_RequestLimitExceeded:
      return RequestLimitExceeded(message=error.message)
    elif error.is_ResourceInUseException:
      return ResourceInUseException(message=error.message)
    elif error.is_ResourceNotFoundException:
      return ResourceNotFoundException(message=error.message)
    elif error.is_TableAlreadyExistsException:
      return TableAlreadyExistsException(message=error.message)
    elif error.is_TableInUseException:
      return TableInUseException(message=error.message)
    elif error.is_TableNotFoundException:
      return TableNotFoundException(message=error.message)
    elif error.is_TransactionCanceledException:
      return TransactionCanceledException(message=error.message)
    elif error.is_TransactionConflictException:
      return TransactionConflictException(message=error.message)
    elif error.is_TransactionInProgressException:
      return TransactionInProgressException(message=error.message)
    else:
        return OpaqueError(obj=error)
