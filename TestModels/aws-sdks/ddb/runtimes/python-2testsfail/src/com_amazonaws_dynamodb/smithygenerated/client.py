# Code generated by smithy-python-codegen DO NOT EDIT.

from asyncio import sleep
from copy import deepcopy
from typing import Awaitable, Callable, TypeVar, cast

from .dafny_protocol import DafnyRequest, DafnyResponse
from .plugin import set_config_impl
from smithy_python.exceptions import SmithyRetryException
from smithy_python.interfaces.interceptor import Interceptor, InterceptorContext
from smithy_python.interfaces.retries import RetryErrorInfo, RetryErrorType

from .config import Config, Plugin
from .deserialize import (
    _deserialize_batch_execute_statement,
    _deserialize_batch_get_item,
    _deserialize_batch_write_item,
    _deserialize_create_backup,
    _deserialize_create_global_table,
    _deserialize_create_table,
    _deserialize_delete_backup,
    _deserialize_delete_item,
    _deserialize_delete_table,
    _deserialize_describe_backup,
    _deserialize_describe_continuous_backups,
    _deserialize_describe_contributor_insights,
    _deserialize_describe_endpoints,
    _deserialize_describe_export,
    _deserialize_describe_global_table,
    _deserialize_describe_global_table_settings,
    _deserialize_describe_import,
    _deserialize_describe_kinesis_streaming_destination,
    _deserialize_describe_limits,
    _deserialize_describe_table,
    _deserialize_describe_table_replica_auto_scaling,
    _deserialize_describe_time_to_live,
    _deserialize_disable_kinesis_streaming_destination,
    _deserialize_enable_kinesis_streaming_destination,
    _deserialize_execute_statement,
    _deserialize_execute_transaction,
    _deserialize_export_table_to_point_in_time,
    _deserialize_get_item,
    _deserialize_import_table,
    _deserialize_list_backups,
    _deserialize_list_contributor_insights,
    _deserialize_list_exports,
    _deserialize_list_global_tables,
    _deserialize_list_imports,
    _deserialize_list_tables,
    _deserialize_list_tags_of_resource,
    _deserialize_put_item,
    _deserialize_query,
    _deserialize_restore_table_from_backup,
    _deserialize_restore_table_to_point_in_time,
    _deserialize_scan,
    _deserialize_tag_resource,
    _deserialize_transact_get_items,
    _deserialize_transact_write_items,
    _deserialize_untag_resource,
    _deserialize_update_continuous_backups,
    _deserialize_update_contributor_insights,
    _deserialize_update_global_table,
    _deserialize_update_global_table_settings,
    _deserialize_update_item,
    _deserialize_update_table,
    _deserialize_update_table_replica_auto_scaling,
    _deserialize_update_time_to_live,
)
from .errors import ServiceError
from .models import (
    BatchExecuteStatementInput,
    BatchExecuteStatementOutput,
    BatchGetItemInput,
    BatchGetItemOutput,
    BatchWriteItemInput,
    BatchWriteItemOutput,
    CreateBackupInput,
    CreateBackupOutput,
    CreateGlobalTableInput,
    CreateGlobalTableOutput,
    CreateTableInput,
    CreateTableOutput,
    DeleteBackupInput,
    DeleteBackupOutput,
    DeleteItemInput,
    DeleteItemOutput,
    DeleteTableInput,
    DeleteTableOutput,
    DescribeBackupInput,
    DescribeBackupOutput,
    DescribeContinuousBackupsInput,
    DescribeContinuousBackupsOutput,
    DescribeContributorInsightsInput,
    DescribeContributorInsightsOutput,
    DescribeEndpointsRequest,
    DescribeEndpointsResponse,
    DescribeExportInput,
    DescribeExportOutput,
    DescribeGlobalTableInput,
    DescribeGlobalTableOutput,
    DescribeGlobalTableSettingsInput,
    DescribeGlobalTableSettingsOutput,
    DescribeImportInput,
    DescribeImportOutput,
    DescribeKinesisStreamingDestinationInput,
    DescribeKinesisStreamingDestinationOutput,
    DescribeLimitsInput,
    DescribeLimitsOutput,
    DescribeTableInput,
    DescribeTableOutput,
    DescribeTableReplicaAutoScalingInput,
    DescribeTableReplicaAutoScalingOutput,
    DescribeTimeToLiveInput,
    DescribeTimeToLiveOutput,
    DisableKinesisStreamingDestinationInput,
    DisableKinesisStreamingDestinationOutput,
    EnableKinesisStreamingDestinationInput,
    EnableKinesisStreamingDestinationOutput,
    ExecuteStatementInput,
    ExecuteStatementOutput,
    ExecuteTransactionInput,
    ExecuteTransactionOutput,
    ExportTableToPointInTimeInput,
    ExportTableToPointInTimeOutput,
    GetItemInput,
    GetItemOutput,
    ImportTableInput,
    ImportTableOutput,
    ListBackupsInput,
    ListBackupsOutput,
    ListContributorInsightsInput,
    ListContributorInsightsOutput,
    ListExportsInput,
    ListExportsOutput,
    ListGlobalTablesInput,
    ListGlobalTablesOutput,
    ListImportsInput,
    ListImportsOutput,
    ListTablesInput,
    ListTablesOutput,
    ListTagsOfResourceInput,
    ListTagsOfResourceOutput,
    PutItemInput,
    PutItemOutput,
    QueryInput,
    QueryOutput,
    RestoreTableFromBackupInput,
    RestoreTableFromBackupOutput,
    RestoreTableToPointInTimeInput,
    RestoreTableToPointInTimeOutput,
    ScanInput,
    ScanOutput,
    TagResourceInput,
    TransactGetItemsInput,
    TransactGetItemsOutput,
    TransactWriteItemsInput,
    TransactWriteItemsOutput,
    Unit,
    UntagResourceInput,
    UpdateContinuousBackupsInput,
    UpdateContinuousBackupsOutput,
    UpdateContributorInsightsInput,
    UpdateContributorInsightsOutput,
    UpdateGlobalTableInput,
    UpdateGlobalTableOutput,
    UpdateGlobalTableSettingsInput,
    UpdateGlobalTableSettingsOutput,
    UpdateItemInput,
    UpdateItemOutput,
    UpdateTableInput,
    UpdateTableOutput,
    UpdateTableReplicaAutoScalingInput,
    UpdateTableReplicaAutoScalingOutput,
    UpdateTimeToLiveInput,
    UpdateTimeToLiveOutput,
)
from .serialize import (
    _serialize_batch_execute_statement,
    _serialize_batch_get_item,
    _serialize_batch_write_item,
    _serialize_create_backup,
    _serialize_create_global_table,
    _serialize_create_table,
    _serialize_delete_backup,
    _serialize_delete_item,
    _serialize_delete_table,
    _serialize_describe_backup,
    _serialize_describe_continuous_backups,
    _serialize_describe_contributor_insights,
    _serialize_describe_endpoints,
    _serialize_describe_export,
    _serialize_describe_global_table,
    _serialize_describe_global_table_settings,
    _serialize_describe_import,
    _serialize_describe_kinesis_streaming_destination,
    _serialize_describe_limits,
    _serialize_describe_table,
    _serialize_describe_table_replica_auto_scaling,
    _serialize_describe_time_to_live,
    _serialize_disable_kinesis_streaming_destination,
    _serialize_enable_kinesis_streaming_destination,
    _serialize_execute_statement,
    _serialize_execute_transaction,
    _serialize_export_table_to_point_in_time,
    _serialize_get_item,
    _serialize_import_table,
    _serialize_list_backups,
    _serialize_list_contributor_insights,
    _serialize_list_exports,
    _serialize_list_global_tables,
    _serialize_list_imports,
    _serialize_list_tables,
    _serialize_list_tags_of_resource,
    _serialize_put_item,
    _serialize_query,
    _serialize_restore_table_from_backup,
    _serialize_restore_table_to_point_in_time,
    _serialize_scan,
    _serialize_tag_resource,
    _serialize_transact_get_items,
    _serialize_transact_write_items,
    _serialize_untag_resource,
    _serialize_update_continuous_backups,
    _serialize_update_contributor_insights,
    _serialize_update_global_table,
    _serialize_update_global_table_settings,
    _serialize_update_item,
    _serialize_update_table,
    _serialize_update_table_replica_auto_scaling,
    _serialize_update_time_to_live,
)


Input = TypeVar("Input")
Output = TypeVar("Output")

class DynamoDB_20120810:
    """<fullname>Amazon DynamoDB</fullname>

            <p>Amazon DynamoDB is a fully managed NoSQL database service that provides fast
                and predictable performance with seamless scalability. DynamoDB lets you
                offload the administrative burdens of operating and scaling a distributed database, so
                that you don't have to worry about hardware provisioning, setup and configuration,
                replication, software patching, or cluster scaling.</p>

            <p>With DynamoDB, you can create database tables that can store and retrieve
                any amount of data, and serve any level of request traffic. You can scale up or scale
                down your tables' throughput capacity without downtime or performance degradation, and
                use the Amazon Web Services Management Console to monitor resource utilization and performance
                metrics.</p>

            <p>DynamoDB automatically spreads the data and traffic for your tables over
                a sufficient number of servers to handle your throughput and storage requirements, while
                maintaining consistent and fast performance. All of your data is stored on solid state
                disks (SSDs) and automatically replicated across multiple Availability Zones in an
                    Amazon Web Services Region, providing built-in high availability and data
                durability.</p>

    :param config: Optional configuration for the client. Here you can set things like the
    endpoint for HTTP services or auth credentials.

    :param plugins: A list of callables that modify the configuration dynamically. These
    can be used to set defaults, for example.
    """
    def __init__(self, config: Config | None = None, plugins: list[Plugin] | None = None):
        self._config = config or Config()

        client_plugins: list[Plugin] = [
            set_config_impl,
        ]
        if plugins:
            client_plugins.extend(plugins)

        for plugin in client_plugins:
            plugin(self._config)

    async def batch_execute_statement(self, input: BatchExecuteStatementInput, plugins: list[Plugin] | None = None) -> BatchExecuteStatementOutput:
        """<p>This operation allows you to perform batch reads or writes on data stored in DynamoDB,
                    using PartiQL. Each read statement in a <code>BatchExecuteStatement</code> must specify an equality
                    condition on all key attributes. This enforces that each <code>SELECT</code> statement in a
                    batch returns at most a single item.</p>
                <note>
                    <p>The entire batch must consist of either read statements or write statements, you
                        cannot mix both in one batch.</p>
                </note>
                <important>
                    <p>A HTTP 200 response does not mean that all statements in the BatchExecuteStatement
                        succeeded. Error details for individual statements can be found under the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_BatchStatementResponse.html#DDB-Type-BatchStatementResponse-Error">Error</a> field of the <code>BatchStatementResponse</code> for each
                        statement.</p>
                </important>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_batch_execute_statement,
            deserialize=_deserialize_batch_execute_statement,
            config=self._config,
            operation_name="BatchExecuteStatement",
        )

    async def batch_get_item(self, input: BatchGetItemInput, plugins: list[Plugin] | None = None) -> BatchGetItemOutput:
        """<p>The <code>BatchGetItem</code> operation returns the attributes of one or more items
                    from one or more tables. You identify requested items by primary key.</p>
                <p>A single operation can retrieve up to 16 MB of data, which can contain as many as 100
                    items. <code>BatchGetItem</code> returns a partial result if the response size limit is
                    exceeded, the table's provisioned throughput is exceeded, or an internal processing
                    failure occurs. If a partial result is returned, the operation returns a value for
                        <code>UnprocessedKeys</code>. You can use this value to retry the operation starting
                    with the next item to get.</p>
                <important>
                    <p>If you request more than 100 items, <code>BatchGetItem</code> returns a
                            <code>ValidationException</code> with the message "Too many items requested for
                        the BatchGetItem call."</p>
                </important>
                <p>For example, if you ask to retrieve 100 items, but each individual item is 300 KB in
                    size, the system returns 52 items (so as not to exceed the 16 MB limit). It also returns
                    an appropriate <code>UnprocessedKeys</code> value so you can get the next page of
                    results. If desired, your application can include its own logic to assemble the pages of
                    results into one dataset.</p>
                <p>If <i>none</i> of the items can be processed due to insufficient
                    provisioned throughput on all of the tables in the request, then
                        <code>BatchGetItem</code> returns a
                        <code>ProvisionedThroughputExceededException</code>. If <i>at least
                        one</i> of the items is successfully processed, then
                        <code>BatchGetItem</code> completes successfully, while returning the keys of the
                    unread items in <code>UnprocessedKeys</code>.</p>
                <important>
                    <p>If DynamoDB returns any unprocessed items, you should retry the batch operation on
                        those items. However, <i>we strongly recommend that you use an exponential
                            backoff algorithm</i>. If you retry the batch operation immediately, the
                        underlying read or write requests can still fail due to throttling on the individual
                        tables. If you delay the batch operation using exponential backoff, the individual
                        requests in the batch are much more likely to succeed.</p>
                    <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#BatchOperations">Batch Operations and Error Handling</a> in the <i>Amazon DynamoDB
                            Developer Guide</i>.</p>
                </important>
                <p>By default, <code>BatchGetItem</code> performs eventually consistent reads on every
                    table in the request. If you want strongly consistent reads instead, you can set
                        <code>ConsistentRead</code> to <code>true</code> for any or all tables.</p>
                <p>In order to minimize response latency, <code>BatchGetItem</code> retrieves items in
                    parallel.</p>
                <p>When designing your application, keep in mind that DynamoDB does not return items in
                    any particular order. To help parse the response by item, include the primary key values
                    for the items in your request in the <code>ProjectionExpression</code> parameter.</p>
                <p>If a requested item does not exist, it is not returned in the result. Requests for
                    nonexistent items consume the minimum read capacity units according to the type of read.
                    For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithTables.html#CapacityUnitCalculations">Working with Tables</a> in the <i>Amazon DynamoDB Developer
                        Guide</i>.</p>

        :param input: <p>Represents the input of a <code>BatchGetItem</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_batch_get_item,
            deserialize=_deserialize_batch_get_item,
            config=self._config,
            operation_name="BatchGetItem",
        )

    async def batch_write_item(self, input: BatchWriteItemInput, plugins: list[Plugin] | None = None) -> BatchWriteItemOutput:
        """<p>The <code>BatchWriteItem</code> operation puts or deletes multiple items in one or
                    more tables. A single call to <code>BatchWriteItem</code> can transmit up to 16MB of
                    data over the network, consisting of up to 25 item put or delete operations. While
                    individual items can be up to 400 KB once stored, it's important to note that an item's
                    representation might be greater than 400KB while being sent in DynamoDB's JSON format
                    for the API call. For more details on this distinction, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/HowItWorks.NamingRulesDataTypes.html">Naming Rules and Data Types</a>.</p>
                <note>
                    <p>
                        <code>BatchWriteItem</code> cannot update items. To update items, use the
                            <code>UpdateItem</code> action.</p>
                </note>
                <p>The individual <code>PutItem</code> and <code>DeleteItem</code> operations specified
                    in <code>BatchWriteItem</code> are atomic; however <code>BatchWriteItem</code> as a
                    whole is not. If any requested operations fail because the table's provisioned
                    throughput is exceeded or an internal processing failure occurs, the failed operations
                    are returned in the <code>UnprocessedItems</code> response parameter. You can
                    investigate and optionally resend the requests. Typically, you would call
                        <code>BatchWriteItem</code> in a loop. Each iteration would check for unprocessed
                    items and submit a new <code>BatchWriteItem</code> request with those unprocessed items
                    until all items have been processed.</p>
                <p>If <i>none</i> of the items can be processed due to insufficient
                    provisioned throughput on all of the tables in the request, then
                        <code>BatchWriteItem</code> returns a
                        <code>ProvisionedThroughputExceededException</code>.</p>
                <important>
                    <p>If DynamoDB returns any unprocessed items, you should retry the batch operation on
                        those items. However, <i>we strongly recommend that you use an exponential
                            backoff algorithm</i>. If you retry the batch operation immediately, the
                        underlying read or write requests can still fail due to throttling on the individual
                        tables. If you delay the batch operation using exponential backoff, the individual
                        requests in the batch are much more likely to succeed.</p>
                    <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/ErrorHandling.html#Programming.Errors.BatchOperations">Batch Operations and Error Handling</a> in the <i>Amazon DynamoDB
                            Developer Guide</i>.</p>
                </important>

                <p>With <code>BatchWriteItem</code>, you can efficiently write or delete large amounts of
                    data, such as from Amazon EMR, or copy data from another database into DynamoDB. In
                    order to improve performance with these large-scale operations,
                        <code>BatchWriteItem</code> does not behave in the same way as individual
                        <code>PutItem</code> and <code>DeleteItem</code> calls would. For example, you
                    cannot specify conditions on individual put and delete requests, and
                        <code>BatchWriteItem</code> does not return deleted items in the response.</p>
                <p>If you use a programming language that supports concurrency, you can use threads to
                    write items in parallel. Your application must include the necessary logic to manage the
                    threads. With languages that don't support threading, you must update or delete the
                    specified items one at a time. In both situations, <code>BatchWriteItem</code> performs
                    the specified put and delete operations in parallel, giving you the power of the thread
                    pool approach without having to introduce complexity into your application.</p>
                <p>Parallel processing reduces latency, but each specified put and delete request
                    consumes the same number of write capacity units whether it is processed in parallel or
                    not. Delete operations on nonexistent items consume one write capacity unit.</p>
                <p>If one or more of the following is true, DynamoDB rejects the entire batch write
                    operation:</p>
                <ul>
                    <li>
                        <p>One or more tables specified in the <code>BatchWriteItem</code> request does
                            not exist.</p>
                    </li>
                    <li>
                        <p>Primary key attributes specified on an item in the request do not match those
                            in the corresponding table's primary key schema.</p>
                    </li>
                    <li>
                        <p>You try to perform multiple operations on the same item in the same
                                <code>BatchWriteItem</code> request. For example, you cannot put and delete
                            the same item in the same <code>BatchWriteItem</code> request. </p>
                    </li>
                    <li>
                        <p> Your request contains at least two items with identical hash and range keys
                            (which essentially is two put operations). </p>
                    </li>
                    <li>
                        <p>There are more than 25 requests in the batch.</p>
                    </li>
                    <li>
                        <p>Any individual item in a batch exceeds 400 KB.</p>
                    </li>
                    <li>
                        <p>The total request size exceeds 16 MB.</p>
                    </li>
                 </ul>

        :param input: <p>Represents the input of a <code>BatchWriteItem</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_batch_write_item,
            deserialize=_deserialize_batch_write_item,
            config=self._config,
            operation_name="BatchWriteItem",
        )

    async def create_backup(self, input: CreateBackupInput, plugins: list[Plugin] | None = None) -> CreateBackupOutput:
        """<p>Creates a backup for an existing table.</p>
                <p> Each time you create an on-demand backup, the entire table data is backed up. There
                    is no limit to the number of on-demand backups that can be taken. </p>
                <p> When you create an on-demand backup, a time marker of the request is cataloged, and
                    the backup is created asynchronously, by applying all changes until the time of the
                    request to the last full table snapshot. Backup requests are processed instantaneously
                    and become available for restore within minutes. </p>
                <p>You can call <code>CreateBackup</code> at a maximum rate of 50 times per
                    second.</p>
                <p>All backups in DynamoDB work without consuming any provisioned throughput on the
                    table.</p>
                <p> If you submit a backup request on 2018-12-14 at 14:25:00, the backup is guaranteed to
                    contain all data committed to the table up to 14:24:00, and data committed after
                    14:26:00 will not be. The backup might contain data modifications made between 14:24:00
                    and 14:26:00. On-demand backup does not support causal consistency. </p>
                <p> Along with data, the following are also included on the backups: </p>
                <ul>
                    <li>
                        <p>Global secondary indexes (GSIs)</p>
                    </li>
                    <li>
                        <p>Local secondary indexes (LSIs)</p>
                    </li>
                    <li>
                        <p>Streams</p>
                    </li>
                    <li>
                        <p>Provisioned read and write capacity</p>
                    </li>
                 </ul>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_backup,
            deserialize=_deserialize_create_backup,
            config=self._config,
            operation_name="CreateBackup",
        )

    async def create_global_table(self, input: CreateGlobalTableInput, plugins: list[Plugin] | None = None) -> CreateGlobalTableOutput:
        """<p>Creates a global table from an existing table. A global table creates a replication
                    relationship between two or more DynamoDB tables with the same table name in the
                    provided Regions. </p>
                <note>
                    <p>This operation only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html">Version
                            2017.11.29</a> of global tables.</p>
                </note>

                <p>If you want to add a new replica table to a global table, each of the following
                    conditions must be true:</p>
                <ul>
                    <li>
                        <p>The table must have the same primary key as all of the other replicas.</p>
                    </li>
                    <li>
                        <p>The table must have the same name as all of the other replicas.</p>
                    </li>
                    <li>
                        <p>The table must have DynamoDB Streams enabled, with the stream containing both
                            the new and the old images of the item.</p>
                    </li>
                    <li>
                        <p>None of the replica tables in the global table can contain any data.</p>
                    </li>
                 </ul>
                <p> If global secondary indexes are specified, then the following conditions must also be
                    met: </p>
                <ul>
                    <li>
                        <p> The global secondary indexes must have the same name. </p>
                    </li>
                    <li>
                        <p> The global secondary indexes must have the same hash key and sort key (if
                            present). </p>
                    </li>
                 </ul>
                <p> If local secondary indexes are specified, then the following conditions must also be
                    met: </p>
                <ul>
                    <li>
                        <p> The local secondary indexes must have the same name. </p>
                    </li>
                    <li>
                        <p> The local secondary indexes must have the same hash key and sort key (if
                            present). </p>
                    </li>
                 </ul>

                <important>
                    <p> Write capacity settings should be set consistently across your replica tables and
                        secondary indexes. DynamoDB strongly recommends enabling auto scaling to manage the
                        write capacity settings for all of your global tables replicas and indexes. </p>
                    <p> If you prefer to manage write capacity settings manually, you should provision
                        equal replicated write capacity units to your replica tables. You should also
                        provision equal replicated write capacity units to matching secondary indexes across
                        your global table. </p>
                </important>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_global_table,
            deserialize=_deserialize_create_global_table,
            config=self._config,
            operation_name="CreateGlobalTable",
        )

    async def create_table(self, input: CreateTableInput, plugins: list[Plugin] | None = None) -> CreateTableOutput:
        """<p>The <code>CreateTable</code> operation adds a new table to your account. In an Amazon Web Services account, table names must be unique within each Region. That is, you can
                    have two tables with same name if you create the tables in different Regions.</p>
                <p>
                    <code>CreateTable</code> is an asynchronous operation. Upon receiving a
                        <code>CreateTable</code> request, DynamoDB immediately returns a response with a
                        <code>TableStatus</code> of <code>CREATING</code>. After the table is created,
                    DynamoDB sets the <code>TableStatus</code> to <code>ACTIVE</code>. You can perform read
                    and write operations only on an <code>ACTIVE</code> table. </p>
                <p>You can optionally define secondary indexes on the new table, as part of the
                        <code>CreateTable</code> operation. If you want to create multiple tables with
                    secondary indexes on them, you must create the tables sequentially. Only one table with
                    secondary indexes can be in the <code>CREATING</code> state at any given time.</p>
                <p>You can use the <code>DescribeTable</code> action to check the table status.</p>

        :param input: <p>Represents the input of a <code>CreateTable</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_create_table,
            deserialize=_deserialize_create_table,
            config=self._config,
            operation_name="CreateTable",
        )

    async def delete_backup(self, input: DeleteBackupInput, plugins: list[Plugin] | None = None) -> DeleteBackupOutput:
        """<p>Deletes an existing backup of a table.</p>
                <p>You can call <code>DeleteBackup</code> at a maximum rate of 10 times per
                    second.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_delete_backup,
            deserialize=_deserialize_delete_backup,
            config=self._config,
            operation_name="DeleteBackup",
        )

    async def delete_item(self, input: DeleteItemInput, plugins: list[Plugin] | None = None) -> DeleteItemOutput:
        """<p>Deletes a single item in a table by primary key. You can perform a conditional delete
                    operation that deletes the item if it exists, or if it has an expected attribute
                    value.</p>
                <p>In addition to deleting an item, you can also return the item's attribute values in
                    the same operation, using the <code>ReturnValues</code> parameter.</p>
                <p>Unless you specify conditions, the <code>DeleteItem</code> is an idempotent operation;
                    running it multiple times on the same item or attribute does <i>not</i>
                    result in an error response.</p>
                <p>Conditional deletes are useful for deleting items only if specific conditions are met.
                    If those conditions are met, DynamoDB performs the delete. Otherwise, the item is not
                    deleted.</p>

        :param input: <p>Represents the input of a <code>DeleteItem</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_delete_item,
            deserialize=_deserialize_delete_item,
            config=self._config,
            operation_name="DeleteItem",
        )

    async def delete_table(self, input: DeleteTableInput, plugins: list[Plugin] | None = None) -> DeleteTableOutput:
        """<p>The <code>DeleteTable</code> operation deletes a table and all of its items. After a
                        <code>DeleteTable</code> request, the specified table is in the
                        <code>DELETING</code> state until DynamoDB completes the deletion. If the table is
                    in the <code>ACTIVE</code> state, you can delete it. If a table is in
                        <code>CREATING</code> or <code>UPDATING</code> states, then DynamoDB returns a
                        <code>ResourceInUseException</code>. If the specified table does not exist, DynamoDB
                    returns a <code>ResourceNotFoundException</code>. If table is already in the
                        <code>DELETING</code> state, no error is returned. </p>
                <note>
                    <p>DynamoDB might continue to accept data read and write operations, such as
                            <code>GetItem</code> and <code>PutItem</code>, on a table in the
                            <code>DELETING</code> state until the table deletion is complete.</p>
                </note>
                <p>When you delete a table, any indexes on that table are also deleted.</p>
                <p>If you have DynamoDB Streams enabled on the table, then the corresponding stream on
                    that table goes into the <code>DISABLED</code> state, and the stream is automatically
                    deleted after 24 hours.</p>

                <p>Use the <code>DescribeTable</code> action to check the status of the table. </p>

        :param input: <p>Represents the input of a <code>DeleteTable</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_delete_table,
            deserialize=_deserialize_delete_table,
            config=self._config,
            operation_name="DeleteTable",
        )

    async def describe_backup(self, input: DescribeBackupInput, plugins: list[Plugin] | None = None) -> DescribeBackupOutput:
        """<p>Describes an existing backup of a table.</p>
                <p>You can call <code>DescribeBackup</code> at a maximum rate of 10 times per
                    second.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_backup,
            deserialize=_deserialize_describe_backup,
            config=self._config,
            operation_name="DescribeBackup",
        )

    async def describe_continuous_backups(self, input: DescribeContinuousBackupsInput, plugins: list[Plugin] | None = None) -> DescribeContinuousBackupsOutput:
        """<p>Checks the status of continuous backups and point in time recovery on the specified
                    table. Continuous backups are <code>ENABLED</code> on all tables at table creation. If
                    point in time recovery is enabled, <code>PointInTimeRecoveryStatus</code> will be set to
                    ENABLED.</p>
                <p> After continuous backups and point in time recovery are enabled, you can restore to
                    any point in time within <code>EarliestRestorableDateTime</code> and
                        <code>LatestRestorableDateTime</code>. </p>
                <p>
                    <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time.
                    You can restore your table to any point in time during the last 35 days. </p>
                <p>You can call <code>DescribeContinuousBackups</code> at a maximum rate of 10 times per
                    second.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_continuous_backups,
            deserialize=_deserialize_describe_continuous_backups,
            config=self._config,
            operation_name="DescribeContinuousBackups",
        )

    async def describe_contributor_insights(self, input: DescribeContributorInsightsInput, plugins: list[Plugin] | None = None) -> DescribeContributorInsightsOutput:
        """<p>Returns information about contributor insights, for a given table or global secondary
                    index.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_contributor_insights,
            deserialize=_deserialize_describe_contributor_insights,
            config=self._config,
            operation_name="DescribeContributorInsights",
        )

    async def describe_endpoints(self, input: DescribeEndpointsRequest, plugins: list[Plugin] | None = None) -> DescribeEndpointsResponse:
        """<p>Returns the regional endpoint information.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_endpoints,
            deserialize=_deserialize_describe_endpoints,
            config=self._config,
            operation_name="DescribeEndpoints",
        )

    async def describe_export(self, input: DescribeExportInput, plugins: list[Plugin] | None = None) -> DescribeExportOutput:
        """<p>Describes an existing table export.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_export,
            deserialize=_deserialize_describe_export,
            config=self._config,
            operation_name="DescribeExport",
        )

    async def describe_global_table(self, input: DescribeGlobalTableInput, plugins: list[Plugin] | None = None) -> DescribeGlobalTableOutput:
        """<p>Returns information about the specified global table.</p>
                <note>
                    <p>This operation only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html">Version
                            2017.11.29</a> of global tables. If you are using global tables <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html">Version
                            2019.11.21</a> you can use <a href="https://docs.aws.amazon.com/amazondynamodb/latest/APIReference/API_DescribeTable.html">DescribeTable</a> instead.</p>
                </note>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_global_table,
            deserialize=_deserialize_describe_global_table,
            config=self._config,
            operation_name="DescribeGlobalTable",
        )

    async def describe_global_table_settings(self, input: DescribeGlobalTableSettingsInput, plugins: list[Plugin] | None = None) -> DescribeGlobalTableSettingsOutput:
        """<p>Describes Region-specific settings for a global table.</p>
                <note>
                    <p>This operation only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html">Version
                            2017.11.29</a> of global tables.</p>
                </note>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_global_table_settings,
            deserialize=_deserialize_describe_global_table_settings,
            config=self._config,
            operation_name="DescribeGlobalTableSettings",
        )

    async def describe_import(self, input: DescribeImportInput, plugins: list[Plugin] | None = None) -> DescribeImportOutput:
        """<p>
                        Represents the properties of the import.
                        </p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_import,
            deserialize=_deserialize_describe_import,
            config=self._config,
            operation_name="DescribeImport",
        )

    async def describe_kinesis_streaming_destination(self, input: DescribeKinesisStreamingDestinationInput, plugins: list[Plugin] | None = None) -> DescribeKinesisStreamingDestinationOutput:
        """<p>Returns information about the status of Kinesis streaming.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_kinesis_streaming_destination,
            deserialize=_deserialize_describe_kinesis_streaming_destination,
            config=self._config,
            operation_name="DescribeKinesisStreamingDestination",
        )

    async def describe_limits(self, input: DescribeLimitsInput, plugins: list[Plugin] | None = None) -> DescribeLimitsOutput:
        """<p>Returns the current provisioned-capacity quotas for your Amazon Web Services account in
                    a Region, both for the Region as a whole and for any one DynamoDB table that you create
                    there.</p>
                <p>When you establish an Amazon Web Services account, the account has initial quotas on
                    the maximum read capacity units and write capacity units that you can provision across
                    all of your DynamoDB tables in a given Region. Also, there are per-table
                    quotas that apply when you create a table there. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Limits.html">Service,
                        Account, and Table Quotas</a> page in the <i>Amazon DynamoDB
                        Developer Guide</i>.</p>

                <p>Although you can increase these quotas by filing a case at <a href="https://console.aws.amazon.com/support/home#/">Amazon Web Services Support Center</a>, obtaining the
                    increase is not instantaneous. The <code>DescribeLimits</code> action lets you write
                    code to compare the capacity you are currently using to those quotas imposed by your
                    account so that you have enough time to apply for an increase before you hit a
                    quota.</p>

                <p>For example, you could use one of the Amazon Web Services SDKs to do the
                    following:</p>

                <ol>
                    <li>
                        <p>Call <code>DescribeLimits</code> for a particular Region to obtain your
                            current account quotas on provisioned capacity there.</p>
                    </li>
                    <li>
                        <p>Create a variable to hold the aggregate read capacity units provisioned for
                            all your tables in that Region, and one to hold the aggregate write capacity
                            units. Zero them both.</p>
                    </li>
                    <li>
                        <p>Call <code>ListTables</code> to obtain a list of all your DynamoDB
                            tables.</p>
                    </li>
                    <li>
                        <p>For each table name listed by <code>ListTables</code>, do the
                            following:</p>
                        <ul>
                          <li>
                                <p>Call <code>DescribeTable</code> with the table name.</p>
                            </li>
                          <li>
                                <p>Use the data returned by <code>DescribeTable</code> to add the read
                                    capacity units and write capacity units provisioned for the table itself
                                    to your variables.</p>
                            </li>
                          <li>
                                <p>If the table has one or more global secondary indexes (GSIs), loop
                                    over these GSIs and add their provisioned capacity values to your
                                    variables as well.</p>
                            </li>
                       </ul>
                    </li>
                    <li>
                        <p>Report the account quotas for that Region returned by
                                <code>DescribeLimits</code>, along with the total current provisioned
                            capacity levels you have calculated.</p>
                    </li>
                 </ol>

                <p>This will let you see whether you are getting close to your account-level
                    quotas.</p>
                <p>The per-table quotas apply only when you are creating a new table. They restrict the
                    sum of the provisioned capacity of the new table itself and all its global secondary
                    indexes.</p>
                <p>For existing tables and their GSIs, DynamoDB doesn't let you increase provisioned
                    capacity extremely rapidly, but the only quota that applies is that the aggregate
                    provisioned capacity over all your tables and GSIs cannot exceed either of the
                    per-account quotas.</p>
                <note>
                    <p>
                        <code>DescribeLimits</code> should only be called periodically. You can expect
                        throttling errors if you call it more than once in a minute.</p>
                </note>
                <p>The <code>DescribeLimits</code> Request element has no content.</p>

        :param input: <p>Represents the input of a <code>DescribeLimits</code> operation. Has no
                    content.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_limits,
            deserialize=_deserialize_describe_limits,
            config=self._config,
            operation_name="DescribeLimits",
        )

    async def describe_table(self, input: DescribeTableInput, plugins: list[Plugin] | None = None) -> DescribeTableOutput:
        """<p>Returns information about the table, including the current status of the table, when
                    it was created, the primary key schema, and any indexes on the table.</p>
                <note>
                    <p>If you issue a <code>DescribeTable</code> request immediately after a
                            <code>CreateTable</code> request, DynamoDB might return a
                            <code>ResourceNotFoundException</code>. This is because
                            <code>DescribeTable</code> uses an eventually consistent query, and the metadata
                        for your table might not be available at that moment. Wait for a few seconds, and
                        then try the <code>DescribeTable</code> request again.</p>
                </note>

        :param input: <p>Represents the input of a <code>DescribeTable</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_table,
            deserialize=_deserialize_describe_table,
            config=self._config,
            operation_name="DescribeTable",
        )

    async def describe_table_replica_auto_scaling(self, input: DescribeTableReplicaAutoScalingInput, plugins: list[Plugin] | None = None) -> DescribeTableReplicaAutoScalingOutput:
        """<p>Describes auto scaling settings across replicas of the global table at once.</p>
                <note>
                    <p>This operation only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html">Version
                            2019.11.21</a> of global tables.</p>
                </note>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_table_replica_auto_scaling,
            deserialize=_deserialize_describe_table_replica_auto_scaling,
            config=self._config,
            operation_name="DescribeTableReplicaAutoScaling",
        )

    async def describe_time_to_live(self, input: DescribeTimeToLiveInput, plugins: list[Plugin] | None = None) -> DescribeTimeToLiveOutput:
        """<p>Gives a description of the Time to Live (TTL) status on the specified table. </p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_describe_time_to_live,
            deserialize=_deserialize_describe_time_to_live,
            config=self._config,
            operation_name="DescribeTimeToLive",
        )

    async def disable_kinesis_streaming_destination(self, input: DisableKinesisStreamingDestinationInput, plugins: list[Plugin] | None = None) -> DisableKinesisStreamingDestinationOutput:
        """<p>Stops replication from the DynamoDB table to the Kinesis data stream. This is done
                    without deleting either of the resources.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_disable_kinesis_streaming_destination,
            deserialize=_deserialize_disable_kinesis_streaming_destination,
            config=self._config,
            operation_name="DisableKinesisStreamingDestination",
        )

    async def enable_kinesis_streaming_destination(self, input: EnableKinesisStreamingDestinationInput, plugins: list[Plugin] | None = None) -> EnableKinesisStreamingDestinationOutput:
        """<p>Starts table data replication to the specified Kinesis data stream at a timestamp
                    chosen during the enable workflow. If this operation doesn't return results immediately,
                    use DescribeKinesisStreamingDestination to check if streaming to the Kinesis data stream
                    is ACTIVE.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_enable_kinesis_streaming_destination,
            deserialize=_deserialize_enable_kinesis_streaming_destination,
            config=self._config,
            operation_name="EnableKinesisStreamingDestination",
        )

    async def execute_statement(self, input: ExecuteStatementInput, plugins: list[Plugin] | None = None) -> ExecuteStatementOutput:
        """<p>This operation allows you to perform reads and singleton writes on data stored in
                    DynamoDB, using PartiQL.</p>
                <p>For PartiQL reads (<code>SELECT</code> statement), if the total number of processed
                    items exceeds the maximum dataset size limit of 1 MB, the read stops and results are
                    returned to the user as a <code>LastEvaluatedKey</code> value to continue the read in a
                    subsequent operation. If the filter criteria in <code>WHERE</code> clause does not match
                    any data, the read will return an empty result set.</p>
                <p>A single <code>SELECT</code> statement response can return up to the maximum number of
                    items (if using the Limit parameter) or a maximum of 1 MB of data (and then apply any
                    filtering to the results using <code>WHERE</code> clause). If
                        <code>LastEvaluatedKey</code> is present in the response, you need to paginate the
                    result set.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_execute_statement,
            deserialize=_deserialize_execute_statement,
            config=self._config,
            operation_name="ExecuteStatement",
        )

    async def execute_transaction(self, input: ExecuteTransactionInput, plugins: list[Plugin] | None = None) -> ExecuteTransactionOutput:
        """<p>This operation allows you to perform transactional reads or writes on data stored in
                    DynamoDB, using PartiQL.</p>
                <note>
                    <p>The entire transaction must consist of either read statements or write statements,
                        you cannot mix both in one transaction. The EXISTS function is an exception and can
                        be used to check the condition of specific attributes of the item in a similar
                        manner to <code>ConditionCheck</code> in the <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/transaction-apis.html#transaction-apis-txwriteitems">TransactWriteItems</a> API.</p>
                </note>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_execute_transaction,
            deserialize=_deserialize_execute_transaction,
            config=self._config,
            operation_name="ExecuteTransaction",
        )

    async def export_table_to_point_in_time(self, input: ExportTableToPointInTimeInput, plugins: list[Plugin] | None = None) -> ExportTableToPointInTimeOutput:
        """<p>Exports table data to an S3 bucket. The table must have point in time recovery
                    enabled, and you can export data from any time within the point in time recovery
                    window.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_export_table_to_point_in_time,
            deserialize=_deserialize_export_table_to_point_in_time,
            config=self._config,
            operation_name="ExportTableToPointInTime",
        )

    async def get_item(self, input: GetItemInput, plugins: list[Plugin] | None = None) -> GetItemOutput:
        """<p>The <code>GetItem</code> operation returns a set of attributes for the item with the
                    given primary key. If there is no matching item, <code>GetItem</code> does not return
                    any data and there will be no <code>Item</code> element in the response.</p>
                <p>
                    <code>GetItem</code> provides an eventually consistent read by default. If your
                    application requires a strongly consistent read, set <code>ConsistentRead</code> to
                        <code>true</code>. Although a strongly consistent read might take more time than an
                    eventually consistent read, it always returns the last updated value.</p>

        :param input: <p>Represents the input of a <code>GetItem</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_get_item,
            deserialize=_deserialize_get_item,
            config=self._config,
            operation_name="GetItem",
        )

    async def import_table(self, input: ImportTableInput, plugins: list[Plugin] | None = None) -> ImportTableOutput:
        """<p>
                        Imports table data from an S3 bucket.

                    </p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_import_table,
            deserialize=_deserialize_import_table,
            config=self._config,
            operation_name="ImportTable",
        )

    async def list_backups(self, input: ListBackupsInput, plugins: list[Plugin] | None = None) -> ListBackupsOutput:
        """<p>List backups associated with an Amazon Web Services account. To list backups for a
                    given table, specify <code>TableName</code>. <code>ListBackups</code> returns a
                    paginated list of results with at most 1 MB worth of items in a page. You can also
                    specify a maximum number of entries to be returned in a page.</p>
                <p>In the request, start time is inclusive, but end time is exclusive. Note that these
                    boundaries are for the time at which the original backup was requested.</p>
                <p>You can call <code>ListBackups</code> a maximum of five times per second.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_backups,
            deserialize=_deserialize_list_backups,
            config=self._config,
            operation_name="ListBackups",
        )

    async def list_contributor_insights(self, input: ListContributorInsightsInput, plugins: list[Plugin] | None = None) -> ListContributorInsightsOutput:
        """<p>Returns a list of ContributorInsightsSummary for a table and all its global secondary
                    indexes.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_contributor_insights,
            deserialize=_deserialize_list_contributor_insights,
            config=self._config,
            operation_name="ListContributorInsights",
        )

    async def list_exports(self, input: ListExportsInput, plugins: list[Plugin] | None = None) -> ListExportsOutput:
        """<p>Lists completed exports within the past 90 days.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_exports,
            deserialize=_deserialize_list_exports,
            config=self._config,
            operation_name="ListExports",
        )

    async def list_global_tables(self, input: ListGlobalTablesInput, plugins: list[Plugin] | None = None) -> ListGlobalTablesOutput:
        """<p>Lists all global tables that have a replica in the specified Region.</p>
                <note>
                    <p>This operation only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V1.html">Version
                            2017.11.29</a> of global tables.</p>
                </note>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_global_tables,
            deserialize=_deserialize_list_global_tables,
            config=self._config,
            operation_name="ListGlobalTables",
        )

    async def list_imports(self, input: ListImportsInput, plugins: list[Plugin] | None = None) -> ListImportsOutput:
        """<p>
                        Lists completed imports within the past 90 days.
                        </p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_imports,
            deserialize=_deserialize_list_imports,
            config=self._config,
            operation_name="ListImports",
        )

    async def list_tables(self, input: ListTablesInput, plugins: list[Plugin] | None = None) -> ListTablesOutput:
        """<p>Returns an array of table names associated with the current account and endpoint. The
                    output from <code>ListTables</code> is paginated, with each page returning a maximum of
                    100 table names.</p>

        :param input: <p>Represents the input of a <code>ListTables</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_tables,
            deserialize=_deserialize_list_tables,
            config=self._config,
            operation_name="ListTables",
        )

    async def list_tags_of_resource(self, input: ListTagsOfResourceInput, plugins: list[Plugin] | None = None) -> ListTagsOfResourceOutput:
        """<p>List all tags on an Amazon DynamoDB resource. You can call ListTagsOfResource up to 10
                    times per second, per account.</p>
                <p>For an overview on tagging DynamoDB resources, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB</a>
                    in the <i>Amazon DynamoDB Developer Guide</i>.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_list_tags_of_resource,
            deserialize=_deserialize_list_tags_of_resource,
            config=self._config,
            operation_name="ListTagsOfResource",
        )

    async def put_item(self, input: PutItemInput, plugins: list[Plugin] | None = None) -> PutItemOutput:
        """<p>Creates a new item, or replaces an old item with a new item. If an item that has the
                    same primary key as the new item already exists in the specified table, the new item
                    completely replaces the existing item. You can perform a conditional put operation (add
                    a new item if one with the specified primary key doesn't exist), or replace an existing
                    item if it has certain attribute values. You can return the item's attribute values in
                    the same operation, using the <code>ReturnValues</code> parameter.</p>

                <p>When you add an item, the primary key attributes are the only required attributes.
                    Attribute values cannot be null.</p>
                <p>Empty String and Binary attribute values are allowed. Attribute values of type String
                    and Binary must have a length greater than zero if the attribute is used as a key
                    attribute for a table or index. Set type attributes cannot be empty. </p>
                <p>Invalid Requests with empty values will be rejected with a
                        <code>ValidationException</code> exception.</p>
                <note>
                    <p>To prevent a new item from replacing an existing item, use a conditional
                        expression that contains the <code>attribute_not_exists</code> function with the
                        name of the attribute being used as the partition key for the table. Since every
                        record must contain that attribute, the <code>attribute_not_exists</code> function
                        will only succeed if no matching item exists.</p>
                </note>
                <p>For more information about <code>PutItem</code>, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/WorkingWithItems.html">Working with
                        Items</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>

        :param input: <p>Represents the input of a <code>PutItem</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_put_item,
            deserialize=_deserialize_put_item,
            config=self._config,
            operation_name="PutItem",
        )

    async def query(self, input: QueryInput, plugins: list[Plugin] | None = None) -> QueryOutput:
        """<p>You must provide the name of the partition key attribute and a single value for that
                    attribute. <code>Query</code> returns all items with that partition key value.
                    Optionally, you can provide a sort key attribute and use a comparison operator to refine
                    the search results.</p>

                <p>Use the <code>KeyConditionExpression</code> parameter to provide a specific value for
                    the partition key. The <code>Query</code> operation will return all of the items from
                    the table or index with that partition key value. You can optionally narrow the scope of
                    the <code>Query</code> operation by specifying a sort key value and a comparison
                    operator in <code>KeyConditionExpression</code>. To further refine the
                        <code>Query</code> results, you can optionally provide a
                        <code>FilterExpression</code>. A <code>FilterExpression</code> determines which
                    items within the results should be returned to you. All of the other results are
                    discarded. </p>
                <p> A <code>Query</code> operation always returns a result set. If no matching items are
                    found, the result set will be empty. Queries that do not return results consume the
                    minimum number of read capacity units for that type of read operation. </p>
                <note>
                    <p> DynamoDB calculates the number of read capacity units consumed based on item
                        size, not on the amount of data that is returned to an application. The number of
                        capacity units consumed will be the same whether you request all of the attributes
                        (the default behavior) or just some of them (using a projection expression). The
                        number will also be the same whether or not you use a <code>FilterExpression</code>.
                    </p>
                </note>
                <p>
                    <code>Query</code> results are always sorted by the sort key value. If the data type of
                    the sort key is Number, the results are returned in numeric order; otherwise, the
                    results are returned in order of UTF-8 bytes. By default, the sort order is ascending.
                    To reverse the order, set the <code>ScanIndexForward</code> parameter to false. </p>
                <p> A single <code>Query</code> operation will read up to the maximum number of items set
                    (if using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then apply
                    any filtering to the results using <code>FilterExpression</code>. If
                        <code>LastEvaluatedKey</code> is present in the response, you will need to paginate
                    the result set. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Query.html#Query.Pagination">Paginating
                        the Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
                <p>
                    <code>FilterExpression</code> is applied after a <code>Query</code> finishes, but before
                    the results are returned. A <code>FilterExpression</code> cannot contain partition key
                    or sort key attributes. You need to specify those attributes in the
                        <code>KeyConditionExpression</code>. </p>
                <note>
                    <p> A <code>Query</code> operation can return an empty result set and a
                            <code>LastEvaluatedKey</code> if all the items read for the page of results are
                        filtered out. </p>
                </note>
                <p>You can query a table, a local secondary index, or a global secondary index. For a
                    query on a table or on a local secondary index, you can set the
                        <code>ConsistentRead</code> parameter to <code>true</code> and obtain a strongly
                    consistent result. Global secondary indexes support eventually consistent reads only, so
                    do not specify <code>ConsistentRead</code> when querying a global secondary
                    index.</p>

        :param input: <p>Represents the input of a <code>Query</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_query,
            deserialize=_deserialize_query,
            config=self._config,
            operation_name="Query",
        )

    async def restore_table_from_backup(self, input: RestoreTableFromBackupInput, plugins: list[Plugin] | None = None) -> RestoreTableFromBackupOutput:
        """<p>Creates a new table from an existing backup. Any number of users can execute up to 4
                    concurrent restores (any type of restore) in a given account. </p>
                <p>You can call <code>RestoreTableFromBackup</code> at a maximum rate of 10 times per
                    second.</p>
                <p>You must manually set up the following on the restored table:</p>
                <ul>
                    <li>
                        <p>Auto scaling policies</p>
                    </li>
                    <li>
                        <p>IAM policies</p>
                    </li>
                    <li>
                        <p>Amazon CloudWatch metrics and alarms</p>
                    </li>
                    <li>
                        <p>Tags</p>
                    </li>
                    <li>
                        <p>Stream settings</p>
                    </li>
                    <li>
                        <p>Time to Live (TTL) settings</p>
                    </li>
                 </ul>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_restore_table_from_backup,
            deserialize=_deserialize_restore_table_from_backup,
            config=self._config,
            operation_name="RestoreTableFromBackup",
        )

    async def restore_table_to_point_in_time(self, input: RestoreTableToPointInTimeInput, plugins: list[Plugin] | None = None) -> RestoreTableToPointInTimeOutput:
        """<p>Restores the specified table to the specified point in time within
                        <code>EarliestRestorableDateTime</code> and <code>LatestRestorableDateTime</code>.
                    You can restore your table to any point in time during the last 35 days. Any number of
                    users can execute up to 4 concurrent restores (any type of restore) in a given account. </p>
                <p> When you restore using point in time recovery, DynamoDB restores your table data to
                    the state based on the selected date and time (day:hour:minute:second) to a new table. </p>
                <p> Along with data, the following are also included on the new restored table using
                    point in time recovery: </p>
                <ul>
                    <li>
                        <p>Global secondary indexes (GSIs)</p>
                    </li>
                    <li>
                        <p>Local secondary indexes (LSIs)</p>
                    </li>
                    <li>
                        <p>Provisioned read and write capacity</p>
                    </li>
                    <li>
                        <p>Encryption settings</p>
                        <important>
                            <p> All these settings come from the current settings of the source table at
                                the time of restore. </p>
                        </important>
                    </li>
                 </ul>

                <p>You must manually set up the following on the restored table:</p>
                <ul>
                    <li>
                        <p>Auto scaling policies</p>
                    </li>
                    <li>
                        <p>IAM policies</p>
                    </li>
                    <li>
                        <p>Amazon CloudWatch metrics and alarms</p>
                    </li>
                    <li>
                        <p>Tags</p>
                    </li>
                    <li>
                        <p>Stream settings</p>
                    </li>
                    <li>
                        <p>Time to Live (TTL) settings</p>
                    </li>
                    <li>
                        <p>Point in time recovery settings</p>
                    </li>
                 </ul>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_restore_table_to_point_in_time,
            deserialize=_deserialize_restore_table_to_point_in_time,
            config=self._config,
            operation_name="RestoreTableToPointInTime",
        )

    async def scan(self, input: ScanInput, plugins: list[Plugin] | None = None) -> ScanOutput:
        """<p>The <code>Scan</code> operation returns one or more items and item attributes by
                    accessing every item in a table or a secondary index. To have DynamoDB return fewer
                    items, you can provide a <code>FilterExpression</code> operation.</p>
                <p>If the total number of scanned items exceeds the maximum dataset size limit of 1 MB,
                    the scan stops and results are returned to the user as a <code>LastEvaluatedKey</code>
                    value to continue the scan in a subsequent operation. The results also include the
                    number of items exceeding the limit. A scan can result in no table data meeting the
                    filter criteria. </p>
                <p>A single <code>Scan</code> operation reads up to the maximum number of items set (if
                    using the <code>Limit</code> parameter) or a maximum of 1 MB of data and then apply any
                    filtering to the results using <code>FilterExpression</code>. If
                        <code>LastEvaluatedKey</code> is present in the response, you need to paginate the
                    result set. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.Pagination">Paginating the
                        Results</a> in the <i>Amazon DynamoDB Developer Guide</i>. </p>
                <p>
                    <code>Scan</code> operations proceed sequentially; however, for faster performance on
                    a large table or secondary index, applications can request a parallel <code>Scan</code>
                    operation by providing the <code>Segment</code> and <code>TotalSegments</code>
                    parameters. For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Scan.html#Scan.ParallelScan">Parallel
                        Scan</a> in the <i>Amazon DynamoDB Developer Guide</i>.</p>
                <p>
                    <code>Scan</code> uses eventually consistent reads when accessing the data in a table;
                    therefore, the result set might not include the changes to data in the table immediately
                    before the operation began. If you need a consistent copy of the data, as of the time
                    that the <code>Scan</code> begins, you can set the <code>ConsistentRead</code> parameter
                    to <code>true</code>.</p>

        :param input: <p>Represents the input of a <code>Scan</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_scan,
            deserialize=_deserialize_scan,
            config=self._config,
            operation_name="Scan",
        )

    async def tag_resource(self, input: TagResourceInput, plugins: list[Plugin] | None = None) -> Unit:
        """<p>Associate a set of tags with an Amazon DynamoDB resource. You can then activate these
                    user-defined tags so that they appear on the Billing and Cost Management console for
                    cost allocation tracking. You can call TagResource up to five times per second, per
                    account. </p>
                <p>For an overview on tagging DynamoDB resources, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB</a>
                    in the <i>Amazon DynamoDB Developer Guide</i>.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_tag_resource,
            deserialize=_deserialize_tag_resource,
            config=self._config,
            operation_name="TagResource",
        )

    async def transact_get_items(self, input: TransactGetItemsInput, plugins: list[Plugin] | None = None) -> TransactGetItemsOutput:
        """<p>
                    <code>TransactGetItems</code> is a synchronous operation that atomically retrieves
                    multiple items from one or more tables (but not from indexes) in a single account and
                    Region. A <code>TransactGetItems</code> call can contain up to 25
                        <code>TransactGetItem</code> objects, each of which contains a <code>Get</code>
                    structure that specifies an item to retrieve from a table in the account and Region. A
                    call to <code>TransactGetItems</code> cannot retrieve items from tables in more than one
                        Amazon Web Services account or Region. The aggregate size of the items in the
                    transaction cannot exceed 4 MB.</p>
                <p>DynamoDB rejects the entire <code>TransactGetItems</code> request if any of
                    the following is true:</p>
                <ul>
                    <li>
                        <p>A conflicting operation is in the process of updating an item to be
                            read.</p>
                    </li>
                    <li>
                        <p>There is insufficient provisioned capacity for the transaction to be
                            completed.</p>
                    </li>
                    <li>
                        <p>There is a user error, such as an invalid data format.</p>
                    </li>
                    <li>
                        <p>The aggregate size of the items in the transaction cannot exceed 4 MB.</p>
                    </li>
                 </ul>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_transact_get_items,
            deserialize=_deserialize_transact_get_items,
            config=self._config,
            operation_name="TransactGetItems",
        )

    async def transact_write_items(self, input: TransactWriteItemsInput, plugins: list[Plugin] | None = None) -> TransactWriteItemsOutput:
        """<p>
                    <code>TransactWriteItems</code> is a synchronous write operation that groups up to 25
                    action requests. These actions can target items in different tables, but not in
                    different Amazon Web Services accounts or Regions, and no two actions can target the same
                    item. For example, you cannot both <code>ConditionCheck</code> and <code>Update</code>
                    the same item. The aggregate size of the items in the transaction cannot exceed 4
                    MB.</p>

                <p>The actions are completed atomically so that either all of them succeed, or all of
                    them fail. They are defined by the following objects:</p>

                <ul>
                    <li>
                        <p>
                          <code>Put</code>  —   Initiates a <code>PutItem</code>
                            operation to write a new item. This structure specifies the primary key of the
                            item to be written, the name of the table to write it in, an optional condition
                            expression that must be satisfied for the write to succeed, a list of the item's
                            attributes, and a field indicating whether to retrieve the item's attributes if
                            the condition is not met.</p>
                    </li>
                    <li>
                        <p>
                          <code>Update</code>  —   Initiates an <code>UpdateItem</code>
                            operation to update an existing item. This structure specifies the primary key
                            of the item to be updated, the name of the table where it resides, an optional
                            condition expression that must be satisfied for the update to succeed, an
                            expression that defines one or more attributes to be updated, and a field
                            indicating whether to retrieve the item's attributes if the condition is not
                            met.</p>
                    </li>
                    <li>
                        <p>
                          <code>Delete</code>  —   Initiates a <code>DeleteItem</code>
                            operation to delete an existing item. This structure specifies the primary key
                            of the item to be deleted, the name of the table where it resides, an optional
                            condition expression that must be satisfied for the deletion to succeed, and a
                            field indicating whether to retrieve the item's attributes if the condition is
                            not met.</p>
                    </li>
                    <li>
                        <p>
                          <code>ConditionCheck</code>  —   Applies a condition to an item
                            that is not being modified by the transaction. This structure specifies the
                            primary key of the item to be checked, the name of the table where it resides, a
                            condition expression that must be satisfied for the transaction to succeed, and
                            a field indicating whether to retrieve the item's attributes if the condition is
                            not met.</p>
                    </li>
                 </ul>

                <p>DynamoDB rejects the entire <code>TransactWriteItems</code> request if any of the
                    following is true:</p>
                <ul>
                    <li>
                        <p>A condition in one of the condition expressions is not met.</p>
                    </li>
                    <li>
                        <p>An ongoing operation is in the process of updating the same item.</p>
                    </li>
                    <li>
                        <p>There is insufficient provisioned capacity for the transaction to be
                            completed.</p>
                    </li>
                    <li>
                        <p>An item size becomes too large (bigger than 400 KB), a local secondary index
                            (LSI) becomes too large, or a similar validation error occurs because of changes
                            made by the transaction.</p>
                    </li>
                    <li>
                        <p>The aggregate size of the items in the transaction exceeds 4 MB.</p>
                    </li>
                    <li>
                        <p>There is a user error, such as an invalid data format.</p>
                    </li>
                 </ul>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_transact_write_items,
            deserialize=_deserialize_transact_write_items,
            config=self._config,
            operation_name="TransactWriteItems",
        )

    async def untag_resource(self, input: UntagResourceInput, plugins: list[Plugin] | None = None) -> Unit:
        """<p>Removes the association of tags from an Amazon DynamoDB resource. You can call
                        <code>UntagResource</code> up to five times per second, per account. </p>
                <p>For an overview on tagging DynamoDB resources, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Tagging.html">Tagging for DynamoDB</a>
                    in the <i>Amazon DynamoDB Developer Guide</i>.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_untag_resource,
            deserialize=_deserialize_untag_resource,
            config=self._config,
            operation_name="UntagResource",
        )

    async def update_continuous_backups(self, input: UpdateContinuousBackupsInput, plugins: list[Plugin] | None = None) -> UpdateContinuousBackupsOutput:
        """<p>
                    <code>UpdateContinuousBackups</code> enables or disables point in time recovery for
                    the specified table. A successful <code>UpdateContinuousBackups</code> call returns the
                    current <code>ContinuousBackupsDescription</code>. Continuous backups are
                        <code>ENABLED</code> on all tables at table creation. If point in time recovery is
                    enabled, <code>PointInTimeRecoveryStatus</code> will be set to ENABLED.</p>
                <p> Once continuous backups and point in time recovery are enabled, you can restore to
                    any point in time within <code>EarliestRestorableDateTime</code> and
                        <code>LatestRestorableDateTime</code>. </p>
                <p>
                    <code>LatestRestorableDateTime</code> is typically 5 minutes before the current time.
                    You can restore your table to any point in time during the last 35 days. </p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_continuous_backups,
            deserialize=_deserialize_update_continuous_backups,
            config=self._config,
            operation_name="UpdateContinuousBackups",
        )

    async def update_contributor_insights(self, input: UpdateContributorInsightsInput, plugins: list[Plugin] | None = None) -> UpdateContributorInsightsOutput:
        """<p>Updates the status for contributor insights for a specific table or index. CloudWatch
                    Contributor Insights for DynamoDB graphs display the partition key and (if applicable)
                    sort key of frequently accessed items and frequently throttled items in plaintext. If
                    you require the use of Amazon Web Services Key Management Service (KMS) to encrypt this
                    table’s partition key and sort key data with an Amazon Web Services managed key or
                    customer managed key, you should not enable CloudWatch Contributor Insights for DynamoDB
                    for this table.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_contributor_insights,
            deserialize=_deserialize_update_contributor_insights,
            config=self._config,
            operation_name="UpdateContributorInsights",
        )

    async def update_global_table(self, input: UpdateGlobalTableInput, plugins: list[Plugin] | None = None) -> UpdateGlobalTableOutput:
        """<p>Adds or removes replicas in the specified global table. The global table must already
                    exist to be able to use this operation. Any replica to be added must be empty, have the
                    same name as the global table, have the same key schema, have DynamoDB Streams enabled,
                    and have the same provisioned and maximum write capacity units.</p>
                <note>
                    <p>Although you can use <code>UpdateGlobalTable</code> to add replicas and remove
                        replicas in a single request, for simplicity we recommend that you issue separate
                        requests for adding or removing replicas.</p>
                </note>
                <p> If global secondary indexes are specified, then the following conditions must also be
                    met: </p>
                <ul>
                    <li>
                        <p> The global secondary indexes must have the same name. </p>
                    </li>
                    <li>
                        <p> The global secondary indexes must have the same hash key and sort key (if
                            present). </p>
                    </li>
                    <li>
                        <p> The global secondary indexes must have the same provisioned and maximum write
                            capacity units. </p>
                    </li>
                 </ul>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_global_table,
            deserialize=_deserialize_update_global_table,
            config=self._config,
            operation_name="UpdateGlobalTable",
        )

    async def update_global_table_settings(self, input: UpdateGlobalTableSettingsInput, plugins: list[Plugin] | None = None) -> UpdateGlobalTableSettingsOutput:
        """<p>Updates settings for a global table.</p>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_global_table_settings,
            deserialize=_deserialize_update_global_table_settings,
            config=self._config,
            operation_name="UpdateGlobalTableSettings",
        )

    async def update_item(self, input: UpdateItemInput, plugins: list[Plugin] | None = None) -> UpdateItemOutput:
        """<p>Edits an existing item's attributes, or adds a new item to the table if it does not
                    already exist. You can put, delete, or add attribute values. You can also perform a
                    conditional update on an existing item (insert a new attribute name-value pair if it
                    doesn't exist, or replace an existing name-value pair if it has certain expected
                    attribute values).</p>
                <p>You can also return the item's attribute values in the same <code>UpdateItem</code>
                    operation using the <code>ReturnValues</code> parameter.</p>

        :param input: <p>Represents the input of an <code>UpdateItem</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_item,
            deserialize=_deserialize_update_item,
            config=self._config,
            operation_name="UpdateItem",
        )

    async def update_table(self, input: UpdateTableInput, plugins: list[Plugin] | None = None) -> UpdateTableOutput:
        """<p>Modifies the provisioned throughput settings, global secondary indexes, or DynamoDB
                    Streams settings for a given table.</p>
                <p>You can only perform one of the following operations at once:</p>
                <ul>
                    <li>
                        <p>Modify the provisioned throughput settings of the table.</p>
                    </li>
                    <li>
                        <p>Remove a global secondary index from the table.</p>
                    </li>
                    <li>
                        <p>Create a new global secondary index on the table. After the index begins
                            backfilling, you can use <code>UpdateTable</code> to perform other
                            operations.</p>
                    </li>
                 </ul>
                <p>
                    <code>UpdateTable</code> is an asynchronous operation; while it is executing, the table
                    status changes from <code>ACTIVE</code> to <code>UPDATING</code>. While it is
                        <code>UPDATING</code>, you cannot issue another <code>UpdateTable</code> request.
                    When the table returns to the <code>ACTIVE</code> state, the <code>UpdateTable</code>
                    operation is complete.</p>

        :param input: <p>Represents the input of an <code>UpdateTable</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_table,
            deserialize=_deserialize_update_table,
            config=self._config,
            operation_name="UpdateTable",
        )

    async def update_table_replica_auto_scaling(self, input: UpdateTableReplicaAutoScalingInput, plugins: list[Plugin] | None = None) -> UpdateTableReplicaAutoScalingOutput:
        """<p>Updates auto scaling settings on your global tables at once.</p>
                <note>
                    <p>This operation only applies to <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/globaltables.V2.html">Version
                            2019.11.21</a> of global tables.</p>
                </note>

        :param input: The operation's input.

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_table_replica_auto_scaling,
            deserialize=_deserialize_update_table_replica_auto_scaling,
            config=self._config,
            operation_name="UpdateTableReplicaAutoScaling",
        )

    async def update_time_to_live(self, input: UpdateTimeToLiveInput, plugins: list[Plugin] | None = None) -> UpdateTimeToLiveOutput:
        """<p>The <code>UpdateTimeToLive</code> method enables or disables Time to Live (TTL) for
                    the specified table. A successful <code>UpdateTimeToLive</code> call returns the current
                        <code>TimeToLiveSpecification</code>. It can take up to one hour for the change to
                    fully process. Any additional <code>UpdateTimeToLive</code> calls for the same table
                    during this one hour duration result in a <code>ValidationException</code>. </p>
                <p>TTL compares the current time in epoch time format to the time stored in the TTL
                    attribute of an item. If the epoch time value stored in the attribute is less than the
                    current time, the item is marked as expired and subsequently deleted.</p>
                <note>
                    <p> The epoch time format is the number of seconds elapsed since 12:00:00 AM January
                        1, 1970 UTC. </p>
                </note>
                <p>DynamoDB deletes expired items on a best-effort basis to ensure availability of
                    throughput for other data operations. </p>
                <important>
                    <p>DynamoDB typically deletes expired items within two days of expiration. The exact
                        duration within which an item gets deleted after expiration is specific to the
                        nature of the workload. Items that have expired and not been deleted will still show
                        up in reads, queries, and scans.</p>
                </important>
                <p>As items are deleted, they are removed from any local secondary index and global
                    secondary index immediately in the same eventually consistent way as a standard delete
                    operation.</p>
                <p>For more information, see <a href="https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html">Time To Live</a> in the
                    Amazon DynamoDB Developer Guide. </p>

        :param input: <p>Represents the input of an <code>UpdateTimeToLive</code> operation.</p>

        :param plugins: A list of callables that modify the configuration dynamically.
        Changes made by these plugins only apply for the duration of the operation
        execution and will not affect any other operation invocations.
        """
        operation_plugins = [

        ]
        if plugins:
            operation_plugins.extend(plugins)

        return await self._execute_operation(
            input=input,
            plugins=operation_plugins,
            serialize=_serialize_update_time_to_live,
            deserialize=_deserialize_update_time_to_live,
            config=self._config,
            operation_name="UpdateTimeToLive",
        )

    async def _execute_operation(
        self,
        input: Input,
        plugins: list[Plugin],
        serialize: Callable[[Input, Config], Awaitable[DafnyRequest]],
        deserialize: Callable[[DafnyResponse, Config], Awaitable[Output]],
        config: Config,
        operation_name: str,
    ) -> Output:
        try:
            return await self._handle_execution(
                input, plugins, serialize, deserialize, config, operation_name
            )
        except Exception as e:
            # Make sure every exception that we throw is an instance of ServiceError so
            # customers can reliably catch everything we throw.
            if not isinstance(e, ServiceError):
                raise ServiceError(e) from e
            raise e

    async def _handle_execution(
        self,
        input: Input,
        plugins: list[Plugin],
        serialize: Callable[[Input, Config], Awaitable[DafnyRequest]],
        deserialize: Callable[[DafnyResponse, Config], Awaitable[Output]],
        config: Config,
        operation_name: str,
    ) -> Output:
        context: InterceptorContext[Input, None, None, None] = InterceptorContext(
            request=input,
            response=None,
            transport_request=None,
            transport_response=None,
        )
        _client_interceptors = config.interceptors
        client_interceptors = cast(
            list[Interceptor[Input, Output, DafnyRequest, DafnyResponse]], _client_interceptors
        )
        interceptors = client_interceptors

        try:
            # Step 1a: Invoke read_before_execution on client-level interceptors
            for interceptor in client_interceptors:
                interceptor.read_before_execution(context)

            # Step 1b: Run operation-level plugins
            config = deepcopy(config)
            for plugin in plugins:
                plugin(config)

            _client_interceptors = config.interceptors
            interceptors = cast(
                list[Interceptor[Input, Output, DafnyRequest, DafnyResponse]],
                _client_interceptors,
            )

            # Step 1c: Invoke the read_before_execution hooks on newly added
            # interceptors.
            for interceptor in interceptors:
                if interceptor not in client_interceptors:
                    interceptor.read_before_execution(context)

            # Step 2: Invoke the modify_before_serialization hooks
            for interceptor in interceptors:
                context._request = interceptor.modify_before_serialization(context)

            # Step 3: Invoke the read_before_serialization hooks
            for interceptor in interceptors:
                interceptor.read_before_serialization(context)

            # Step 4: Serialize the request
            context_with_transport_request = cast(
                InterceptorContext[Input, None, DafnyRequest, None], context
            )
            context_with_transport_request._transport_request = await serialize(
                context_with_transport_request.request, config
            )

            # Step 5: Invoke read_after_serialization
            for interceptor in interceptors:
                interceptor.read_after_serialization(context_with_transport_request)

            # Step 6: Invoke modify_before_retry_loop
            for interceptor in interceptors:
                context_with_transport_request._transport_request = (
                    interceptor.modify_before_retry_loop(context_with_transport_request)
                )

            # Step 7: Acquire the retry token.
            retry_strategy = config.retry_strategy
            retry_token = retry_strategy.acquire_initial_retry_token()

            while True:
                # Make an attempt, creating a copy of the context so we don't pass
                # around old data.
                context_with_response = await self._handle_attempt(
                    deserialize,
                    interceptors,
                    context_with_transport_request.copy(),
                    config,
                    operation_name,
                )

                # We perform this type-ignored re-assignment because `context` needs
                # to point at the latest context so it can be generically handled
                # later on. This is only an issue here because we've created a copy,
                # so we're no longer simply pointing at the same object in memory
                # with different names and type hints. It is possible to address this
                # without having to fall back to the type ignore, but it would impose
                # unnecessary runtime costs.
                context = context_with_response  # type: ignore

                if isinstance(context_with_response.response, Exception):
                    # Step 7u: Reacquire retry token if the attempt failed
                    try:
                        retry_token = retry_strategy.refresh_retry_token_for_retry(
                            token_to_renew=retry_token,
                            error_info=RetryErrorInfo(
                                # TODO: Determine the error type.
                                error_type=RetryErrorType.CLIENT_ERROR,
                            )
                        )
                    except SmithyRetryException:
                        raise context_with_response.response
                    await sleep(retry_token.retry_delay)
                else:
                    # Step 8: Invoke record_success
                    retry_strategy.record_success(token=retry_token)
                    break
        except Exception as e:
            if context.response is not None:
                # config.logger.exception(f"Exception occurred while handling: {context.response}")
                pass
            context._response = e

        # At this point, the context's request will have been definitively set, and
        # The response will be set either with the modeled output or an exception. The
        # transport_request and transport_response may be set or None.
        execution_context = cast(
            InterceptorContext[Input, Output, DafnyRequest | None, DafnyResponse | None], context
        )
        return await self._finalize_execution(interceptors, execution_context)

    async def _handle_attempt(
        self,
        deserialize: Callable[[DafnyResponse, Config], Awaitable[Output]],
        interceptors: list[Interceptor[Input, Output, DafnyRequest, DafnyResponse]],
        context: InterceptorContext[Input, None, DafnyRequest, None],
        config: Config,
        operation_name: str,
    ) -> InterceptorContext[Input, Output, DafnyRequest, DafnyResponse | None]:
        try:
            # assert config.interceptors is not None
            # Step 7a: Invoke read_before_attempt
            for interceptor in interceptors:
                interceptor.read_before_attempt(context)

            # Step 7g: Invoke modify_before_signing
            for interceptor in interceptors:
                context._transport_request = interceptor.modify_before_signing(context)

            # Step 7h: Invoke read_before_signing
            for interceptor in interceptors:
                interceptor.read_before_signing(context)

            # Step 7j: Invoke read_after_signing
            for interceptor in interceptors:
                interceptor.read_after_signing(context)

            # Step 7k: Invoke modify_before_transmit
            for interceptor in interceptors:
                context._transport_request = interceptor.modify_before_transmit(context)

            # Step 7l: Invoke read_before_transmit
            for interceptor in interceptors:
                interceptor.read_before_transmit(context)

            # Step 7m: Invoke http_client.send
            if config.dafnyImplInterface.impl is None:
                raise Exception("No impl found on the operation config.")

            context_with_response = cast(
                InterceptorContext[Input, None, DafnyRequest, DafnyResponse], context
            )

            context_with_response._transport_response = config.dafnyImplInterface.handle_request(
                input=context_with_response.transport_request
            )

            # Step 7n: Invoke read_after_transmit
            for interceptor in interceptors:
                interceptor.read_after_transmit(context_with_response)

            # Step 7o: Invoke modify_before_deserialization
            for interceptor in interceptors:
                context_with_response._transport_response = (
                    interceptor.modify_before_deserialization(context_with_response)
                )

            # Step 7p: Invoke read_before_deserialization
            for interceptor in interceptors:
                interceptor.read_before_deserialization(context_with_response)

            # Step 7q: deserialize
            context_with_output = cast(
                InterceptorContext[Input, Output, DafnyRequest, DafnyResponse],
                context_with_response,
            )
            context_with_output._response = await deserialize(
                context_with_output._transport_response, config
            )

            # Step 7r: Invoke read_after_deserialization
            for interceptor in interceptors:
                interceptor.read_after_deserialization(context_with_output)
        except Exception as e:
            if context.response is not None:
                # config.logger.exception(f"Exception occurred while handling: {context.response}")
                pass
            context._response = e

        # At this point, the context's request and transport_request have definitively been set,
        # the response is either set or an exception, and the transport_resposne is either set or
        # None. This will also be true after _finalize_attempt because there is no opportunity
        # there to set the transport_response.
        attempt_context = cast(
            InterceptorContext[Input, Output, DafnyRequest, DafnyResponse | None], context
        )
        return await self._finalize_attempt(interceptors, attempt_context)

    async def _finalize_attempt(
        self,
        interceptors: list[Interceptor[Input, Output, DafnyRequest, DafnyResponse]],
        context: InterceptorContext[Input, Output, DafnyRequest, DafnyResponse | None],
    ) -> InterceptorContext[Input, Output, DafnyRequest, DafnyResponse | None]:
        # Step 7s: Invoke modify_before_attempt_completion
        try:
            for interceptor in interceptors:
                context._response = interceptor.modify_before_attempt_completion(
                    context
                )
        except Exception as e:
            if context.response is not None:
                # config.logger.exception(f"Exception occurred while handling: {context.response}")
                pass
            context._response = e

        # Step 7t: Invoke read_after_attempt
        for interceptor in interceptors:
            try:
                interceptor.read_after_attempt(context)
            except Exception as e:
                if context.response is not None:
                    # config.logger.exception(f"Exception occurred while handling: {context.response}")
                    pass
                context._response = e

        return context

    async def _finalize_execution(
        self,
        interceptors: list[Interceptor[Input, Output, DafnyRequest, DafnyResponse]],
        context: InterceptorContext[Input, Output, DafnyRequest | None, DafnyResponse | None],
    ) -> Output:
        try:
            # Step 9: Invoke modify_before_completion
            for interceptor in interceptors:
                context._response = interceptor.modify_before_completion(context)

            # Step 10: Invoke trace_probe.dispatch_events
            try:
                pass
            except Exception as e:
                # log and ignore exceptions
                # config.logger.exception(f"Exception occurred while dispatching trace events: {e}")
                pass
        except Exception as e:
            if context.response is not None:
                # config.logger.exception(f"Exception occurred while handling: {context.response}")
                pass
            context._response = e

        # Step 11: Invoke read_after_execution
        for interceptor in interceptors:
            try:
                interceptor.read_after_execution(context)
            except Exception as e:
                if context.response is not None:
                    # config.logger.exception(f"Exception occurred while handling: {context.response}")
                    pass
                context._response = e

        # Step 12: Return / throw
        if isinstance(context.response, Exception):
            raise context.response

        # We may want to add some aspects of this context to the output types so we can
        # return it to the end-users.
        return context.response
