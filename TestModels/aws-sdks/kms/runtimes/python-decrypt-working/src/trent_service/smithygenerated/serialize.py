# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from _dafny import Map, Seq
from software_amazon_cryptography_services_kms_internaldafny_types import (
    CancelKeyDeletionRequest_CancelKeyDeletionRequest as DafnyCancelKeyDeletionRequest,
    ConnectCustomKeyStoreRequest_ConnectCustomKeyStoreRequest as DafnyConnectCustomKeyStoreRequest,
    CreateAliasRequest_CreateAliasRequest as DafnyCreateAliasRequest,
    CreateCustomKeyStoreRequest_CreateCustomKeyStoreRequest as DafnyCreateCustomKeyStoreRequest,
    CreateGrantRequest_CreateGrantRequest as DafnyCreateGrantRequest,
    CreateKeyRequest_CreateKeyRequest as DafnyCreateKeyRequest,
    DecryptRequest_DecryptRequest as DafnyDecryptRequest,
    DeleteAliasRequest_DeleteAliasRequest as DafnyDeleteAliasRequest,
    DeleteCustomKeyStoreRequest_DeleteCustomKeyStoreRequest as DafnyDeleteCustomKeyStoreRequest,
    DeleteImportedKeyMaterialRequest_DeleteImportedKeyMaterialRequest as DafnyDeleteImportedKeyMaterialRequest,
    DescribeCustomKeyStoresRequest_DescribeCustomKeyStoresRequest as DafnyDescribeCustomKeyStoresRequest,
    DescribeKeyRequest_DescribeKeyRequest as DafnyDescribeKeyRequest,
    DisableKeyRequest_DisableKeyRequest as DafnyDisableKeyRequest,
    DisableKeyRotationRequest_DisableKeyRotationRequest as DafnyDisableKeyRotationRequest,
    DisconnectCustomKeyStoreRequest_DisconnectCustomKeyStoreRequest as DafnyDisconnectCustomKeyStoreRequest,
    EnableKeyRequest_EnableKeyRequest as DafnyEnableKeyRequest,
    EnableKeyRotationRequest_EnableKeyRotationRequest as DafnyEnableKeyRotationRequest,
    EncryptRequest_EncryptRequest as DafnyEncryptRequest,
    GenerateDataKeyPairRequest_GenerateDataKeyPairRequest as DafnyGenerateDataKeyPairRequest,
    GenerateDataKeyPairWithoutPlaintextRequest_GenerateDataKeyPairWithoutPlaintextRequest as DafnyGenerateDataKeyPairWithoutPlaintextRequest,
    GenerateDataKeyRequest_GenerateDataKeyRequest as DafnyGenerateDataKeyRequest,
    GenerateDataKeyWithoutPlaintextRequest_GenerateDataKeyWithoutPlaintextRequest as DafnyGenerateDataKeyWithoutPlaintextRequest,
    GenerateRandomRequest_GenerateRandomRequest as DafnyGenerateRandomRequest,
    GetKeyPolicyRequest_GetKeyPolicyRequest as DafnyGetKeyPolicyRequest,
    GetKeyRotationStatusRequest_GetKeyRotationStatusRequest as DafnyGetKeyRotationStatusRequest,
    GetParametersForImportRequest_GetParametersForImportRequest as DafnyGetParametersForImportRequest,
    GetPublicKeyRequest_GetPublicKeyRequest as DafnyGetPublicKeyRequest,
    GrantConstraints_GrantConstraints as DafnyGrantConstraints,
    ImportKeyMaterialRequest_ImportKeyMaterialRequest as DafnyImportKeyMaterialRequest,
    ListAliasesRequest_ListAliasesRequest as DafnyListAliasesRequest,
    ListGrantsRequest_ListGrantsRequest as DafnyListGrantsRequest,
    ListKeyPoliciesRequest_ListKeyPoliciesRequest as DafnyListKeyPoliciesRequest,
    ListResourceTagsRequest_ListResourceTagsRequest as DafnyListResourceTagsRequest,
    PutKeyPolicyRequest_PutKeyPolicyRequest as DafnyPutKeyPolicyRequest,
    ReEncryptRequest_ReEncryptRequest as DafnyReEncryptRequest,
    ReplicateKeyRequest_ReplicateKeyRequest as DafnyReplicateKeyRequest,
    RetireGrantRequest_RetireGrantRequest as DafnyRetireGrantRequest,
    RevokeGrantRequest_RevokeGrantRequest as DafnyRevokeGrantRequest,
    ScheduleKeyDeletionRequest_ScheduleKeyDeletionRequest as DafnyScheduleKeyDeletionRequest,
    SignRequest_SignRequest as DafnySignRequest,
    TagResourceRequest_TagResourceRequest as DafnyTagResourceRequest,
    Tag_Tag as DafnyTag,
    UntagResourceRequest_UntagResourceRequest as DafnyUntagResourceRequest,
    UpdateAliasRequest_UpdateAliasRequest as DafnyUpdateAliasRequest,
    UpdateCustomKeyStoreRequest_UpdateCustomKeyStoreRequest as DafnyUpdateCustomKeyStoreRequest,
    UpdateKeyDescriptionRequest_UpdateKeyDescriptionRequest as DafnyUpdateKeyDescriptionRequest,
    UpdatePrimaryRegionRequest_UpdatePrimaryRegionRequest as DafnyUpdatePrimaryRegionRequest,
    VerifyRequest_VerifyRequest as DafnyVerifyRequest,
)
import module_

from .dafny_protocol import DafnyRequest
from .models import (
    CancelKeyDeletionRequest,
    ConnectCustomKeyStoreRequest,
    CreateAliasRequest,
    CreateCustomKeyStoreRequest,
    CreateGrantRequest,
    CreateKeyRequest,
    DecryptRequest,
    DeleteAliasRequest,
    DeleteCustomKeyStoreRequest,
    DeleteImportedKeyMaterialRequest,
    DescribeCustomKeyStoresRequest,
    DescribeKeyRequest,
    DisableKeyRequest,
    DisableKeyRotationRequest,
    DisconnectCustomKeyStoreRequest,
    EnableKeyRequest,
    EnableKeyRotationRequest,
    EncryptRequest,
    GenerateDataKeyPairRequest,
    GenerateDataKeyPairWithoutPlaintextRequest,
    GenerateDataKeyRequest,
    GenerateDataKeyWithoutPlaintextRequest,
    GenerateRandomRequest,
    GetKeyPolicyRequest,
    GetKeyRotationStatusRequest,
    GetParametersForImportRequest,
    GetPublicKeyRequest,
    ImportKeyMaterialRequest,
    ListAliasesRequest,
    ListGrantsRequest,
    ListKeyPoliciesRequest,
    ListResourceTagsRequest,
    PutKeyPolicyRequest,
    ReEncryptRequest,
    ReplicateKeyRequest,
    RetireGrantRequest,
    RevokeGrantRequest,
    ScheduleKeyDeletionRequest,
    SignRequest,
    TagResourceRequest,
    UntagResourceRequest,
    UpdateAliasRequest,
    UpdateCustomKeyStoreRequest,
    UpdateKeyDescriptionRequest,
    UpdatePrimaryRegionRequest,
    VerifyRequest,
)

from .config import Config


async def _serialize_describe_custom_key_stores(input: DescribeCustomKeyStoresRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="DescribeCustomKeyStores", dafny_operation_input=DafnyDescribeCustomKeyStoresRequest(CustomKeyStoreId=((Option_Some(input.custom_key_store_id)) if (input.custom_key_store_id is not None) else (Option_None())),
    CustomKeyStoreName=((Option_Some(input.custom_key_store_name)) if (input.custom_key_store_name is not None) else (Option_None())),
    Limit=((Option_Some(input.limit)) if (input.limit is not None) else (Option_None())),
    Marker=((Option_Some(input.marker)) if (input.marker is not None) else (Option_None())),
    ))

async def _serialize_get_public_key(input: GetPublicKeyRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GetPublicKey", dafny_operation_input=DafnyGetPublicKeyRequest(KeyId=input.key_id,
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    ))

async def _serialize_update_key_description(input: UpdateKeyDescriptionRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UpdateKeyDescription", dafny_operation_input=DafnyUpdateKeyDescriptionRequest(KeyId=input.key_id,
    Description=input.description,
    ))

async def _serialize_generate_data_key(input: GenerateDataKeyRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GenerateDataKey", dafny_operation_input=DafnyGenerateDataKeyRequest(KeyId=input.key_id,
    EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
    NumberOfBytes=((Option_Some(input.number_of_bytes)) if (input.number_of_bytes is not None) else (Option_None())),
    KeySpec=((Option_Some(input.key_spec)) if (input.key_spec is not None) else (Option_None())),
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    ))

async def _serialize_generate_random(input: GenerateRandomRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GenerateRandom", dafny_operation_input=DafnyGenerateRandomRequest(NumberOfBytes=((Option_Some(input.number_of_bytes)) if (input.number_of_bytes is not None) else (Option_None())),
    CustomKeyStoreId=((Option_Some(input.custom_key_store_id)) if (input.custom_key_store_id is not None) else (Option_None())),
    ))

async def _serialize_disconnect_custom_key_store(input: DisconnectCustomKeyStoreRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="DisconnectCustomKeyStore", dafny_operation_input=DafnyDisconnectCustomKeyStoreRequest(CustomKeyStoreId=input.custom_key_store_id,
    ))

async def _serialize_replicate_key(input: ReplicateKeyRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="ReplicateKey", dafny_operation_input=DafnyReplicateKeyRequest(KeyId=input.key_id,
    ReplicaRegion=input.replica_region,
    Policy=((Option_Some(input.policy)) if (input.policy is not None) else (Option_None())),
    BypassPolicyLockoutSafetyCheck=((Option_Some(input.bypass_policy_lockout_safety_check)) if (input.bypass_policy_lockout_safety_check is not None) else (Option_None())),
    Description=((Option_Some(input.description)) if (input.description is not None) else (Option_None())),
    Tags=((Option_Some(Seq([DafnyTag(TagKey=list_element.tag_key,
    TagValue=list_element.tag_value,
    ) for list_element in input.tags]))) if (input.tags is not None) else (Option_None())),
    ))

async def _serialize_generate_data_key_pair(input: GenerateDataKeyPairRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GenerateDataKeyPair", dafny_operation_input=DafnyGenerateDataKeyPairRequest(EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
    KeyId=input.key_id,
    KeyPairSpec=input.key_pair_spec,
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    ))

async def _serialize_enable_key(input: EnableKeyRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="EnableKey", dafny_operation_input=DafnyEnableKeyRequest(KeyId=input.key_id,
    ))

async def _serialize_describe_key(input: DescribeKeyRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="DescribeKey", dafny_operation_input=DafnyDescribeKeyRequest(KeyId=input.key_id,
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    ))

async def _serialize_put_key_policy(input: PutKeyPolicyRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="PutKeyPolicy", dafny_operation_input=DafnyPutKeyPolicyRequest(KeyId=input.key_id,
    PolicyName=input.policy_name,
    Policy=input.policy,
    BypassPolicyLockoutSafetyCheck=((Option_Some(input.bypass_policy_lockout_safety_check)) if (input.bypass_policy_lockout_safety_check is not None) else (Option_None())),
    ))

async def _serialize_list_grants(input: ListGrantsRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="ListGrants", dafny_operation_input=DafnyListGrantsRequest(Limit=((Option_Some(input.limit)) if (input.limit is not None) else (Option_None())),
    Marker=((Option_Some(input.marker)) if (input.marker is not None) else (Option_None())),
    KeyId=input.key_id,
    GrantId=((Option_Some(input.grant_id)) if (input.grant_id is not None) else (Option_None())),
    GranteePrincipal=((Option_Some(input.grantee_principal)) if (input.grantee_principal is not None) else (Option_None())),
    ))

async def _serialize_list_key_policies(input: ListKeyPoliciesRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="ListKeyPolicies", dafny_operation_input=DafnyListKeyPoliciesRequest(KeyId=input.key_id,
    Limit=((Option_Some(input.limit)) if (input.limit is not None) else (Option_None())),
    Marker=((Option_Some(input.marker)) if (input.marker is not None) else (Option_None())),
    ))

async def _serialize_create_grant(input: CreateGrantRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="CreateGrant", dafny_operation_input=DafnyCreateGrantRequest(KeyId=input.key_id,
    GranteePrincipal=input.grantee_principal,
    RetiringPrincipal=((Option_Some(input.retiring_principal)) if (input.retiring_principal is not None) else (Option_None())),
    Operations=Seq([list_element for list_element in input.operations]),
    Constraints=((Option_Some(DafnyGrantConstraints(EncryptionContextSubset=((Option_Some(Map({key: value for (key, value) in input.constraints.encryption_context_subset.items() }))) if (input.constraints.encryption_context_subset is not None) else (Option_None())),
    EncryptionContextEquals=((Option_Some(Map({key: value for (key, value) in input.constraints.encryption_context_equals.items() }))) if (input.constraints.encryption_context_equals is not None) else (Option_None())),
    ))) if (input.constraints is not None) else (Option_None())),
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    Name=((Option_Some(input.name)) if (input.name is not None) else (Option_None())),
    ))

async def _serialize_get_key_rotation_status(input: GetKeyRotationStatusRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GetKeyRotationStatus", dafny_operation_input=DafnyGetKeyRotationStatusRequest(KeyId=input.key_id,
    ))

async def _serialize_update_alias(input: UpdateAliasRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UpdateAlias", dafny_operation_input=DafnyUpdateAliasRequest(AliasName=input.alias_name,
    TargetKeyId=input.target_key_id,
    ))

async def _serialize_generate_data_key_without_plaintext(input: GenerateDataKeyWithoutPlaintextRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GenerateDataKeyWithoutPlaintext", dafny_operation_input=DafnyGenerateDataKeyWithoutPlaintextRequest(KeyId=input.key_id,
    EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
    KeySpec=((Option_Some(input.key_spec)) if (input.key_spec is not None) else (Option_None())),
    NumberOfBytes=((Option_Some(input.number_of_bytes)) if (input.number_of_bytes is not None) else (Option_None())),
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    ))

async def _serialize_revoke_grant(input: RevokeGrantRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="RevokeGrant", dafny_operation_input=DafnyRevokeGrantRequest(KeyId=input.key_id,
    GrantId=input.grant_id,
    ))

async def _serialize_get_parameters_for_import(input: GetParametersForImportRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GetParametersForImport", dafny_operation_input=DafnyGetParametersForImportRequest(KeyId=input.key_id,
    WrappingAlgorithm=input.wrapping_algorithm,
    WrappingKeySpec=input.wrapping_key_spec,
    ))

async def _serialize_create_key(input: CreateKeyRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="CreateKey", dafny_operation_input=DafnyCreateKeyRequest(Policy=((Option_Some(input.policy)) if (input.policy is not None) else (Option_None())),
    Description=((Option_Some(input.description)) if (input.description is not None) else (Option_None())),
    KeyUsage=((Option_Some(input.key_usage)) if (input.key_usage is not None) else (Option_None())),
    CustomerMasterKeySpec=((Option_Some(input.customer_master_key_spec)) if (input.customer_master_key_spec is not None) else (Option_None())),
    KeySpec=((Option_Some(input.key_spec)) if (input.key_spec is not None) else (Option_None())),
    Origin=((Option_Some(input.origin)) if (input.origin is not None) else (Option_None())),
    CustomKeyStoreId=((Option_Some(input.custom_key_store_id)) if (input.custom_key_store_id is not None) else (Option_None())),
    BypassPolicyLockoutSafetyCheck=((Option_Some(input.bypass_policy_lockout_safety_check)) if (input.bypass_policy_lockout_safety_check is not None) else (Option_None())),
    Tags=((Option_Some(Seq([DafnyTag(TagKey=list_element.tag_key,
    TagValue=list_element.tag_value,
    ) for list_element in input.tags]))) if (input.tags is not None) else (Option_None())),
    MultiRegion=((Option_Some(input.multi_region)) if (input.multi_region is not None) else (Option_None())),
    ))

async def _serialize_tag_resource(input: TagResourceRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="TagResource", dafny_operation_input=DafnyTagResourceRequest(KeyId=input.key_id,
    Tags=Seq([DafnyTag(TagKey=list_element.tag_key,
    TagValue=list_element.tag_value,
    ) for list_element in input.tags]),
    ))

async def _serialize_retire_grant(input: RetireGrantRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="RetireGrant", dafny_operation_input=DafnyRetireGrantRequest(GrantToken=((Option_Some(input.grant_token)) if (input.grant_token is not None) else (Option_None())),
    KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
    GrantId=((Option_Some(input.grant_id)) if (input.grant_id is not None) else (Option_None())),
    ))

async def _serialize_create_alias(input: CreateAliasRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="CreateAlias", dafny_operation_input=DafnyCreateAliasRequest(AliasName=input.alias_name,
    TargetKeyId=input.target_key_id,
    ))

async def _serialize_disable_key(input: DisableKeyRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="DisableKey", dafny_operation_input=DafnyDisableKeyRequest(KeyId=input.key_id,
    ))

async def _serialize_list_aliases(input: ListAliasesRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="ListAliases", dafny_operation_input=DafnyListAliasesRequest(KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
    Limit=((Option_Some(input.limit)) if (input.limit is not None) else (Option_None())),
    Marker=((Option_Some(input.marker)) if (input.marker is not None) else (Option_None())),
    ))

async def _serialize_enable_key_rotation(input: EnableKeyRotationRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="EnableKeyRotation", dafny_operation_input=DafnyEnableKeyRotationRequest(KeyId=input.key_id,
    ))

async def _serialize_cancel_key_deletion(input: CancelKeyDeletionRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="CancelKeyDeletion", dafny_operation_input=DafnyCancelKeyDeletionRequest(KeyId=input.key_id,
    ))

async def _serialize_delete_alias(input: DeleteAliasRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="DeleteAlias", dafny_operation_input=DafnyDeleteAliasRequest(AliasName=input.alias_name,
    ))

async def _serialize_update_custom_key_store(input: UpdateCustomKeyStoreRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UpdateCustomKeyStore", dafny_operation_input=DafnyUpdateCustomKeyStoreRequest(CustomKeyStoreId=input.custom_key_store_id,
    NewCustomKeyStoreName=((Option_Some(input.new_custom_key_store_name)) if (input.new_custom_key_store_name is not None) else (Option_None())),
    KeyStorePassword=((Option_Some(input.key_store_password)) if (input.key_store_password is not None) else (Option_None())),
    CloudHsmClusterId=((Option_Some(input.cloud_hsm_cluster_id)) if (input.cloud_hsm_cluster_id is not None) else (Option_None())),
    ))

async def _serialize_create_custom_key_store(input: CreateCustomKeyStoreRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="CreateCustomKeyStore", dafny_operation_input=DafnyCreateCustomKeyStoreRequest(CustomKeyStoreName=input.custom_key_store_name,
    CloudHsmClusterId=input.cloud_hsm_cluster_id,
    TrustAnchorCertificate=input.trust_anchor_certificate,
    KeyStorePassword=input.key_store_password,
    ))

async def _serialize_re_encrypt(input: ReEncryptRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="ReEncrypt", dafny_operation_input=DafnyReEncryptRequest(CiphertextBlob=input.ciphertext_blob,
    SourceEncryptionContext=((Option_Some(Map({key: value for (key, value) in input.source_encryption_context.items() }))) if (input.source_encryption_context is not None) else (Option_None())),
    SourceKeyId=((Option_Some(input.source_key_id)) if (input.source_key_id is not None) else (Option_None())),
    DestinationKeyId=input.destination_key_id,
    DestinationEncryptionContext=((Option_Some(Map({key: value for (key, value) in input.destination_encryption_context.items() }))) if (input.destination_encryption_context is not None) else (Option_None())),
    SourceEncryptionAlgorithm=((Option_Some(input.source_encryption_algorithm)) if (input.source_encryption_algorithm is not None) else (Option_None())),
    DestinationEncryptionAlgorithm=((Option_Some(input.destination_encryption_algorithm)) if (input.destination_encryption_algorithm is not None) else (Option_None())),
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    ))

async def _serialize_list_resource_tags(input: ListResourceTagsRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="ListResourceTags", dafny_operation_input=DafnyListResourceTagsRequest(KeyId=input.key_id,
    Limit=((Option_Some(input.limit)) if (input.limit is not None) else (Option_None())),
    Marker=((Option_Some(input.marker)) if (input.marker is not None) else (Option_None())),
    ))

async def _serialize_update_primary_region(input: UpdatePrimaryRegionRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UpdatePrimaryRegion", dafny_operation_input=DafnyUpdatePrimaryRegionRequest(KeyId=input.key_id,
    PrimaryRegion=input.primary_region,
    ))

async def _serialize_get_key_policy(input: GetKeyPolicyRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GetKeyPolicy", dafny_operation_input=DafnyGetKeyPolicyRequest(KeyId=input.key_id,
    PolicyName=input.policy_name,
    ))

async def _serialize_untag_resource(input: UntagResourceRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UntagResource", dafny_operation_input=DafnyUntagResourceRequest(KeyId=input.key_id,
    TagKeys=Seq([list_element for list_element in input.tag_keys]),
    ))

async def _serialize_delete_custom_key_store(input: DeleteCustomKeyStoreRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="DeleteCustomKeyStore", dafny_operation_input=DafnyDeleteCustomKeyStoreRequest(CustomKeyStoreId=input.custom_key_store_id,
    ))

async def _serialize_schedule_key_deletion(input: ScheduleKeyDeletionRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="ScheduleKeyDeletion", dafny_operation_input=DafnyScheduleKeyDeletionRequest(KeyId=input.key_id,
    PendingWindowInDays=((Option_Some(input.pending_window_in_days)) if (input.pending_window_in_days is not None) else (Option_None())),
    ))

async def _serialize_encrypt(input: EncryptRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="Encrypt", dafny_operation_input=DafnyEncryptRequest(KeyId=input.key_id,
    Plaintext=input.plaintext,
    EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    EncryptionAlgorithm=((Option_Some(input.encryption_algorithm)) if (input.encryption_algorithm is not None) else (Option_None())),
    ))

async def _serialize_verify(input: VerifyRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="Verify", dafny_operation_input=DafnyVerifyRequest(KeyId=input.key_id,
    Message=input.message,
    MessageType=((Option_Some(input.message_type)) if (input.message_type is not None) else (Option_None())),
    Signature=input.signature,
    SigningAlgorithm=input.signing_algorithm,
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    ))

async def _serialize_delete_imported_key_material(input: DeleteImportedKeyMaterialRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="DeleteImportedKeyMaterial", dafny_operation_input=DafnyDeleteImportedKeyMaterialRequest(KeyId=input.key_id,
    ))

async def _serialize_decrypt(input: DecryptRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="Decrypt", dafny_operation_input=DafnyDecryptRequest(CiphertextBlob=input.ciphertext_blob,
    EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
    EncryptionAlgorithm=((Option_Some(input.encryption_algorithm)) if (input.encryption_algorithm is not None) else (Option_None())),
    ))

async def _serialize_generate_data_key_pair_without_plaintext(input: GenerateDataKeyPairWithoutPlaintextRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GenerateDataKeyPairWithoutPlaintext", dafny_operation_input=DafnyGenerateDataKeyPairWithoutPlaintextRequest(EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
    KeyId=input.key_id,
    KeyPairSpec=input.key_pair_spec,
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    ))

async def _serialize_disable_key_rotation(input: DisableKeyRotationRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="DisableKeyRotation", dafny_operation_input=DafnyDisableKeyRotationRequest(KeyId=input.key_id,
    ))

async def _serialize_import_key_material(input: ImportKeyMaterialRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="ImportKeyMaterial", dafny_operation_input=DafnyImportKeyMaterialRequest(KeyId=input.key_id,
    ImportToken=input.import_token,
    EncryptedKeyMaterial=input.encrypted_key_material,
    ValidTo=((Option_Some(input.valid_to)) if (input.valid_to is not None) else (Option_None())),
    ExpirationModel=((Option_Some(input.expiration_model)) if (input.expiration_model is not None) else (Option_None())),
    ))

async def _serialize_connect_custom_key_store(input: ConnectCustomKeyStoreRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="ConnectCustomKeyStore", dafny_operation_input=DafnyConnectCustomKeyStoreRequest(CustomKeyStoreId=input.custom_key_store_id,
    ))

async def _serialize_sign(input: SignRequest, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="Sign", dafny_operation_input=DafnySignRequest(KeyId=input.key_id,
    Message=input.message,
    MessageType=((Option_Some(input.message_type)) if (input.message_type is not None) else (Option_None())),
    GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
    SigningAlgorithm=input.signing_algorithm,
    ))
