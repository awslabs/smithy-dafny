# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from _dafny import Map, Seq
from com_amazonaws_kms_internaldafny_types import (
    AliasListEntry_AliasListEntry as DafnyAliasListEntry,
    CancelKeyDeletionRequest_CancelKeyDeletionRequest as DafnyCancelKeyDeletionRequest,
    CancelKeyDeletionResponse_CancelKeyDeletionResponse as DafnyCancelKeyDeletionResponse,
    ConnectCustomKeyStoreRequest_ConnectCustomKeyStoreRequest as DafnyConnectCustomKeyStoreRequest,
    ConnectCustomKeyStoreResponse_ConnectCustomKeyStoreResponse as DafnyConnectCustomKeyStoreResponse,
    CreateAliasRequest_CreateAliasRequest as DafnyCreateAliasRequest,
    CreateCustomKeyStoreRequest_CreateCustomKeyStoreRequest as DafnyCreateCustomKeyStoreRequest,
    CreateCustomKeyStoreResponse_CreateCustomKeyStoreResponse as DafnyCreateCustomKeyStoreResponse,
    CreateGrantRequest_CreateGrantRequest as DafnyCreateGrantRequest,
    CreateGrantResponse_CreateGrantResponse as DafnyCreateGrantResponse,
    CreateKeyRequest_CreateKeyRequest as DafnyCreateKeyRequest,
    CreateKeyResponse_CreateKeyResponse as DafnyCreateKeyResponse,
    CustomKeyStoresListEntry_CustomKeyStoresListEntry as DafnyCustomKeyStoresListEntry,
    DecryptRequest_DecryptRequest as DafnyDecryptRequest,
    DecryptResponse_DecryptResponse as DafnyDecryptResponse,
    DeleteAliasRequest_DeleteAliasRequest as DafnyDeleteAliasRequest,
    DeleteCustomKeyStoreRequest_DeleteCustomKeyStoreRequest as DafnyDeleteCustomKeyStoreRequest,
    DeleteCustomKeyStoreResponse_DeleteCustomKeyStoreResponse as DafnyDeleteCustomKeyStoreResponse,
    DeleteImportedKeyMaterialRequest_DeleteImportedKeyMaterialRequest as DafnyDeleteImportedKeyMaterialRequest,
    DescribeCustomKeyStoresRequest_DescribeCustomKeyStoresRequest as DafnyDescribeCustomKeyStoresRequest,
    DescribeCustomKeyStoresResponse_DescribeCustomKeyStoresResponse as DafnyDescribeCustomKeyStoresResponse,
    DescribeKeyRequest_DescribeKeyRequest as DafnyDescribeKeyRequest,
    DescribeKeyResponse_DescribeKeyResponse as DafnyDescribeKeyResponse,
    DisableKeyRequest_DisableKeyRequest as DafnyDisableKeyRequest,
    DisableKeyRotationRequest_DisableKeyRotationRequest as DafnyDisableKeyRotationRequest,
    DisconnectCustomKeyStoreRequest_DisconnectCustomKeyStoreRequest as DafnyDisconnectCustomKeyStoreRequest,
    DisconnectCustomKeyStoreResponse_DisconnectCustomKeyStoreResponse as DafnyDisconnectCustomKeyStoreResponse,
    EnableKeyRequest_EnableKeyRequest as DafnyEnableKeyRequest,
    EnableKeyRotationRequest_EnableKeyRotationRequest as DafnyEnableKeyRotationRequest,
    EncryptRequest_EncryptRequest as DafnyEncryptRequest,
    EncryptResponse_EncryptResponse as DafnyEncryptResponse,
    GenerateDataKeyPairRequest_GenerateDataKeyPairRequest as DafnyGenerateDataKeyPairRequest,
    GenerateDataKeyPairResponse_GenerateDataKeyPairResponse as DafnyGenerateDataKeyPairResponse,
    GenerateDataKeyPairWithoutPlaintextRequest_GenerateDataKeyPairWithoutPlaintextRequest as DafnyGenerateDataKeyPairWithoutPlaintextRequest,
    GenerateDataKeyPairWithoutPlaintextResponse_GenerateDataKeyPairWithoutPlaintextResponse as DafnyGenerateDataKeyPairWithoutPlaintextResponse,
    GenerateDataKeyRequest_GenerateDataKeyRequest as DafnyGenerateDataKeyRequest,
    GenerateDataKeyResponse_GenerateDataKeyResponse as DafnyGenerateDataKeyResponse,
    GenerateDataKeyWithoutPlaintextRequest_GenerateDataKeyWithoutPlaintextRequest as DafnyGenerateDataKeyWithoutPlaintextRequest,
    GenerateDataKeyWithoutPlaintextResponse_GenerateDataKeyWithoutPlaintextResponse as DafnyGenerateDataKeyWithoutPlaintextResponse,
    GenerateRandomRequest_GenerateRandomRequest as DafnyGenerateRandomRequest,
    GenerateRandomResponse_GenerateRandomResponse as DafnyGenerateRandomResponse,
    GetKeyPolicyRequest_GetKeyPolicyRequest as DafnyGetKeyPolicyRequest,
    GetKeyPolicyResponse_GetKeyPolicyResponse as DafnyGetKeyPolicyResponse,
    GetKeyRotationStatusRequest_GetKeyRotationStatusRequest as DafnyGetKeyRotationStatusRequest,
    GetKeyRotationStatusResponse_GetKeyRotationStatusResponse as DafnyGetKeyRotationStatusResponse,
    GetParametersForImportRequest_GetParametersForImportRequest as DafnyGetParametersForImportRequest,
    GetParametersForImportResponse_GetParametersForImportResponse as DafnyGetParametersForImportResponse,
    GetPublicKeyRequest_GetPublicKeyRequest as DafnyGetPublicKeyRequest,
    GetPublicKeyResponse_GetPublicKeyResponse as DafnyGetPublicKeyResponse,
    GrantConstraints_GrantConstraints as DafnyGrantConstraints,
    GrantListEntry_GrantListEntry as DafnyGrantListEntry,
    ImportKeyMaterialRequest_ImportKeyMaterialRequest as DafnyImportKeyMaterialRequest,
    ImportKeyMaterialResponse_ImportKeyMaterialResponse as DafnyImportKeyMaterialResponse,
    KeyMetadata_KeyMetadata as DafnyKeyMetadata,
    ListAliasesRequest_ListAliasesRequest as DafnyListAliasesRequest,
    ListAliasesResponse_ListAliasesResponse as DafnyListAliasesResponse,
    ListGrantsRequest_ListGrantsRequest as DafnyListGrantsRequest,
    ListGrantsResponse_ListGrantsResponse as DafnyListGrantsResponse,
    ListKeyPoliciesRequest_ListKeyPoliciesRequest as DafnyListKeyPoliciesRequest,
    ListKeyPoliciesResponse_ListKeyPoliciesResponse as DafnyListKeyPoliciesResponse,
    ListResourceTagsRequest_ListResourceTagsRequest as DafnyListResourceTagsRequest,
    ListResourceTagsResponse_ListResourceTagsResponse as DafnyListResourceTagsResponse,
    MultiRegionConfiguration_MultiRegionConfiguration as DafnyMultiRegionConfiguration,
    MultiRegionKey_MultiRegionKey as DafnyMultiRegionKey,
    PutKeyPolicyRequest_PutKeyPolicyRequest as DafnyPutKeyPolicyRequest,
    ReEncryptRequest_ReEncryptRequest as DafnyReEncryptRequest,
    ReEncryptResponse_ReEncryptResponse as DafnyReEncryptResponse,
    ReplicateKeyRequest_ReplicateKeyRequest as DafnyReplicateKeyRequest,
    ReplicateKeyResponse_ReplicateKeyResponse as DafnyReplicateKeyResponse,
    RetireGrantRequest_RetireGrantRequest as DafnyRetireGrantRequest,
    RevokeGrantRequest_RevokeGrantRequest as DafnyRevokeGrantRequest,
    ScheduleKeyDeletionRequest_ScheduleKeyDeletionRequest as DafnyScheduleKeyDeletionRequest,
    ScheduleKeyDeletionResponse_ScheduleKeyDeletionResponse as DafnyScheduleKeyDeletionResponse,
    SignRequest_SignRequest as DafnySignRequest,
    SignResponse_SignResponse as DafnySignResponse,
    TagResourceRequest_TagResourceRequest as DafnyTagResourceRequest,
    Tag_Tag as DafnyTag,
    UntagResourceRequest_UntagResourceRequest as DafnyUntagResourceRequest,
    UpdateAliasRequest_UpdateAliasRequest as DafnyUpdateAliasRequest,
    UpdateCustomKeyStoreRequest_UpdateCustomKeyStoreRequest as DafnyUpdateCustomKeyStoreRequest,
    UpdateCustomKeyStoreResponse_UpdateCustomKeyStoreResponse as DafnyUpdateCustomKeyStoreResponse,
    UpdateKeyDescriptionRequest_UpdateKeyDescriptionRequest as DafnyUpdateKeyDescriptionRequest,
    UpdatePrimaryRegionRequest_UpdatePrimaryRegionRequest as DafnyUpdatePrimaryRegionRequest,
    VerifyRequest_VerifyRequest as DafnyVerifyRequest,
    VerifyResponse_VerifyResponse as DafnyVerifyResponse,
)
import module_


def SmithyToDafny_com_amazonaws_kms_EnableKeyRotationRequest(input):

  return DafnyEnableKeyRotationRequest(KeyId=input.key_id,
)

def SmithyToDafny_com_amazonaws_kms_CancelKeyDeletionRequest(input):

  return DafnyCancelKeyDeletionRequest(KeyId=input.key_id,
)

def SmithyToDafny_com_amazonaws_kms_DisableKeyRequest(input):

  return DafnyDisableKeyRequest(KeyId=input.key_id,
)

def SmithyToDafny_com_amazonaws_kms_DeleteCustomKeyStoreRequest(input):

  return DafnyDeleteCustomKeyStoreRequest(CustomKeyStoreId=input.custom_key_store_id,
)

def SmithyToDafny_com_amazonaws_kms_UntagResourceRequest(input):

  return DafnyUntagResourceRequest(KeyId=input.key_id,
TagKeys=Seq([list_element for list_element in input.tag_keys]),
)

def SmithyToDafny_com_amazonaws_kms_ListAliasesRequest(input):

  return DafnyListAliasesRequest(KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
Limit=((Option_Some(input.limit)) if (input.limit is not None) else (Option_None())),
Marker=((Option_Some(input.marker)) if (input.marker is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ImportKeyMaterialRequest(input):

  return DafnyImportKeyMaterialRequest(KeyId=input.key_id,
ImportToken=input.import_token,
EncryptedKeyMaterial=input.encrypted_key_material,
ValidTo=((Option_Some(input.valid_to)) if (input.valid_to is not None) else (Option_None())),
ExpirationModel=((Option_Some(input.expiration_model)) if (input.expiration_model is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_Tag(input):

  return DafnyTag(TagKey=input.tag_key,
TagValue=input.tag_value,
)

def SmithyToDafny_com_amazonaws_kms_TagResourceRequest(input):

  return DafnyTagResourceRequest(KeyId=input.key_id,
Tags=Seq([SmithyToDafny_com_amazonaws_kms_Tag(list_element) for list_element in input.tags]),
)

def SmithyToDafny_com_amazonaws_kms_UpdatePrimaryRegionRequest(input):

  return DafnyUpdatePrimaryRegionRequest(KeyId=input.key_id,
PrimaryRegion=input.primary_region,
)

def SmithyToDafny_com_amazonaws_kms_GenerateDataKeyPairWithoutPlaintextRequest(input):

  return DafnyGenerateDataKeyPairWithoutPlaintextRequest(EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
KeyId=input.key_id,
KeyPairSpec=input.key_pair_spec,
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ListResourceTagsRequest(input):

  return DafnyListResourceTagsRequest(KeyId=input.key_id,
Limit=((Option_Some(input.limit)) if (input.limit is not None) else (Option_None())),
Marker=((Option_Some(input.marker)) if (input.marker is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_DeleteAliasRequest(input):

  return DafnyDeleteAliasRequest(AliasName=input.alias_name,
)

def SmithyToDafny_com_amazonaws_kms_GetParametersForImportRequest(input):

  return DafnyGetParametersForImportRequest(KeyId=input.key_id,
WrappingAlgorithm=input.wrapping_algorithm,
WrappingKeySpec=input.wrapping_key_spec,
)

def SmithyToDafny_com_amazonaws_kms_ScheduleKeyDeletionRequest(input):

  return DafnyScheduleKeyDeletionRequest(KeyId=input.key_id,
PendingWindowInDays=((Option_Some(input.pending_window_in_days)) if (input.pending_window_in_days is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GetKeyRotationStatusRequest(input):

  return DafnyGetKeyRotationStatusRequest(KeyId=input.key_id,
)

def SmithyToDafny_com_amazonaws_kms_CreateCustomKeyStoreRequest(input):

  return DafnyCreateCustomKeyStoreRequest(CustomKeyStoreName=input.custom_key_store_name,
CloudHsmClusterId=input.cloud_hsm_cluster_id,
TrustAnchorCertificate=input.trust_anchor_certificate,
KeyStorePassword=input.key_store_password,
)

def SmithyToDafny_com_amazonaws_kms_UpdateCustomKeyStoreRequest(input):

  return DafnyUpdateCustomKeyStoreRequest(CustomKeyStoreId=input.custom_key_store_id,
NewCustomKeyStoreName=((Option_Some(input.new_custom_key_store_name)) if (input.new_custom_key_store_name is not None) else (Option_None())),
KeyStorePassword=((Option_Some(input.key_store_password)) if (input.key_store_password is not None) else (Option_None())),
CloudHsmClusterId=((Option_Some(input.cloud_hsm_cluster_id)) if (input.cloud_hsm_cluster_id is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GetPublicKeyRequest(input):

  return DafnyGetPublicKeyRequest(KeyId=input.key_id,
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_DescribeCustomKeyStoresRequest(input):

  return DafnyDescribeCustomKeyStoresRequest(CustomKeyStoreId=((Option_Some(input.custom_key_store_id)) if (input.custom_key_store_id is not None) else (Option_None())),
CustomKeyStoreName=((Option_Some(input.custom_key_store_name)) if (input.custom_key_store_name is not None) else (Option_None())),
Limit=((Option_Some(input.limit)) if (input.limit is not None) else (Option_None())),
Marker=((Option_Some(input.marker)) if (input.marker is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GenerateDataKeyRequest(input):

  return DafnyGenerateDataKeyRequest(KeyId=input.key_id,
EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
NumberOfBytes=((Option_Some(input.number_of_bytes)) if (input.number_of_bytes is not None) else (Option_None())),
KeySpec=((Option_Some(input.key_spec)) if (input.key_spec is not None) else (Option_None())),
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GenerateDataKeyPairRequest(input):

  return DafnyGenerateDataKeyPairRequest(EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
KeyId=input.key_id,
KeyPairSpec=input.key_pair_spec,
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GenerateRandomRequest(input):

  return DafnyGenerateRandomRequest(NumberOfBytes=((Option_Some(input.number_of_bytes)) if (input.number_of_bytes is not None) else (Option_None())),
CustomKeyStoreId=((Option_Some(input.custom_key_store_id)) if (input.custom_key_store_id is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GenerateDataKeyWithoutPlaintextRequest(input):

  return DafnyGenerateDataKeyWithoutPlaintextRequest(KeyId=input.key_id,
EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
KeySpec=((Option_Some(input.key_spec)) if (input.key_spec is not None) else (Option_None())),
NumberOfBytes=((Option_Some(input.number_of_bytes)) if (input.number_of_bytes is not None) else (Option_None())),
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_CreateAliasRequest(input):

  return DafnyCreateAliasRequest(AliasName=input.alias_name,
TargetKeyId=input.target_key_id,
)

def SmithyToDafny_com_amazonaws_kms_DisableKeyRotationRequest(input):

  return DafnyDisableKeyRotationRequest(KeyId=input.key_id,
)

def SmithyToDafny_com_amazonaws_kms_DeleteImportedKeyMaterialRequest(input):

  return DafnyDeleteImportedKeyMaterialRequest(KeyId=input.key_id,
)

def SmithyToDafny_com_amazonaws_kms_DescribeKeyRequest(input):

  return DafnyDescribeKeyRequest(KeyId=input.key_id,
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ListGrantsRequest(input):

  return DafnyListGrantsRequest(Limit=((Option_Some(input.limit)) if (input.limit is not None) else (Option_None())),
Marker=((Option_Some(input.marker)) if (input.marker is not None) else (Option_None())),
KeyId=input.key_id,
GrantId=((Option_Some(input.grant_id)) if (input.grant_id is not None) else (Option_None())),
GranteePrincipal=((Option_Some(input.grantee_principal)) if (input.grantee_principal is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ReplicateKeyRequest(input):

  return DafnyReplicateKeyRequest(KeyId=input.key_id,
ReplicaRegion=input.replica_region,
Policy=((Option_Some(input.policy)) if (input.policy is not None) else (Option_None())),
BypassPolicyLockoutSafetyCheck=((Option_Some(input.bypass_policy_lockout_safety_check)) if (input.bypass_policy_lockout_safety_check is not None) else (Option_None())),
Description=((Option_Some(input.description)) if (input.description is not None) else (Option_None())),
Tags=((Option_Some(Seq([SmithyToDafny_com_amazonaws_kms_Tag(list_element) for list_element in input.tags]))) if (input.tags is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_RetireGrantRequest(input):

  return DafnyRetireGrantRequest(GrantToken=((Option_Some(input.grant_token)) if (input.grant_token is not None) else (Option_None())),
KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
GrantId=((Option_Some(input.grant_id)) if (input.grant_id is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_CreateKeyRequest(input):

  return DafnyCreateKeyRequest(Policy=((Option_Some(input.policy)) if (input.policy is not None) else (Option_None())),
Description=((Option_Some(input.description)) if (input.description is not None) else (Option_None())),
KeyUsage=((Option_Some(input.key_usage)) if (input.key_usage is not None) else (Option_None())),
CustomerMasterKeySpec=((Option_Some(input.customer_master_key_spec)) if (input.customer_master_key_spec is not None) else (Option_None())),
KeySpec=((Option_Some(input.key_spec)) if (input.key_spec is not None) else (Option_None())),
Origin=((Option_Some(input.origin)) if (input.origin is not None) else (Option_None())),
CustomKeyStoreId=((Option_Some(input.custom_key_store_id)) if (input.custom_key_store_id is not None) else (Option_None())),
BypassPolicyLockoutSafetyCheck=((Option_Some(input.bypass_policy_lockout_safety_check)) if (input.bypass_policy_lockout_safety_check is not None) else (Option_None())),
Tags=((Option_Some(Seq([SmithyToDafny_com_amazonaws_kms_Tag(list_element) for list_element in input.tags]))) if (input.tags is not None) else (Option_None())),
MultiRegion=((Option_Some(input.multi_region)) if (input.multi_region is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_UpdateKeyDescriptionRequest(input):

  return DafnyUpdateKeyDescriptionRequest(KeyId=input.key_id,
Description=input.description,
)

def SmithyToDafny_com_amazonaws_kms_ConnectCustomKeyStoreRequest(input):

  return DafnyConnectCustomKeyStoreRequest(CustomKeyStoreId=input.custom_key_store_id,
)

def SmithyToDafny_com_amazonaws_kms_SignRequest(input):

  return DafnySignRequest(KeyId=input.key_id,
Message=input.message,
MessageType=((Option_Some(input.message_type)) if (input.message_type is not None) else (Option_None())),
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
SigningAlgorithm=input.signing_algorithm,
)

def SmithyToDafny_com_amazonaws_kms_UpdateAliasRequest(input):

  return DafnyUpdateAliasRequest(AliasName=input.alias_name,
TargetKeyId=input.target_key_id,
)

def SmithyToDafny_com_amazonaws_kms_VerifyRequest(input):

  return DafnyVerifyRequest(KeyId=input.key_id,
Message=input.message,
MessageType=((Option_Some(input.message_type)) if (input.message_type is not None) else (Option_None())),
Signature=input.signature,
SigningAlgorithm=input.signing_algorithm,
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_DecryptRequest(input):

  return DafnyDecryptRequest(CiphertextBlob=input.ciphertext_blob,
EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
EncryptionAlgorithm=((Option_Some(input.encryption_algorithm)) if (input.encryption_algorithm is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_RevokeGrantRequest(input):

  return DafnyRevokeGrantRequest(KeyId=input.key_id,
GrantId=input.grant_id,
)

def SmithyToDafny_com_amazonaws_kms_EnableKeyRequest(input):

  return DafnyEnableKeyRequest(KeyId=input.key_id,
)

def SmithyToDafny_com_amazonaws_kms_ListKeyPoliciesRequest(input):

  return DafnyListKeyPoliciesRequest(KeyId=input.key_id,
Limit=((Option_Some(input.limit)) if (input.limit is not None) else (Option_None())),
Marker=((Option_Some(input.marker)) if (input.marker is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_DisconnectCustomKeyStoreRequest(input):

  return DafnyDisconnectCustomKeyStoreRequest(CustomKeyStoreId=input.custom_key_store_id,
)

def SmithyToDafny_com_amazonaws_kms_GrantConstraints(input):

  return DafnyGrantConstraints(EncryptionContextSubset=((Option_Some(Map({key: value for (key, value) in input.encryption_context_subset.items() }))) if (input.encryption_context_subset is not None) else (Option_None())),
EncryptionContextEquals=((Option_Some(Map({key: value for (key, value) in input.encryption_context_equals.items() }))) if (input.encryption_context_equals is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_CreateGrantRequest(input):

  return DafnyCreateGrantRequest(KeyId=input.key_id,
GranteePrincipal=input.grantee_principal,
RetiringPrincipal=((Option_Some(input.retiring_principal)) if (input.retiring_principal is not None) else (Option_None())),
Operations=Seq([list_element for list_element in input.operations]),
Constraints=((Option_Some(SmithyToDafny_com_amazonaws_kms_GrantConstraints(input.constraints))) if (input.constraints is not None) else (Option_None())),
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
Name=((Option_Some(input.name)) if (input.name is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ReEncryptRequest(input):

  return DafnyReEncryptRequest(CiphertextBlob=input.ciphertext_blob,
SourceEncryptionContext=((Option_Some(Map({key: value for (key, value) in input.source_encryption_context.items() }))) if (input.source_encryption_context is not None) else (Option_None())),
SourceKeyId=((Option_Some(input.source_key_id)) if (input.source_key_id is not None) else (Option_None())),
DestinationKeyId=input.destination_key_id,
DestinationEncryptionContext=((Option_Some(Map({key: value for (key, value) in input.destination_encryption_context.items() }))) if (input.destination_encryption_context is not None) else (Option_None())),
SourceEncryptionAlgorithm=((Option_Some(input.source_encryption_algorithm)) if (input.source_encryption_algorithm is not None) else (Option_None())),
DestinationEncryptionAlgorithm=((Option_Some(input.destination_encryption_algorithm)) if (input.destination_encryption_algorithm is not None) else (Option_None())),
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_PutKeyPolicyRequest(input):

  return DafnyPutKeyPolicyRequest(KeyId=input.key_id,
PolicyName=input.policy_name,
Policy=input.policy,
BypassPolicyLockoutSafetyCheck=((Option_Some(input.bypass_policy_lockout_safety_check)) if (input.bypass_policy_lockout_safety_check is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_EncryptRequest(input):

  return DafnyEncryptRequest(KeyId=input.key_id,
Plaintext=input.plaintext,
EncryptionContext=((Option_Some(Map({key: value for (key, value) in input.encryption_context.items() }))) if (input.encryption_context is not None) else (Option_None())),
GrantTokens=((Option_Some(Seq([list_element for list_element in input.grant_tokens]))) if (input.grant_tokens is not None) else (Option_None())),
EncryptionAlgorithm=((Option_Some(input.encryption_algorithm)) if (input.encryption_algorithm is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GetKeyPolicyRequest(input):

  return DafnyGetKeyPolicyRequest(KeyId=input.key_id,
PolicyName=input.policy_name,
)

def SmithyToDafny_com_amazonaws_kms_CancelKeyDeletionResponse(input):

  return DafnyCancelKeyDeletionResponse(KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ConnectCustomKeyStoreResponse(input):

  return DafnyConnectCustomKeyStoreResponse()

def SmithyToDafny_smithy_api_Unit(input):

  return None()

def SmithyToDafny_com_amazonaws_kms_CreateCustomKeyStoreResponse(input):

  return DafnyCreateCustomKeyStoreResponse(CustomKeyStoreId=((Option_Some(input.custom_key_store_id)) if (input.custom_key_store_id is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_CreateGrantResponse(input):

  return DafnyCreateGrantResponse(GrantToken=((Option_Some(input.grant_token)) if (input.grant_token is not None) else (Option_None())),
GrantId=((Option_Some(input.grant_id)) if (input.grant_id is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_MultiRegionKey(input):

  return DafnyMultiRegionKey(Arn=((Option_Some(input.arn)) if (input.arn is not None) else (Option_None())),
Region=((Option_Some(input.region)) if (input.region is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_MultiRegionConfiguration(input):

  return DafnyMultiRegionConfiguration(MultiRegionKeyType=((Option_Some(input.multi_region_key_type)) if (input.multi_region_key_type is not None) else (Option_None())),
PrimaryKey=((Option_Some(SmithyToDafny_com_amazonaws_kms_MultiRegionKey(input.primary_key))) if (input.primary_key is not None) else (Option_None())),
ReplicaKeys=((Option_Some(Seq([SmithyToDafny_com_amazonaws_kms_MultiRegionKey(list_element) for list_element in input.replica_keys]))) if (input.replica_keys is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_KeyMetadata(input):

  return DafnyKeyMetadata(AWSAccountId=((Option_Some(input.aws_account_id)) if (input.aws_account_id is not None) else (Option_None())),
KeyId=input.key_id,
Arn=((Option_Some(input.arn)) if (input.arn is not None) else (Option_None())),
CreationDate=((Option_Some(input.creation_date)) if (input.creation_date is not None) else (Option_None())),
Enabled=((Option_Some(input.enabled)) if (input.enabled is not None) else (Option_None())),
Description=((Option_Some(input.description)) if (input.description is not None) else (Option_None())),
KeyUsage=((Option_Some(input.key_usage)) if (input.key_usage is not None) else (Option_None())),
KeyState=((Option_Some(input.key_state)) if (input.key_state is not None) else (Option_None())),
DeletionDate=((Option_Some(input.deletion_date)) if (input.deletion_date is not None) else (Option_None())),
ValidTo=((Option_Some(input.valid_to)) if (input.valid_to is not None) else (Option_None())),
Origin=((Option_Some(input.origin)) if (input.origin is not None) else (Option_None())),
CustomKeyStoreId=((Option_Some(input.custom_key_store_id)) if (input.custom_key_store_id is not None) else (Option_None())),
CloudHsmClusterId=((Option_Some(input.cloud_hsm_cluster_id)) if (input.cloud_hsm_cluster_id is not None) else (Option_None())),
ExpirationModel=((Option_Some(input.expiration_model)) if (input.expiration_model is not None) else (Option_None())),
KeyManager=((Option_Some(input.key_manager)) if (input.key_manager is not None) else (Option_None())),
CustomerMasterKeySpec=((Option_Some(input.customer_master_key_spec)) if (input.customer_master_key_spec is not None) else (Option_None())),
KeySpec=((Option_Some(input.key_spec)) if (input.key_spec is not None) else (Option_None())),
EncryptionAlgorithms=((Option_Some(Seq([list_element for list_element in input.encryption_algorithms]))) if (input.encryption_algorithms is not None) else (Option_None())),
SigningAlgorithms=((Option_Some(Seq([list_element for list_element in input.signing_algorithms]))) if (input.signing_algorithms is not None) else (Option_None())),
MultiRegion=((Option_Some(input.multi_region)) if (input.multi_region is not None) else (Option_None())),
MultiRegionConfiguration=((Option_Some(SmithyToDafny_com_amazonaws_kms_MultiRegionConfiguration(input.multi_region_configuration))) if (input.multi_region_configuration is not None) else (Option_None())),
PendingDeletionWindowInDays=((Option_Some(input.pending_deletion_window_in_days)) if (input.pending_deletion_window_in_days is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_CreateKeyResponse(input):

  return DafnyCreateKeyResponse(KeyMetadata=((Option_Some(SmithyToDafny_com_amazonaws_kms_KeyMetadata(input.key_metadata))) if (input.key_metadata is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_DecryptResponse(input):

  return DafnyDecryptResponse(KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
Plaintext=((Option_Some(input.plaintext)) if (input.plaintext is not None) else (Option_None())),
EncryptionAlgorithm=((Option_Some(input.encryption_algorithm)) if (input.encryption_algorithm is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_DeleteCustomKeyStoreResponse(input):

  return DafnyDeleteCustomKeyStoreResponse()

def SmithyToDafny_com_amazonaws_kms_CustomKeyStoresListEntry(input):

  return DafnyCustomKeyStoresListEntry(CustomKeyStoreId=((Option_Some(input.custom_key_store_id)) if (input.custom_key_store_id is not None) else (Option_None())),
CustomKeyStoreName=((Option_Some(input.custom_key_store_name)) if (input.custom_key_store_name is not None) else (Option_None())),
CloudHsmClusterId=((Option_Some(input.cloud_hsm_cluster_id)) if (input.cloud_hsm_cluster_id is not None) else (Option_None())),
TrustAnchorCertificate=((Option_Some(input.trust_anchor_certificate)) if (input.trust_anchor_certificate is not None) else (Option_None())),
ConnectionState=((Option_Some(input.connection_state)) if (input.connection_state is not None) else (Option_None())),
ConnectionErrorCode=((Option_Some(input.connection_error_code)) if (input.connection_error_code is not None) else (Option_None())),
CreationDate=((Option_Some(input.creation_date)) if (input.creation_date is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_DescribeCustomKeyStoresResponse(input):

  return DafnyDescribeCustomKeyStoresResponse(CustomKeyStores=((Option_Some(Seq([SmithyToDafny_com_amazonaws_kms_CustomKeyStoresListEntry(list_element) for list_element in input.custom_key_stores]))) if (input.custom_key_stores is not None) else (Option_None())),
NextMarker=((Option_Some(input.next_marker)) if (input.next_marker is not None) else (Option_None())),
Truncated=((Option_Some(input.truncated)) if (input.truncated is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_DescribeKeyResponse(input):

  return DafnyDescribeKeyResponse(KeyMetadata=((Option_Some(SmithyToDafny_com_amazonaws_kms_KeyMetadata(input.key_metadata))) if (input.key_metadata is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_DisconnectCustomKeyStoreResponse(input):

  return DafnyDisconnectCustomKeyStoreResponse()

def SmithyToDafny_com_amazonaws_kms_EncryptResponse(input):

  return DafnyEncryptResponse(CiphertextBlob=((Option_Some(input.ciphertext_blob)) if (input.ciphertext_blob is not None) else (Option_None())),
KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
EncryptionAlgorithm=((Option_Some(input.encryption_algorithm)) if (input.encryption_algorithm is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GenerateDataKeyResponse(input):

  return DafnyGenerateDataKeyResponse(CiphertextBlob=((Option_Some(input.ciphertext_blob)) if (input.ciphertext_blob is not None) else (Option_None())),
Plaintext=((Option_Some(input.plaintext)) if (input.plaintext is not None) else (Option_None())),
KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GenerateDataKeyPairResponse(input):

  return DafnyGenerateDataKeyPairResponse(PrivateKeyCiphertextBlob=((Option_Some(input.private_key_ciphertext_blob)) if (input.private_key_ciphertext_blob is not None) else (Option_None())),
PrivateKeyPlaintext=((Option_Some(input.private_key_plaintext)) if (input.private_key_plaintext is not None) else (Option_None())),
PublicKey=((Option_Some(input.public_key)) if (input.public_key is not None) else (Option_None())),
KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
KeyPairSpec=((Option_Some(input.key_pair_spec)) if (input.key_pair_spec is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GenerateDataKeyPairWithoutPlaintextResponse(input):

  return DafnyGenerateDataKeyPairWithoutPlaintextResponse(PrivateKeyCiphertextBlob=((Option_Some(input.private_key_ciphertext_blob)) if (input.private_key_ciphertext_blob is not None) else (Option_None())),
PublicKey=((Option_Some(input.public_key)) if (input.public_key is not None) else (Option_None())),
KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
KeyPairSpec=((Option_Some(input.key_pair_spec)) if (input.key_pair_spec is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GenerateDataKeyWithoutPlaintextResponse(input):

  return DafnyGenerateDataKeyWithoutPlaintextResponse(CiphertextBlob=((Option_Some(input.ciphertext_blob)) if (input.ciphertext_blob is not None) else (Option_None())),
KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GenerateRandomResponse(input):

  return DafnyGenerateRandomResponse(Plaintext=((Option_Some(input.plaintext)) if (input.plaintext is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GetKeyPolicyResponse(input):

  return DafnyGetKeyPolicyResponse(Policy=((Option_Some(input.policy)) if (input.policy is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GetKeyRotationStatusResponse(input):

  return DafnyGetKeyRotationStatusResponse(KeyRotationEnabled=((Option_Some(input.key_rotation_enabled)) if (input.key_rotation_enabled is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GetParametersForImportResponse(input):

  return DafnyGetParametersForImportResponse(KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
ImportToken=((Option_Some(input.import_token)) if (input.import_token is not None) else (Option_None())),
PublicKey=((Option_Some(input.public_key)) if (input.public_key is not None) else (Option_None())),
ParametersValidTo=((Option_Some(input.parameters_valid_to)) if (input.parameters_valid_to is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GetPublicKeyResponse(input):

  return DafnyGetPublicKeyResponse(KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
PublicKey=((Option_Some(input.public_key)) if (input.public_key is not None) else (Option_None())),
CustomerMasterKeySpec=((Option_Some(input.customer_master_key_spec)) if (input.customer_master_key_spec is not None) else (Option_None())),
KeySpec=((Option_Some(input.key_spec)) if (input.key_spec is not None) else (Option_None())),
KeyUsage=((Option_Some(input.key_usage)) if (input.key_usage is not None) else (Option_None())),
EncryptionAlgorithms=((Option_Some(Seq([list_element for list_element in input.encryption_algorithms]))) if (input.encryption_algorithms is not None) else (Option_None())),
SigningAlgorithms=((Option_Some(Seq([list_element for list_element in input.signing_algorithms]))) if (input.signing_algorithms is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ImportKeyMaterialResponse(input):

  return DafnyImportKeyMaterialResponse()

def SmithyToDafny_com_amazonaws_kms_AliasListEntry(input):

  return DafnyAliasListEntry(AliasName=((Option_Some(input.alias_name)) if (input.alias_name is not None) else (Option_None())),
AliasArn=((Option_Some(input.alias_arn)) if (input.alias_arn is not None) else (Option_None())),
TargetKeyId=((Option_Some(input.target_key_id)) if (input.target_key_id is not None) else (Option_None())),
CreationDate=((Option_Some(input.creation_date)) if (input.creation_date is not None) else (Option_None())),
LastUpdatedDate=((Option_Some(input.last_updated_date)) if (input.last_updated_date is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ListAliasesResponse(input):

  return DafnyListAliasesResponse(Aliases=((Option_Some(Seq([SmithyToDafny_com_amazonaws_kms_AliasListEntry(list_element) for list_element in input.aliases]))) if (input.aliases is not None) else (Option_None())),
NextMarker=((Option_Some(input.next_marker)) if (input.next_marker is not None) else (Option_None())),
Truncated=((Option_Some(input.truncated)) if (input.truncated is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_GrantListEntry(input):

  return DafnyGrantListEntry(KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
GrantId=((Option_Some(input.grant_id)) if (input.grant_id is not None) else (Option_None())),
Name=((Option_Some(input.name)) if (input.name is not None) else (Option_None())),
CreationDate=((Option_Some(input.creation_date)) if (input.creation_date is not None) else (Option_None())),
GranteePrincipal=((Option_Some(input.grantee_principal)) if (input.grantee_principal is not None) else (Option_None())),
RetiringPrincipal=((Option_Some(input.retiring_principal)) if (input.retiring_principal is not None) else (Option_None())),
IssuingAccount=((Option_Some(input.issuing_account)) if (input.issuing_account is not None) else (Option_None())),
Operations=((Option_Some(Seq([list_element for list_element in input.operations]))) if (input.operations is not None) else (Option_None())),
Constraints=((Option_Some(SmithyToDafny_com_amazonaws_kms_GrantConstraints(input.constraints))) if (input.constraints is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ListGrantsResponse(input):

  return DafnyListGrantsResponse(Grants=((Option_Some(Seq([SmithyToDafny_com_amazonaws_kms_GrantListEntry(list_element) for list_element in input.grants]))) if (input.grants is not None) else (Option_None())),
NextMarker=((Option_Some(input.next_marker)) if (input.next_marker is not None) else (Option_None())),
Truncated=((Option_Some(input.truncated)) if (input.truncated is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ListKeyPoliciesResponse(input):

  return DafnyListKeyPoliciesResponse(PolicyNames=((Option_Some(Seq([list_element for list_element in input.policy_names]))) if (input.policy_names is not None) else (Option_None())),
NextMarker=((Option_Some(input.next_marker)) if (input.next_marker is not None) else (Option_None())),
Truncated=((Option_Some(input.truncated)) if (input.truncated is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ListResourceTagsResponse(input):

  return DafnyListResourceTagsResponse(Tags=((Option_Some(Seq([SmithyToDafny_com_amazonaws_kms_Tag(list_element) for list_element in input.tags]))) if (input.tags is not None) else (Option_None())),
NextMarker=((Option_Some(input.next_marker)) if (input.next_marker is not None) else (Option_None())),
Truncated=((Option_Some(input.truncated)) if (input.truncated is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ReEncryptResponse(input):

  return DafnyReEncryptResponse(CiphertextBlob=((Option_Some(input.ciphertext_blob)) if (input.ciphertext_blob is not None) else (Option_None())),
SourceKeyId=((Option_Some(input.source_key_id)) if (input.source_key_id is not None) else (Option_None())),
KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
SourceEncryptionAlgorithm=((Option_Some(input.source_encryption_algorithm)) if (input.source_encryption_algorithm is not None) else (Option_None())),
DestinationEncryptionAlgorithm=((Option_Some(input.destination_encryption_algorithm)) if (input.destination_encryption_algorithm is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ReplicateKeyResponse(input):

  return DafnyReplicateKeyResponse(ReplicaKeyMetadata=((Option_Some(SmithyToDafny_com_amazonaws_kms_KeyMetadata(input.replica_key_metadata))) if (input.replica_key_metadata is not None) else (Option_None())),
ReplicaPolicy=((Option_Some(input.replica_policy)) if (input.replica_policy is not None) else (Option_None())),
ReplicaTags=((Option_Some(Seq([SmithyToDafny_com_amazonaws_kms_Tag(list_element) for list_element in input.replica_tags]))) if (input.replica_tags is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_ScheduleKeyDeletionResponse(input):

  return DafnyScheduleKeyDeletionResponse(KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
DeletionDate=((Option_Some(input.deletion_date)) if (input.deletion_date is not None) else (Option_None())),
KeyState=((Option_Some(input.key_state)) if (input.key_state is not None) else (Option_None())),
PendingWindowInDays=((Option_Some(input.pending_window_in_days)) if (input.pending_window_in_days is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_SignResponse(input):

  return DafnySignResponse(KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
Signature=((Option_Some(input.signature)) if (input.signature is not None) else (Option_None())),
SigningAlgorithm=((Option_Some(input.signing_algorithm)) if (input.signing_algorithm is not None) else (Option_None())),
)

def SmithyToDafny_com_amazonaws_kms_UpdateCustomKeyStoreResponse(input):

  return DafnyUpdateCustomKeyStoreResponse()

def SmithyToDafny_com_amazonaws_kms_VerifyResponse(input):

  return DafnyVerifyResponse(KeyId=((Option_Some(input.key_id)) if (input.key_id is not None) else (Option_None())),
SignatureValid=((Option_Some(input.signature_valid)) if (input.signature_valid is not None) else (Option_None())),
SigningAlgorithm=((Option_Some(input.signing_algorithm)) if (input.signing_algorithm is not None) else (Option_None())),
)
