// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_resource_positional::_get_resource_positional_output::GetResourcePositionalOutputBuilder;

pub use crate::operation::get_resource_positional::_get_resource_positional_input::GetResourcePositionalInputBuilder;

impl crate::operation::get_resource_positional::builders::GetResourcePositionalInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_resource_positional::GetResourcePositionalOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_resource_positional::GetResourcePositionalError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_resource_positional();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetResourcePositional`.
///
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetResourcePositionalFluentBuilder {
    client: crate::Client,
    inner: crate::operation::get_resource_positional::builders::GetResourcePositionalInputBuilder,
}

impl GetResourcePositionalFluentBuilder {
    /// Creates a new `GetResourcePositionalFluentBuilder`.
    pub(crate) fn new(client: crate::client::Client) -> Self {
        Self {
            client,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the GetResourcePositional as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::get_resource_positional::builders::GetResourcePositionalInputBuilder
    {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_resource_positional::GetResourcePositionalOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_resource_positional::GetResourcePositionalError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_resource_positional::GetResourcePositional::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_resource_positional::GetResourcePositional::orchestrate(
            &runtime_plugins,
            input,
        )
        .await
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_name()
    }
}
