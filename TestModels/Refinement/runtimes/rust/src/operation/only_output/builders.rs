// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::only_output::_only_output_output::OnlyOutputOutputBuilder;

pub use crate::operation::only_output::_only_output_input::OnlyOutputInputBuilder;

impl crate::operation::only_output::builders::OnlyOutputInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::only_output::OnlyOutputOutput,
        crate::operation::only_output::OnlyOutputError,
    > {
        let mut fluent_builder = client.only_output();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `OnlyOutput`.
///
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct OnlyOutputFluentBuilder {
    client: crate::client::Client,
    inner: crate::operation::only_output::builders::OnlyOutputInputBuilder,
}

impl OnlyOutputFluentBuilder {
    /// Creates a new `OnlyOutputFluentBuilder`.
    pub(crate) fn new(client: crate::client::Client) -> Self {
        Self {
            client,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the OnlyOutput as a reference.
    pub fn as_input(&self) -> &crate::operation::only_output::builders::OnlyOutputInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::only_output::OnlyOutputOutput,
        crate::operation::only_output::OnlyOutputError,
    > {
        crate::operation::only_output::OnlyOutput::send(&self.client).await
    }
}
