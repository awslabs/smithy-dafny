diff --git b/TestModels/Refinement/runtimes/rust/src/client.rs a/TestModels/Refinement/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..d13672bd
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/client.rs
@@ -0,0 +1,40 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::ISimpleRefinementClient>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_refinement_config::SimpleRefinementConfig,
+    ) -> Result<Self, BuildError> {
+        let inner =
+            ::simple_refinement_dafny::_simple_drefinement_dinternaldafny::_default::SimpleRefinement(
+                &crate::conversions::simple_refinement_config::_simple_refinement_config::to_dafny(conf),
+            );
+        if matches!(
+            inner.as_ref(),
+            ::simple_refinement_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::upcast_object()(inner.Extract()),
+        })
+    }
+}
+
+mod get_refinement;
+mod only_input;
+mod only_output;
+mod readonly_operation;
diff --git b/TestModels/Refinement/runtimes/rust/src/client/get_refinement.rs a/TestModels/Refinement/runtimes/rust/src/client/get_refinement.rs
new file mode 100644
index 00000000..0d1deb84
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/client/get_refinement.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetRefinement`](crate::operation::get_refinement::builders::GetRefinementFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`required_string(impl Into<String>)`](crate::operation::get_refinement::builders::GetRefinementFluentBuilder::required_string) / [`set_required_string(Option<String>)`](crate::operation::get_refinement::builders::GetRefinementFluentBuilder::set_required_string):<br>required: **true**<br>(undocumented)<br>
+    ///   - [`optional_string(impl Into<String>)`](crate::operation::get_refinement::builders::GetRefinementFluentBuilder::optional_string) / [`set_optional_string(Option<String>)`](crate::operation::get_refinement::builders::GetRefinementFluentBuilder::set_optional_string):<br>required: **false**<br>(undocumented)<br>
+    /// - On success, responds with [`GetRefinementOutput`](crate::operation::get_refinement::GetRefinementOutput) with field(s):
+    ///   - [`required_string(String)`](crate::operation::get_refinement::GetRefinementOutput::required_string): (undocumented)
+    ///   - [`optional_string(Option<String>)`](crate::operation::get_refinement::GetRefinementOutput::optional_string): (undocumented)
+    /// - On failure, responds with [`SdkError<GetRefinementError>`](crate::operation::get_refinement::GetRefinementError)
+    pub fn get_refinement(
+        &self,
+    ) -> crate::operation::get_refinement::builders::GetRefinementFluentBuilder {
+        crate::operation::get_refinement::builders::GetRefinementFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/client/only_input.rs a/TestModels/Refinement/runtimes/rust/src/client/only_input.rs
new file mode 100644
index 00000000..dfab84e9
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/client/only_input.rs
@@ -0,0 +1,12 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`OnlyInput`](crate::operation::only_input::builders::OnlyInputFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<String>)`](crate::operation::only_input::builders::OnlyInputFluentBuilder::value) / [`set_value(Option<String>)`](crate::operation::only_input::builders::OnlyInputFluentBuilder::set_value):<br>required: **false**<br>(undocumented)<br>
+    /// - On success, responds with [`OnlyInputOutput`](crate::operation::only_input::OnlyInputOutput)
+    /// - On failure, responds with [`SdkError<OnlyInputError>`](crate::operation::only_input::OnlyInputError)
+    pub fn only_input(&self) -> crate::operation::only_input::builders::OnlyInputFluentBuilder {
+        crate::operation::only_input::builders::OnlyInputFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/client/only_output.rs a/TestModels/Refinement/runtimes/rust/src/client/only_output.rs
new file mode 100644
index 00000000..c0208401
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/client/only_output.rs
@@ -0,0 +1,12 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`OnlyOutput`](crate::operation::only_output::builders::OnlyOutputFluentBuilder) operation.
+    ///
+    /// - The fluent builder takes no input, just [`send`](crate::operation::only_output::builders::OnlyOutputFluentBuilder::send) it.
+    /// - On success, responds with [`OnlyOutputOutput`](crate::operation::only_output::OnlyOutputOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::only_output::OnlyOutputOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<OnlyOutputError>`](crate::operation::only_output::OnlyOutputError)
+    pub fn only_output(&self) -> crate::operation::only_output::builders::OnlyOutputFluentBuilder {
+        crate::operation::only_output::builders::OnlyOutputFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/client/readonly_operation.rs a/TestModels/Refinement/runtimes/rust/src/client/readonly_operation.rs
new file mode 100644
index 00000000..e5e9251f
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/client/readonly_operation.rs
@@ -0,0 +1,19 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`ReadonlyOperation`](crate::operation::readonly_operation::builders::ReadonlyOperationFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`required_string(impl Into<String>)`](crate::operation::readonly_operation::builders::ReadonlyOperationFluentBuilder::required_string) / [`set_required_string(Option<String>)`](crate::operation::readonly_operation::builders::ReadonlyOperationFluentBuilder::set_required_string):<br>required: **true**<br>(undocumented)<br>
+    ///   - [`optional_string(impl Into<String>)`](crate::operation::readonly_operation::builders::ReadonlyOperationFluentBuilder::optional_string) / [`set_optional_string(Option<String>)`](crate::operation::readonly_operation::builders::ReadonlyOperationFluentBuilder::set_optional_string):<br>required: **false**<br>(undocumented)<br>
+    /// - On success, responds with [`ReadonlyOperationOutput`](crate::operation::readonly_operation::ReadonlyOperationOutput) with field(s):
+    ///   - [`required_string(String)`](crate::operation::readonly_operation::ReadonlyOperationOutput::required_string): (undocumented)
+    ///   - [`optional_string(Option<String>)`](crate::operation::readonly_operation::ReadonlyOperationOutput::optional_string): (undocumented)
+    /// - On failure, responds with [`SdkError<ReadonlyOperationError>`](crate::operation::readonly_operation::ReadonlyOperationError)
+    pub fn readonly_operation(
+        &self,
+    ) -> crate::operation::readonly_operation::builders::ReadonlyOperationFluentBuilder {
+        crate::operation::readonly_operation::builders::ReadonlyOperationFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions.rs a/TestModels/Refinement/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..54b3f0f2
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions.rs
@@ -0,0 +1,7 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_refinement;
+pub mod only_input;
+pub mod only_output;
+pub mod readonly_operation;
+
+pub mod simple_refinement_config;
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/get_refinement.rs a/TestModels/Refinement/runtimes/rust/src/conversions/get_refinement.rs
new file mode 100644
index 00000000..600b0008
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/get_refinement.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_refinement::GetRefinementError,
+) -> ::std::rc::Rc<::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error> {
+    match value {
+    crate::operation::get_refinement::GetRefinementError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_refinement::GetRefinementError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_refinement::GetRefinementError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_refinement::GetRefinementError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_refinement_input;
+
+pub mod _get_refinement_output;
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/get_refinement/_get_refinement_input.rs a/TestModels/Refinement/runtimes/rust/src/conversions/get_refinement/_get_refinement_input.rs
new file mode 100644
index 00000000..43e0f94d
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/get_refinement/_get_refinement_input.rs
@@ -0,0 +1,52 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_refinement::GetRefinementInput,
+) -> ::std::rc::Rc<
+    ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::GetRefinementInput,
+> {
+    let crate::operation::get_refinement::GetRefinementInput {
+        required_string,
+        optional_string,
+    } = value;
+
+    let required_string =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(
+            &required_string,
+        );
+
+    let optional_string = match optional_string {
+        Some(s) => ::simple_refinement_dafny::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+        None => ::simple_refinement_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::GetRefinementInput::GetRefinementInput {
+        requiredString: required_string,
+        optionalString: ::std::rc::Rc::new(optional_string),
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::GetRefinementInput,
+    >,
+) -> crate::operation::get_refinement::GetRefinementInput {
+    let ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::GetRefinementInput::GetRefinementInput { requiredString, optionalString } = dafny_value.as_ref();
+
+    let required_string =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+            requiredString,
+        );
+
+    let optional_string = match optionalString.as_ref() {
+        simple_refinement_dafny::_Wrappers_Compile::Option::None {} => ::std::option::Option::None,
+        simple_refinement_dafny::_Wrappers_Compile::Option::Some { value } => ::std::option::Option::Some(dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(value)),
+        simple_refinement_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    };
+
+    crate::operation::get_refinement::GetRefinementInput {
+        required_string,
+        optional_string,
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/get_refinement/_get_refinement_output.rs a/TestModels/Refinement/runtimes/rust/src/conversions/get_refinement/_get_refinement_output.rs
new file mode 100644
index 00000000..a190e228
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/get_refinement/_get_refinement_output.rs
@@ -0,0 +1,52 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_refinement::GetRefinementOutput,
+) -> ::std::rc::Rc<
+    ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::GetRefinementOutput,
+> {
+    let crate::operation::get_refinement::GetRefinementOutput {
+        required_string,
+        optional_string,
+    } = value;
+
+    let required_string =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(
+            &required_string,
+        );
+
+    let optional_string = match optional_string {
+        Some(s) => ::simple_refinement_dafny::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+        None => ::simple_refinement_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::GetRefinementOutput::GetRefinementOutput {
+        requiredString: required_string,
+        optionalString: ::std::rc::Rc::new(optional_string),
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::GetRefinementOutput,
+    >,
+) -> crate::operation::get_refinement::GetRefinementOutput {
+    let ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::GetRefinementOutput::GetRefinementOutput { requiredString, optionalString } = dafny_value.as_ref();
+
+    let required_string =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+            &requiredString,
+        );
+
+    let optional_string = match optionalString.as_ref() {
+        simple_refinement_dafny::_Wrappers_Compile::Option::None {} => ::std::option::Option::None,
+        simple_refinement_dafny::_Wrappers_Compile::Option::Some { value } => ::std::option::Option::Some(dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&value)),
+        simple_refinement_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    };
+
+    crate::operation::get_refinement::GetRefinementOutput {
+        required_string,
+        optional_string,
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/only_input.rs a/TestModels/Refinement/runtimes/rust/src/conversions/only_input.rs
new file mode 100644
index 00000000..080dfdc9
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/only_input.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::only_input::OnlyInputError,
+) -> ::std::rc::Rc<::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error> {
+    match value {
+        crate::operation::only_input::OnlyInputError::Unhandled(unhandled) => ::std::rc::Rc::new(
+            ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error::Opaque {
+                obj: ::dafny_runtime::upcast_object()(
+                    ::dafny_runtime::object::new(unhandled),
+                ),
+            },
+        ),
+    }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::only_input::OnlyInputError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::only_input::OnlyInputError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::only_input::OnlyInputError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _only_input_input;
+
+pub mod _only_input_output;
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/only_input/_only_input_input.rs a/TestModels/Refinement/runtimes/rust/src/conversions/only_input/_only_input_input.rs
new file mode 100644
index 00000000..26477c26
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/only_input/_only_input_input.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::only_input::OnlyInputInput,
+) -> ::std::rc::Rc<
+    ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::OnlyInputInput,
+> {
+    let crate::operation::only_input::OnlyInputInput { value } = value;
+
+    let optional_string = match value {
+        Some(s) => ::simple_refinement_dafny::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+        None => ::simple_refinement_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::OnlyInputInput::OnlyInputInput {
+        value: ::std::rc::Rc::new(optional_string)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::OnlyInputInput,
+    >,
+) -> crate::operation::only_input::OnlyInputInput {
+    let ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::OnlyInputInput::OnlyInputInput { value } = dafny_value.as_ref();
+
+    let optional_string = match value.as_ref() {
+        simple_refinement_dafny::_Wrappers_Compile::Option::None {} => ::std::option::Option::None,
+        simple_refinement_dafny::_Wrappers_Compile::Option::Some { value } => ::std::option::Option::Some(dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&value)),
+        simple_refinement_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    };
+
+    crate::operation::only_input::OnlyInputInput {
+        value: optional_string
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/only_input/_only_input_output.rs a/TestModels/Refinement/runtimes/rust/src/conversions/only_input/_only_input_output.rs
new file mode 100644
index 00000000..24a58661
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/only_input/_only_input_output.rs
@@ -0,0 +1,8 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(_value: crate::operation::only_input::OnlyInputOutput) {}
+
+#[allow(dead_code)]
+pub fn from_dafny(_dafny_value: ()) -> crate::operation::only_input::OnlyInputOutput {
+    crate::operation::only_input::OnlyInputOutput {}
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/only_output.rs a/TestModels/Refinement/runtimes/rust/src/conversions/only_output.rs
new file mode 100644
index 00000000..e0cde99f
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/only_output.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::only_output::OnlyOutputError,
+) -> ::std::rc::Rc<::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error> {
+    match value {
+        crate::operation::only_output::OnlyOutputError::Unhandled(unhandled) => ::std::rc::Rc::new(
+            ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error::Opaque {
+                obj: ::dafny_runtime::upcast_object()(
+                    ::dafny_runtime::object::new(unhandled),
+                ),
+            },
+        ),
+    }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::only_output::OnlyOutputError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::only_output::OnlyOutputError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::only_output::OnlyOutputError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _only_output_input;
+
+pub mod _only_output_output;
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/only_output/_only_output_input.rs a/TestModels/Refinement/runtimes/rust/src/conversions/only_output/_only_output_input.rs
new file mode 100644
index 00000000..58e99a74
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/only_output/_only_output_input.rs
@@ -0,0 +1,8 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(_value: crate::operation::only_output::OnlyOutputInput) {}
+
+#[allow(dead_code)]
+pub fn from_dafny(_dafny_value: ()) -> crate::operation::only_output::OnlyOutputInput {
+    crate::operation::only_output::OnlyOutputInput {}
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/only_output/_only_output_output.rs a/TestModels/Refinement/runtimes/rust/src/conversions/only_output/_only_output_output.rs
new file mode 100644
index 00000000..1217ce39
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/only_output/_only_output_output.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::only_output::OnlyOutputOutput,
+) -> ::std::rc::Rc<
+    ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::OnlyOutputOutput,
+> {
+    let crate::operation::only_output::OnlyOutputOutput { value } = value;
+
+    let optional_string = match value {
+        Some(s) => ::simple_refinement_dafny::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+        None => ::simple_refinement_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::OnlyOutputOutput::OnlyOutputOutput {
+        value: ::std::rc::Rc::new(optional_string)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::OnlyOutputOutput,
+    >,
+) -> crate::operation::only_output::OnlyOutputOutput {
+    let ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::OnlyOutputOutput::OnlyOutputOutput { value } = dafny_value.as_ref();
+
+    let optional_string = match value.as_ref() {
+        simple_refinement_dafny::_Wrappers_Compile::Option::None {} => ::std::option::Option::None,
+        simple_refinement_dafny::_Wrappers_Compile::Option::Some { value } => ::std::option::Option::Some(dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&value)),
+        simple_refinement_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    };
+
+    crate::operation::only_output::OnlyOutputOutput {
+        value: optional_string,
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/readonly_operation.rs a/TestModels/Refinement/runtimes/rust/src/conversions/readonly_operation.rs
new file mode 100644
index 00000000..c19efc31
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/readonly_operation.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::readonly_operation::ReadonlyOperationError,
+) -> ::std::rc::Rc<::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error> {
+    match value {
+    crate::operation::readonly_operation::ReadonlyOperationError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::readonly_operation::ReadonlyOperationError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::readonly_operation::ReadonlyOperationError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::readonly_operation::ReadonlyOperationError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _readonly_operation_input;
+
+pub mod _readonly_operation_output;
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/readonly_operation/_readonly_operation_input.rs a/TestModels/Refinement/runtimes/rust/src/conversions/readonly_operation/_readonly_operation_input.rs
new file mode 100644
index 00000000..c45759a2
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/readonly_operation/_readonly_operation_input.rs
@@ -0,0 +1,52 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::readonly_operation::ReadonlyOperationInput,
+) -> ::std::rc::Rc<
+    ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::ReadonlyOperationInput,
+> {
+    let crate::operation::readonly_operation::ReadonlyOperationInput {
+        required_string,
+        optional_string,
+    } = value;
+
+    let required_string =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(
+            &required_string,
+        );
+
+    let optional_string = match optional_string {
+        Some(s) => ::simple_refinement_dafny::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+        None => ::simple_refinement_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::ReadonlyOperationInput::ReadonlyOperationInput {
+        requiredString: required_string,
+        optionalString: ::std::rc::Rc::new(optional_string),
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::ReadonlyOperationInput,
+    >,
+) -> crate::operation::readonly_operation::ReadonlyOperationInput {
+    let ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::ReadonlyOperationInput::ReadonlyOperationInput { requiredString, optionalString } = dafny_value.as_ref();
+
+    let required_string =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+            &requiredString,
+        );
+
+    let optional_string = match optionalString.as_ref() {
+        simple_refinement_dafny::_Wrappers_Compile::Option::None {} => ::std::option::Option::None,
+        simple_refinement_dafny::_Wrappers_Compile::Option::Some { value } => ::std::option::Option::Some(dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&value)),
+        simple_refinement_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    };
+
+    crate::operation::readonly_operation::ReadonlyOperationInput {
+        required_string,
+        optional_string,
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/readonly_operation/_readonly_operation_output.rs a/TestModels/Refinement/runtimes/rust/src/conversions/readonly_operation/_readonly_operation_output.rs
new file mode 100644
index 00000000..11c748b3
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/readonly_operation/_readonly_operation_output.rs
@@ -0,0 +1,52 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::readonly_operation::ReadonlyOperationOutput,
+) -> ::std::rc::Rc<
+    ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::ReadonlyOperationOutput,
+> {
+    let crate::operation::readonly_operation::ReadonlyOperationOutput {
+        required_string,
+        optional_string,
+    } = value;
+
+    let required_string =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(
+            &required_string,
+        );
+
+    let optional_string = match optional_string {
+        Some(s) => ::simple_refinement_dafny::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+        None => ::simple_refinement_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::ReadonlyOperationOutput::ReadonlyOperationOutput {
+        requiredString: required_string,
+        optionalString: ::std::rc::Rc::new(optional_string),
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::ReadonlyOperationOutput,
+    >,
+) -> crate::operation::readonly_operation::ReadonlyOperationOutput {
+    let ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::ReadonlyOperationOutput::ReadonlyOperationOutput { requiredString, optionalString } = dafny_value.as_ref();
+
+    let required_string =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+            &requiredString,
+        );
+
+    let optional_string = match optionalString.as_ref() {
+        simple_refinement_dafny::_Wrappers_Compile::Option::None {} => ::std::option::Option::None,
+        simple_refinement_dafny::_Wrappers_Compile::Option::Some { value } => ::std::option::Option::Some(dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&value)),
+        simple_refinement_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    };
+
+    crate::operation::readonly_operation::ReadonlyOperationOutput {
+        required_string,
+        optional_string,
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/simple_refinement_config.rs a/TestModels/Refinement/runtimes/rust/src/conversions/simple_refinement_config.rs
new file mode 100644
index 00000000..9d22fe48
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/simple_refinement_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_refinement_config;
diff --git b/TestModels/Refinement/runtimes/rust/src/conversions/simple_refinement_config/_simple_refinement_config.rs a/TestModels/Refinement/runtimes/rust/src/conversions/simple_refinement_config/_simple_refinement_config.rs
new file mode 100644
index 00000000..f0bb21fe
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/conversions/simple_refinement_config/_simple_refinement_config.rs
@@ -0,0 +1,19 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_refinement_config::SimpleRefinementConfig,
+) -> ::std::rc::Rc<
+    ::simple_refinement_dafny::_simple_drefinement_dinternaldafny_dtypes::SimpleRefinementConfig,
+> {
+    ::std::rc::Rc::new(::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::SimpleRefinementConfig::SimpleRefinementConfig {})
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_refinement_dafny::r#_simple_drefinement_dinternaldafny_dtypes::SimpleRefinementConfig,
+    >,
+) -> crate::types::simple_refinement_config::SimpleRefinementConfig {
+    crate::types::simple_refinement_config::SimpleRefinementConfig {}
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/error.rs a/TestModels/Refinement/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/Refinement/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/Refinement/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..cce22d1c
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+
+impl ::dafny_runtime::UpcastObject<dyn ::std::any::Any> for Unhandled {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/lib.rs a/TestModels/Refinement/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..c584447b
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/lib.rs
@@ -0,0 +1,17 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+pub use types::simple_refinement_config::SimpleRefinementConfig;
diff --git b/TestModels/Refinement/runtimes/rust/src/operation.rs a/TestModels/Refinement/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..015f55f3
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation.rs
@@ -0,0 +1,13 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetRefinement` operation.
+pub mod get_refinement;
+
+/// Types for the `OnlyInput` operation.
+pub mod only_input;
+
+/// Types for the `OnlyOutput` operation.
+pub mod only_output;
+
+// /// Types for the `ReadonlyOperation` operation.
+pub mod readonly_operation;
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/get_refinement.rs a/TestModels/Refinement/runtimes/rust/src/operation/get_refinement.rs
new file mode 100644
index 00000000..330ccb43
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/get_refinement.rs
@@ -0,0 +1,147 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetRefinement`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetRefinement;
+impl GetRefinement {
+    /// Creates a new `GetRefinement`
+    pub fn new() -> Self {
+        Self
+    }
+
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_refinement::GetRefinementInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_refinement::GetRefinementOutput,
+        crate::operation::get_refinement::GetRefinementError,
+    > {
+        let inner_input =
+            crate::conversions::get_refinement::_get_refinement_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetRefinement(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_refinement_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_refinement::_get_refinement_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_refinement::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetRefinement` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetRefinementError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetRefinementError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetRefinementError {
+    /// Creates the `GetRefinementError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetRefinementError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetRefinementError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetRefinementError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetRefinementError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetRefinementError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetRefinementError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_refinement::_get_refinement_output::GetRefinementOutput;
+
+pub use crate::operation::get_refinement::_get_refinement_input::GetRefinementInput;
+
+mod _get_refinement_input;
+
+mod _get_refinement_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/get_refinement/_get_refinement_input.rs a/TestModels/Refinement/runtimes/rust/src/operation/get_refinement/_get_refinement_input.rs
new file mode 100644
index 00000000..d5a74762
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/get_refinement/_get_refinement_input.rs
@@ -0,0 +1,90 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetRefinementInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub required_string: ::std::string::String,
+    #[allow(missing_docs)] // documentation missing in model
+    pub optional_string: ::std::option::Option<::std::string::String>,
+}
+impl GetRefinementInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn required_string(&self) -> &str {
+        &self.required_string
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn optional_string(&self) -> ::std::option::Option<&str> {
+        self.optional_string.as_deref()
+    }
+}
+impl GetRefinementInput {
+    /// Creates a new builder-style object to manufacture [`GetRefinementInput`](crate::operation::get_refinement::GetRefinementInput).
+    pub fn builder() -> crate::operation::get_refinement::builders::GetRefinementInputBuilder {
+        crate::operation::get_refinement::builders::GetRefinementInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetRefinementInput`](crate::operation::get_refinement::GetRefinementInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetRefinementInputBuilder {
+    pub(crate) required_string: ::std::option::Option<::std::string::String>,
+    pub(crate) optional_string: ::std::option::Option<::std::string::String>,
+}
+impl GetRefinementInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    /// This field is required.
+    pub fn required_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.required_string = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_required_string(&self) -> &::std::option::Option<::std::string::String> {
+        &self.required_string
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn optional_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.optional_string = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_optional_string(
+        mut self,
+        input: ::std::option::Option<::std::string::String>,
+    ) -> Self {
+        self.optional_string = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_optional_string(&self) -> &::std::option::Option<::std::string::String> {
+        &self.optional_string
+    }
+    /// Consumes the builder and constructs a [`GetRefinementInput`](crate::operation::get_refinement::GetRefinementInput).
+    /// This method will fail if any of the following fields are not set:
+    /// - [`required_string`](crate::operation::get_refinement::builders::GetRefinementInputBuilder::required_string)
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_refinement::GetRefinementInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_refinement::GetRefinementInput {
+            required_string: self.required_string.ok_or_else(|| {
+                ::aws_smithy_types::error::operation::BuildError::missing_field(
+                    "required_string",
+                    "required_string was not specified but it is required when building GetRefinementInput",
+                )
+            })?,
+            optional_string: self.optional_string,
+        })
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/get_refinement/_get_refinement_output.rs a/TestModels/Refinement/runtimes/rust/src/operation/get_refinement/_get_refinement_output.rs
new file mode 100644
index 00000000..b4bc95ee
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/get_refinement/_get_refinement_output.rs
@@ -0,0 +1,99 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetRefinementOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub required_string: ::std::string::String,
+    #[allow(missing_docs)] // documentation missing in model
+    pub optional_string: ::std::option::Option<::std::string::String>,
+}
+impl GetRefinementOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn required_string(&self) -> &str {
+        use std::ops::Deref;
+        self.required_string.deref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn optional_string(&self) -> ::std::option::Option<&str> {
+        self.optional_string.as_deref()
+    }
+}
+impl GetRefinementOutput {
+    /// Creates a new builder-style object to manufacture [`GetRefinementOutput`](crate::operation::get_refinement::GetRefinementOutput).
+    pub fn builder() -> crate::operation::get_refinement::builders::GetRefinementOutputBuilder {
+        crate::operation::get_refinement::builders::GetRefinementOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetRefinementOutput`](crate::operation::get_refinement::GetRefinementOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetRefinementOutputBuilder {
+    pub(crate) required_string: ::std::option::Option<::std::string::String>,
+    pub(crate) optional_string: ::std::option::Option<::std::string::String>,
+}
+impl GetRefinementOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    /// This field is required.
+    pub fn required_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.required_string = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_required_string(
+        mut self,
+        input: ::std::option::Option<::std::string::String>,
+    ) -> Self {
+        self.required_string = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_required_string(&self) -> &::std::option::Option<::std::string::String> {
+        &self.required_string
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn optional_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.optional_string = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_optional_string(
+        mut self,
+        input: ::std::option::Option<::std::string::String>,
+    ) -> Self {
+        self.optional_string = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_optional_string(&self) -> &::std::option::Option<::std::string::String> {
+        &self.optional_string
+    }
+    /// Consumes the builder and constructs a [`GetRefinementOutput`](crate::operation::get_refinement::GetRefinementOutput).
+    /// This method will fail if any of the following fields are not set:
+    /// - [`required_string`](crate::operation::get_refinement::builders::GetRefinementOutputBuilder::required_string)
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_refinement::GetRefinementOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_refinement::GetRefinementOutput {
+            required_string: self.required_string.ok_or_else(|| {
+                ::aws_smithy_types::error::operation::BuildError::missing_field(
+                    "required_string",
+                    "required_string was not specified but it is required when building GetRefinementOutput",
+                )
+            })?,
+            optional_string: self.optional_string,
+        })
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/get_refinement/builders.rs a/TestModels/Refinement/runtimes/rust/src/operation/get_refinement/builders.rs
new file mode 100644
index 00000000..8be68872
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/get_refinement/builders.rs
@@ -0,0 +1,92 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_refinement::_get_refinement_output::GetRefinementOutputBuilder;
+
+pub use crate::operation::get_refinement::_get_refinement_input::GetRefinementInputBuilder;
+
+impl GetRefinementInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_refinement::GetRefinementOutput,
+        crate::operation::get_refinement::GetRefinementError,
+    > {
+        let mut fluent_builder = client.get_refinement();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetRefinement`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetRefinementFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::get_refinement::builders::GetRefinementInputBuilder,
+}
+impl GetRefinementFluentBuilder {
+    /// Creates a new `GetRefinement`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetRefinement as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_refinement::builders::GetRefinementInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_refinement::GetRefinementOutput,
+        crate::operation::get_refinement::GetRefinementError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetRefinement doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_refinement::GetRefinementError::unhandled)?;
+        crate::operation::get_refinement::GetRefinement::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn required_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.inner = self.inner.required_string(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_required_string(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_required_string()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn optional_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.inner = self.inner.optional_string(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_optional_string(
+        mut self,
+        input: ::std::option::Option<::std::string::String>,
+    ) -> Self {
+        self.inner = self.inner.set_optional_string(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_optional_string(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_optional_string()
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/only_input.rs a/TestModels/Refinement/runtimes/rust/src/operation/only_input.rs
new file mode 100644
index 00000000..a60312aa
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/only_input.rs
@@ -0,0 +1,146 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `OnlyInput`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct OnlyInput;
+impl OnlyInput {
+    /// Creates a new `OnlyInput`
+    pub fn new() -> Self {
+        Self
+    }
+
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::only_input::OnlyInputInput,
+    ) -> ::std::result::Result<
+        crate::operation::only_input::OnlyInputOutput,
+        crate::operation::only_input::OnlyInputError,
+    > {
+        let inner_input = crate::conversions::only_input::_only_input_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).OnlyInput(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_refinement_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::only_input::_only_input_output::from_dafny(
+                    *inner_result.value(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::only_input::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `OnlyInput` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum OnlyInputError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-OnlyInputError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl OnlyInputError {
+    /// Creates the `OnlyInputError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `OnlyInputError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for OnlyInputError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for OnlyInputError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for OnlyInputError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for OnlyInputError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for OnlyInputError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::only_input::_only_input_output::OnlyInputOutput;
+
+pub use crate::operation::only_input::_only_input_input::OnlyInputInput;
+
+mod _only_input_input;
+
+mod _only_input_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/only_input/_only_input_input.rs a/TestModels/Refinement/runtimes/rust/src/operation/only_input/_only_input_input.rs
new file mode 100644
index 00000000..616f73d1
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/only_input/_only_input_input.rs
@@ -0,0 +1,47 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct OnlyInputInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl OnlyInputInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl OnlyInputInput {
+    /// Creates a new builder-style object to manufacture [`OnlyInputInput`](crate::operation::only_input::OnlyInputInput).
+    pub fn builder() -> crate::operation::only_input::builders::OnlyInputInputBuilder {
+        crate::operation::only_input::builders::OnlyInputInputBuilder::default()
+    }
+}
+
+/// A builder for [`OnlyInputInput`](crate::operation::only_input::OnlyInputInput).
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
+pub struct OnlyInputInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl OnlyInputInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`OnlyInputInput`](crate::operation::only_input::OnlyInputInput).
+    pub fn build(self) -> ::std::result::Result<crate::operation::only_input::OnlyInputInput, ::aws_smithy_types::error::operation::BuildError> {
+        ::std::result::Result::Ok(crate::operation::only_input::OnlyInputInput { value: self.value })
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/only_input/_only_input_output.rs a/TestModels/Refinement/runtimes/rust/src/operation/only_input/_only_input_output.rs
new file mode 100644
index 00000000..0dd671a0
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/only_input/_only_input_output.rs
@@ -0,0 +1,22 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct OnlyInputOutput {}
+impl OnlyInputOutput {
+    /// Creates a new builder-style object to manufacture [`OnlyInputOutput`](crate::operation::only_input::OnlyInputOutput).
+    pub fn builder() -> crate::operation::only_input::builders::OnlyInputOutputBuilder {
+        crate::operation::only_input::builders::OnlyInputOutputBuilder::default()
+    }
+}
+
+/// A builder for [`OnlyInputOutput`](crate::operation::only_input::OnlyInputOutput).
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
+pub struct OnlyInputOutputBuilder {}
+impl OnlyInputOutputBuilder {
+    /// Consumes the builder and constructs a [`OnlyInputOutput`](crate::operation::only_input::OnlyInputOutput).
+    pub fn build(self) -> crate::operation::only_input::OnlyInputOutput {
+        crate::operation::only_input::OnlyInputOutput {}
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/only_input/builders.rs a/TestModels/Refinement/runtimes/rust/src/operation/only_input/builders.rs
new file mode 100644
index 00000000..9148352c
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/only_input/builders.rs
@@ -0,0 +1,72 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::only_input::_only_input_output::OnlyInputOutputBuilder;
+
+pub use crate::operation::only_input::_only_input_input::OnlyInputInputBuilder;
+
+impl crate::operation::only_input::builders::OnlyInputInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::only_input::OnlyInputOutput,
+        crate::operation::only_input::OnlyInputError,
+    > {
+        let mut fluent_builder = client.only_input();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `OnlyInput`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct OnlyInputFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::only_input::builders::OnlyInputInputBuilder,
+}
+impl OnlyInputFluentBuilder {
+    /// Creates a new `OnlyInputFluentBuilder`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the OnlyInput as a reference.
+    pub fn as_input(&self) -> &crate::operation::only_input::builders::OnlyInputInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::only_input::OnlyInputOutput,
+        crate::operation::only_input::OnlyInputError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since OnlyInput doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::only_input::OnlyInputError::unhandled)?;
+        crate::operation::only_input::OnlyInput::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/only_output.rs a/TestModels/Refinement/runtimes/rust/src/operation/only_output.rs
new file mode 100644
index 00000000..64df3fea
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/only_output.rs
@@ -0,0 +1,143 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `OnlyOutput`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct OnlyOutput;
+impl OnlyOutput {
+    /// Creates a new `OnlyOutput`
+    pub fn new() -> Self {
+        Self
+    }
+
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+    ) -> ::std::result::Result<
+        crate::operation::only_output::OnlyOutputOutput,
+        crate::operation::only_output::OnlyOutputError,
+    > {
+        let inner_result = ::dafny_runtime::md!(client.dafny_client.clone()).OnlyOutput();
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_refinement_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::only_output::_only_output_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::only_output::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `OnlyOutput` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum OnlyOutputError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-OnlyOutputError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl OnlyOutputError {
+    /// Creates the `OnlyOutputError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `OnlyOutputError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for OnlyOutputError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for OnlyOutputError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for OnlyOutputError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for OnlyOutputError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for OnlyOutputError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::only_output::_only_output_output::OnlyOutputOutput;
+
+pub use crate::operation::only_output::_only_output_input::OnlyOutputInput;
+
+mod _only_output_input;
+
+mod _only_output_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/only_output/_only_output_input.rs a/TestModels/Refinement/runtimes/rust/src/operation/only_output/_only_output_input.rs
new file mode 100644
index 00000000..4f81ca75
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/only_output/_only_output_input.rs
@@ -0,0 +1,29 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct OnlyOutputInput {}
+impl OnlyOutputInput {
+    /// Creates a new builder-style object to manufacture [`OnlyOutputInput`](crate::operation::only_output::OnlyOutputInput).
+    pub fn builder() -> crate::operation::only_output::builders::OnlyOutputInputBuilder {
+        crate::operation::only_output::builders::OnlyOutputInputBuilder::default()
+    }
+}
+
+/// A builder for [`OnlyOutputInput`](crate::operation::only_output::OnlyOutputInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct OnlyOutputInputBuilder {}
+impl OnlyOutputInputBuilder {
+    /// Consumes the builder and constructs a [`OnlyOutputInput`](crate::operation::only_output::OnlyOutputInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::only_output::OnlyOutputInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::only_output::OnlyOutputInput {})
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/only_output/_only_output_output.rs a/TestModels/Refinement/runtimes/rust/src/operation/only_output/_only_output_output.rs
new file mode 100644
index 00000000..534e2acd
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/only_output/_only_output_output.rs
@@ -0,0 +1,49 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct OnlyOutputOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl OnlyOutputOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl OnlyOutputOutput {
+    /// Creates a new builder-style object to manufacture [`OnlyOutputOutput`](crate::operation::only_output::OnlyOutputOutput).
+    pub fn builder() -> crate::operation::only_output::builders::OnlyOutputOutputBuilder {
+        crate::operation::only_output::builders::OnlyOutputOutputBuilder::default()
+    }
+}
+
+/// A builder for [`OnlyOutputOutput`](crate::operation::only_output::OnlyOutputOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct OnlyOutputOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl OnlyOutputOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`OnlyOutputOutput`](crate::operation::only_output::OnlyOutputOutput).
+    pub fn build(self) -> crate::operation::only_output::OnlyOutputOutput {
+        crate::operation::only_output::OnlyOutputOutput { value: self.value }
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/only_output/builders.rs a/TestModels/Refinement/runtimes/rust/src/operation/only_output/builders.rs
new file mode 100644
index 00000000..890d49af
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/only_output/builders.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::only_output::_only_output_output::OnlyOutputOutputBuilder;
+
+pub use crate::operation::only_output::_only_output_input::OnlyOutputInputBuilder;
+
+impl crate::operation::only_output::builders::OnlyOutputInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::only_output::OnlyOutputOutput,
+        crate::operation::only_output::OnlyOutputError,
+    > {
+        let mut fluent_builder = client.only_output();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `OnlyOutput`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct OnlyOutputFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::only_output::builders::OnlyOutputInputBuilder,
+}
+
+impl OnlyOutputFluentBuilder {
+    /// Creates a new `OnlyOutputFluentBuilder`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the OnlyOutput as a reference.
+    pub fn as_input(&self) -> &crate::operation::only_output::builders::OnlyOutputInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    ///
+    /// If an error occurs, an `SdkError` will be returned with additional details that
+    /// can be matched against.
+    ///
+    /// By default, any retryable failures will be retried twice. Retry behavior
+    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
+    /// set when configuring the client.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::only_output::OnlyOutputOutput,
+        crate::operation::only_output::OnlyOutputError,
+    > {
+        crate::operation::only_output::OnlyOutput::send(&self.client).await
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation.rs a/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation.rs
new file mode 100644
index 00000000..bb527baf
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation.rs
@@ -0,0 +1,147 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `ReadonlyOperation`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct ReadonlyOperation;
+impl ReadonlyOperation {
+    /// Creates a new `ReadonlyOperation`
+    pub fn new() -> Self {
+        Self
+    }
+
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::readonly_operation::ReadonlyOperationInput,
+    ) -> ::std::result::Result<
+        crate::operation::readonly_operation::ReadonlyOperationOutput,
+        crate::operation::readonly_operation::ReadonlyOperationError,
+    > {
+        let inner_input =
+            crate::conversions::readonly_operation::_readonly_operation_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).ReadonlyOperation(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_refinement_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::readonly_operation::_readonly_operation_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::readonly_operation::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `ReadonlyOperation` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum ReadonlyOperationError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-ReadonlyOperationError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl ReadonlyOperationError {
+    /// Creates the `ReadonlyOperationError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `ReadonlyOperationError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for ReadonlyOperationError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for ReadonlyOperationError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for ReadonlyOperationError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for ReadonlyOperationError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for ReadonlyOperationError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::readonly_operation::_readonly_operation_output::ReadonlyOperationOutput;
+
+pub use crate::operation::readonly_operation::_readonly_operation_input::ReadonlyOperationInput;
+
+mod _readonly_operation_input;
+
+mod _readonly_operation_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation/_readonly_operation_input.rs a/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation/_readonly_operation_input.rs
new file mode 100644
index 00000000..ea363198
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation/_readonly_operation_input.rs
@@ -0,0 +1,99 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct ReadonlyOperationInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub required_string: ::std::string::String,
+    #[allow(missing_docs)] // documentation missing in model
+    pub optional_string: ::std::option::Option<::std::string::String>,
+}
+impl ReadonlyOperationInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn required_string(&self) -> &str {
+        &self.required_string
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn optional_string(&self) -> ::std::option::Option<&str> {
+        self.optional_string.as_deref()
+    }
+}
+impl ReadonlyOperationInput {
+    /// Creates a new builder-style object to manufacture [`ReadonlyOperationInput`](crate::operation::readonly_operation::ReadonlyOperationInput).
+    pub fn builder() -> crate::operation::readonly_operation::builders::ReadonlyOperationInputBuilder
+    {
+        crate::operation::readonly_operation::builders::ReadonlyOperationInputBuilder::default()
+    }
+}
+
+/// A builder for [`ReadonlyOperationInput`](crate::operation::readonly_operation::ReadonlyOperationInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct ReadonlyOperationInputBuilder {
+    pub(crate) required_string: ::std::option::Option<::std::string::String>,
+    pub(crate) optional_string: ::std::option::Option<::std::string::String>,
+}
+impl ReadonlyOperationInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    /// This field is required.
+    pub fn required_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.required_string = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_required_string(
+        mut self,
+        input: ::std::option::Option<::std::string::String>,
+    ) -> Self {
+        self.required_string = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_required_string(&self) -> &::std::option::Option<::std::string::String> {
+        &self.required_string
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn optional_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.optional_string = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_optional_string(
+        mut self,
+        input: ::std::option::Option<::std::string::String>,
+    ) -> Self {
+        self.optional_string = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_optional_string(&self) -> &::std::option::Option<::std::string::String> {
+        &self.optional_string
+    }
+    /// Consumes the builder and constructs a [`ReadonlyOperationInput`](crate::operation::readonly_operation::ReadonlyOperationInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::readonly_operation::ReadonlyOperationInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+                crate::operation::readonly_operation::ReadonlyOperationInput {
+                    required_string: self.required_string.ok_or_else(|| {
+                        ::aws_smithy_types::error::operation::BuildError::missing_field(
+                            "required_string",
+                            "required_string was not specified but it is required when building GetRefinementInput",
+                        )
+                    })?,
+                    optional_string: self.optional_string,
+                },
+            )
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation/_readonly_operation_output.rs a/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation/_readonly_operation_output.rs
new file mode 100644
index 00000000..3859d41f
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation/_readonly_operation_output.rs
@@ -0,0 +1,82 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct ReadonlyOperationOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub required_string: ::std::string::String,
+    #[allow(missing_docs)] // documentation missing in model
+    pub optional_string: ::std::option::Option<::std::string::String>,
+}
+impl ReadonlyOperationOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn required_string(&self) -> &str {
+        use std::ops::Deref;
+        self.required_string.deref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn optional_string(&self) -> ::std::option::Option<&str> {
+        self.optional_string.as_deref()
+    }
+}
+impl ReadonlyOperationOutput {
+    /// Creates a new builder-style object to manufacture [`ReadonlyOperationOutput`](crate::operation::readonly_operation::ReadonlyOperationOutput).
+    pub fn builder() -> crate::operation::readonly_operation::builders::ReadonlyOperationOutputBuilder {
+        crate::operation::readonly_operation::builders::ReadonlyOperationOutputBuilder::default()
+    }
+}
+
+/// A builder for [`ReadonlyOperationOutput`](crate::operation::readonly_operation::ReadonlyOperationOutput).
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
+pub struct ReadonlyOperationOutputBuilder {
+    pub(crate) required_string: ::std::option::Option<::std::string::String>,
+    pub(crate) optional_string: ::std::option::Option<::std::string::String>,
+}
+impl ReadonlyOperationOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    /// This field is required.
+    pub fn required_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.required_string = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_required_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.required_string = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_required_string(&self) -> &::std::option::Option<::std::string::String> {
+        &self.required_string
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn optional_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.optional_string = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_optional_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.optional_string = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_optional_string(&self) -> &::std::option::Option<::std::string::String> {
+        &self.optional_string
+    }
+    /// Consumes the builder and constructs a [`ReadonlyOperationOutput`](crate::operation::readonly_operation::ReadonlyOperationOutput).
+    /// This method will fail if any of the following fields are not set:
+    /// - [`required_string`](crate::operation::readonly_operation::builders::ReadonlyOperationOutputBuilder::required_string)
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<crate::operation::readonly_operation::ReadonlyOperationOutput, ::aws_smithy_types::error::operation::BuildError> {
+        ::std::result::Result::Ok(crate::operation::readonly_operation::ReadonlyOperationOutput {
+            required_string: self.required_string.ok_or_else(|| {
+                ::aws_smithy_types::error::operation::BuildError::missing_field(
+                    "required_string",
+                    "required_string was not specified but it is required when building ReadonlyOperationOutput",
+                )
+            })?,
+            optional_string: self.optional_string,
+        })
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation/builders.rs a/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation/builders.rs
new file mode 100644
index 00000000..153306c8
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/operation/readonly_operation/builders.rs
@@ -0,0 +1,92 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::readonly_operation::_readonly_operation_output::ReadonlyOperationOutputBuilder;
+
+pub use crate::operation::readonly_operation::_readonly_operation_input::ReadonlyOperationInputBuilder;
+
+impl ReadonlyOperationInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::readonly_operation::ReadonlyOperationOutput,
+        crate::operation::readonly_operation::ReadonlyOperationError,
+    > {
+        let mut fluent_builder = client.readonly_operation();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `ReadonlyOperation`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct ReadonlyOperationFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::readonly_operation::builders::ReadonlyOperationInputBuilder,
+}
+impl ReadonlyOperationFluentBuilder {
+    /// Creates a new `ReadonlyOperation`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the ReadonlyOperation as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::readonly_operation::builders::ReadonlyOperationInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::readonly_operation::ReadonlyOperationOutput,
+        crate::operation::readonly_operation::ReadonlyOperationError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since ReadonlyOperation doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::readonly_operation::ReadonlyOperationError::unhandled)?;
+        crate::operation::readonly_operation::ReadonlyOperation::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn required_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.inner = self.inner.required_string(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_required_string(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_required_string()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn optional_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.inner = self.inner.optional_string(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_optional_string(
+        mut self,
+        input: ::std::option::Option<::std::string::String>,
+    ) -> Self {
+        self.inner = self.inner.set_optional_string(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_optional_string(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_optional_string()
+    }
+}
diff --git b/TestModels/Refinement/runtimes/rust/src/types.rs a/TestModels/Refinement/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..2612ec35
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/types.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `SimpleRefinementConfig`
+pub mod simple_refinement_config;
diff --git b/TestModels/Refinement/runtimes/rust/src/types/simple_refinement_config.rs a/TestModels/Refinement/runtimes/rust/src/types/simple_refinement_config.rs
new file mode 100644
index 00000000..1263ea8a
--- /dev/null
+++ a/TestModels/Refinement/runtimes/rust/src/types/simple_refinement_config.rs
@@ -0,0 +1,28 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleRefinementConfig {}
+
+impl SimpleRefinementConfig {
+    pub fn builder() -> SimpleRefinementConfigBuilder {
+        SimpleRefinementConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleRefinementConfigBuilder {}
+
+impl SimpleRefinementConfigBuilder {
+    /// Creates a new `SimpleRefinementConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {}
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        SimpleRefinementConfig,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(SimpleRefinementConfig {})
+    }
+}
