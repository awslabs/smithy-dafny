diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/client.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..1691812f
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/client.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn crate::r#simple::types::timestamp::internaldafny::types::ISimpleTypesTimestampClient>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_timestamp_config::SimpleTimestampConfig,
+    ) -> Result<Self, BuildError> {
+        let inner =
+            crate::simple::types::timestamp::internaldafny::_default::SimpleTimestamp(
+                &crate::conversions::simple_timestamp_config::_simple_timestamp_config::to_dafny(conf),
+            );
+        if matches!(
+            inner.as_ref(),
+            crate::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::upcast_object()(inner.Extract()),
+        })
+    }
+}
+
+mod get_timestamp;
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/client/get_timestamp.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/client/get_timestamp.rs
new file mode 100644
index 00000000..9004f4f3
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/client/get_timestamp.rs
@@ -0,0 +1,15 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetTimestamp`](crate::operation::get_timestamp::builders::GetTimestampFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(DateTime)`](crate::operation::get_timestamp::builders::GetTimestampFluentBuilder::value) / [`set_value(Option<DateTime>)`](crate::operation::get_timestamp::builders::GetTimestampFluentBuilder::set_value):<br>required: **false**<br>(undocumented)<br>
+    /// - On success, responds with [`GetTimestampOutput`](crate::operation::get_timestamp::GetTimestampOutput) with field(s):
+    ///   - [`value(Option<DateTime>)`](crate::operation::get_timestamp::GetTimestampOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetTimestampError>`](crate::operation::get_timestamp::GetTimestampError)
+    pub fn get_timestamp(
+        &self,
+    ) -> crate::operation::get_timestamp::builders::GetTimestampFluentBuilder {
+        crate::operation::get_timestamp::builders::GetTimestampFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..6c19c684
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_timestamp;
+
+pub mod simple_timestamp_config;
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/get_timestamp.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/get_timestamp.rs
new file mode 100644
index 00000000..64d9cf3a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/get_timestamp.rs
@@ -0,0 +1,33 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_timestamp::GetTimestampError,
+) -> ::std::rc::Rc<crate::r#simple::types::timestamp::internaldafny::types::Error>
+{
+    match value {
+    crate::operation::get_timestamp::GetTimestampError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(crate::r#simple::types::timestamp::internaldafny::types::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::timestamp::internaldafny::types::Error,
+    >,
+) -> crate::operation::get_timestamp::GetTimestampError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::r#simple::types::timestamp::internaldafny::types::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_timestamp::GetTimestampError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_timestamp::GetTimestampError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_timestamp_input;
+
+pub mod _get_timestamp_output;
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/get_timestamp/_get_timestamp_input.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/get_timestamp/_get_timestamp_input.rs
new file mode 100644
index 00000000..ec1fde89
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/get_timestamp/_get_timestamp_input.rs
@@ -0,0 +1,39 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_timestamp::GetTimestampInput,
+) -> ::std::rc::Rc<
+    crate::r#simple::types::timestamp::internaldafny::types::GetTimestampInput,
+> {
+    let dafny_value = match value.value {
+        Some(s) => crate::_Wrappers_Compile::Option::Some { value: ::dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s.to_string()) },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::types::timestamp::internaldafny::types::GetTimestampInput::GetTimestampInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::timestamp::internaldafny::types::GetTimestampInput,
+    >,
+) -> Result<
+    crate::operation::get_timestamp::GetTimestampInput,
+    aws_smithy_types::date_time::DateTimeParseError,
+> {
+    let value = match dafny_value.value().as_ref() {
+        crate::_Wrappers_Compile::Option::None {} => None,
+        crate::_Wrappers_Compile::Option::Some { value } => {
+            let value = dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&value);
+            let value = ::aws_smithy_types::DateTime::from_str(
+                &value,
+                aws_smithy_types::date_time::Format::DateTime,
+            )?;
+            Some(value)
+        }
+    };
+
+    Ok(crate::operation::get_timestamp::GetTimestampInput { value })
+}
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/get_timestamp/_get_timestamp_output.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/get_timestamp/_get_timestamp_output.rs
new file mode 100644
index 00000000..958069da
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/get_timestamp/_get_timestamp_output.rs
@@ -0,0 +1,39 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_timestamp::GetTimestampOutput,
+) -> ::std::rc::Rc<
+    crate::r#simple::types::timestamp::internaldafny::types::GetTimestampOutput,
+> {
+    let dafny_value = match value.value {
+        Some(s) => crate::_Wrappers_Compile::Option::Some { value: ::dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s.to_string()) },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::types::timestamp::internaldafny::types::GetTimestampOutput::GetTimestampOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::timestamp::internaldafny::types::GetTimestampOutput,
+    >,
+) -> Result<
+    crate::operation::get_timestamp::GetTimestampOutput,
+    aws_smithy_types::date_time::DateTimeParseError,
+> {
+    let value = match dafny_value.value().as_ref() {
+        crate::_Wrappers_Compile::Option::None {} => None,
+        crate::_Wrappers_Compile::Option::Some { value } => {
+            let value = dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&value);
+            let value = ::aws_smithy_types::DateTime::from_str(
+                &value,
+                aws_smithy_types::date_time::Format::DateTime,
+            )?;
+            Some(value)
+        }
+    };
+
+    Ok(crate::operation::get_timestamp::GetTimestampOutput { value })
+}
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/simple_timestamp_config.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/simple_timestamp_config.rs
new file mode 100644
index 00000000..3ab14490
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/simple_timestamp_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_timestamp_config;
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/simple_timestamp_config/_simple_timestamp_config.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/simple_timestamp_config/_simple_timestamp_config.rs
new file mode 100644
index 00000000..7a6ad17f
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/conversions/simple_timestamp_config/_simple_timestamp_config.rs
@@ -0,0 +1,19 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_timestamp_config::SimpleTimestampConfig,
+) -> ::std::rc::Rc<
+    crate::simple::types::timestamp::internaldafny::types::SimpleTimestampConfig,
+>{
+    ::std::rc::Rc::new(crate::r#simple::types::timestamp::internaldafny::types::SimpleTimestampConfig::SimpleTimestampConfig {})
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::timestamp::internaldafny::types::SimpleTimestampConfig,
+    >,
+) -> crate::types::simple_timestamp_config::SimpleTimestampConfig {
+    crate::types::simple_timestamp_config::SimpleTimestampConfig {}
+}
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/error.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..cce22d1c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+
+impl ::dafny_runtime::UpcastObject<dyn ::std::any::Any> for Unhandled {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/implementation_from_dafny.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/implementation_from_dafny.rs
index 61147902..f16e01c9 100644
--- b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/implementation_from_dafny.rs
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/implementation_from_dafny.rs
@@ -1,6 +1,21 @@
 #![allow(warnings, unconditional_panic)]
 #![allow(nonstandard_style)]
 
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+pub use types::simple_timestamp_config::SimpleTimestampConfig;
+
+
 pub mod r#_Wrappers_Compile {
     pub use dafny_runtime::DafnyPrint;
     pub use std::cmp::Eq;
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/lib.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..4e55b724
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/lib.rs
@@ -0,0 +1,19 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub mod implementation_from_dafny;
+
+pub use client::Client;
+pub use types::simple_timestamp_config::SimpleTimestampConfig;
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..14ae6ca5
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetTimestamp` operation.
+pub mod get_timestamp;
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp.rs
new file mode 100644
index 00000000..27f406c7
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp.rs
@@ -0,0 +1,144 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetTimestamp`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetTimestamp;
+impl GetTimestamp {
+    /// Creates a new `GetTimestamp`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_timestamp::GetTimestampInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_timestamp::GetTimestampOutput,
+        crate::operation::get_timestamp::GetTimestampError,
+    > {
+        let inner_input = crate::conversions::get_timestamp::_get_timestamp_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetTimestamp(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            crate::conversions::get_timestamp::_get_timestamp_output::from_dafny(
+                inner_result.value().clone(),
+            )
+            .map_err(crate::operation::get_timestamp::GetTimestampError::unhandled)
+        } else {
+            Err(crate::conversions::get_timestamp::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetTimestamp` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetTimestampError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetTimestampError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetTimestampError {
+    /// Creates the `GetTimestampError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetTimestampError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetTimestampError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetTimestampError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetTimestampError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetTimestampError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetTimestampError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_timestamp::_get_timestamp_output::GetTimestampOutput;
+
+pub use crate::operation::get_timestamp::_get_timestamp_input::GetTimestampInput;
+
+mod _get_timestamp_input;
+
+mod _get_timestamp_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp/_get_timestamp_input.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp/_get_timestamp_input.rs
new file mode 100644
index 00000000..acf259d3
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp/_get_timestamp_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetTimestampInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::aws_smithy_types::DateTime>,
+}
+impl GetTimestampInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
+        self.value.as_ref()
+    }
+}
+impl GetTimestampInput {
+    /// Creates a new builder-style object to manufacture [`GetTimestampInput`](crate::operation::get_timestamp::GetTimestampInput).
+    pub fn builder() -> crate::operation::get_timestamp::builders::GetTimestampInputBuilder {
+        crate::operation::get_timestamp::builders::GetTimestampInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetTimestampInput`](crate::operation::get_timestamp::GetTimestampInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetTimestampInputBuilder {
+    pub(crate) value: ::std::option::Option<::aws_smithy_types::DateTime>,
+}
+impl GetTimestampInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: ::aws_smithy_types::DateTime) -> Self {
+        self.value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetTimestampInput`](crate::operation::get_timestamp::GetTimestampInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_timestamp::GetTimestampInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_timestamp::GetTimestampInput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp/_get_timestamp_output.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp/_get_timestamp_output.rs
new file mode 100644
index 00000000..711324b3
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp/_get_timestamp_output.rs
@@ -0,0 +1,49 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetTimestampOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::aws_smithy_types::DateTime>,
+}
+impl GetTimestampOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
+        self.value.as_ref()
+    }
+}
+impl GetTimestampOutput {
+    /// Creates a new builder-style object to manufacture [`GetTimestampOutput`](crate::operation::get_timestamp::GetTimestampOutput).
+    pub fn builder() -> crate::operation::get_timestamp::builders::GetTimestampOutputBuilder {
+        crate::operation::get_timestamp::builders::GetTimestampOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetTimestampOutput`](crate::operation::get_timestamp::GetTimestampOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetTimestampOutputBuilder {
+    pub(crate) value: ::std::option::Option<::aws_smithy_types::DateTime>,
+}
+impl GetTimestampOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: ::aws_smithy_types::DateTime) -> Self {
+        self.value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetTimestampOutput`](crate::operation::get_timestamp::GetTimestampOutput).
+    pub fn build(self) -> crate::operation::get_timestamp::GetTimestampOutput {
+        crate::operation::get_timestamp::GetTimestampOutput { value: self.value }
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp/builders.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp/builders.rs
new file mode 100644
index 00000000..6097f5dc
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/operation/get_timestamp/builders.rs
@@ -0,0 +1,72 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_timestamp::_get_timestamp_output::GetTimestampOutputBuilder;
+
+pub use crate::operation::get_timestamp::_get_timestamp_input::GetTimestampInputBuilder;
+
+impl GetTimestampInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_timestamp::GetTimestampOutput,
+        crate::operation::get_timestamp::GetTimestampError,
+    > {
+        let mut fluent_builder = client.get_timestamp();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetTimestamp`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetTimestampFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::get_timestamp::builders::GetTimestampInputBuilder,
+}
+impl GetTimestampFluentBuilder {
+    /// Creates a new `GetTimestamp`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetTimestamp as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_timestamp::builders::GetTimestampInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_timestamp::GetTimestampOutput,
+        crate::operation::get_timestamp::GetTimestampError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetTimestamp doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_timestamp::GetTimestampError::unhandled)?;
+        crate::operation::get_timestamp::GetTimestamp::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::aws_smithy_types::DateTime>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/types.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..b22d67cc
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/types.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `SimpleTimestampConfig`
+pub mod simple_timestamp_config;
diff --git b/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/types/simple_timestamp_config.rs a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/types/simple_timestamp_config.rs
new file mode 100644
index 00000000..611191c9
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleTimestamp/runtimes/rust/src/types/simple_timestamp_config.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleTimestampConfig {}
+
+impl SimpleTimestampConfig {
+    pub fn builder() -> SimpleTimestampConfigBuilder {
+        SimpleTimestampConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleTimestampConfigBuilder {}
+
+impl SimpleTimestampConfigBuilder {
+    /// Creates a new `SimpleTimestampConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {}
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<SimpleTimestampConfig, ::aws_smithy_types::error::operation::BuildError>
+    {
+        ::std::result::Result::Ok(SimpleTimestampConfig {})
+    }
+}
