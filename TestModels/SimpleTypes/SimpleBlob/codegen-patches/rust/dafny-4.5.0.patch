diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..32d3eb4e
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client.rs
@@ -0,0 +1,38 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::ISimpleTypesBlobClient>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_blob_config::SimpleBlobConfig,
+    ) -> Result<Self, BuildError> {
+        let inner = ::simple_blob_dafny::_simple_dtypes_dblob_dinternaldafny::_default::SimpleBlob(
+            &crate::conversions::simple_blob_config::_simple_blob_config::to_dafny(conf),
+        );
+        if matches!(
+            inner.as_ref(),
+            ::simple_blob_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::UpcastTo::<dafny_runtime::Object<(dyn ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::ISimpleTypesBlobClient + 'static)>>::upcast_to(inner.Extract()),
+        })
+    }
+}
+
+mod get_blob;
+
+mod get_blob_known_value;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob.rs
new file mode 100644
index 00000000..c09128d4
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob.rs
@@ -0,0 +1,13 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetBlob`](crate::operation::get_blob::builders::GetBlobFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<::dafny_runtime::Sequence<u8>>)`](crate::operation::get_blob::builders::GetBlobFluentBuilder::value) / [`set_value(Option<::dafny_runtime::Sequence<u8>>)`](crate::operation::get_blob::builders::GetBlobFluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetBlobOutput`](crate::operation::get_blob::GetBlobOutput) with field(s):
+    ///   - [`value(Option<Blob>)`](crate::operation::get_blob::GetBlobOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetBlobError>`](crate::operation::get_blob::GetBlobError)
+    pub fn get_blob(&self) -> crate::operation::get_blob::builders::GetBlobFluentBuilder {
+        crate::operation::get_blob::builders::GetBlobFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob_known_value.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob_known_value.rs
new file mode 100644
index 00000000..a8831d24
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/client/get_blob_known_value.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetBlob`](crate::operation::get_blob_known_value::builders::GetBlobFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<::dafny_runtime::Sequence<u8>>)`](crate::operation::get_blob_known_value::builders::GetBlobFluentBuilder::value) / [`set_value(Option<::dafny_runtime::Sequence<u8>>)`](crate::operation::get_blob_known_value::builders::GetBlobFluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetBlobOutput`](crate::operation::get_blob_known_value::GetBlobOutput) with field(s):
+    ///   - [`value(Option<Blob>)`](crate::operation::get_blob_known_value::GetBlobOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetBlobError>`](crate::operation::get_blob_known_value::GetBlobError)
+    pub fn get_blob_known_value(
+        &self,
+    ) -> crate::operation::get_blob_known_value::builders::GetBlobKnownValueFluentBuilder {
+        crate::operation::get_blob_known_value::builders::GetBlobKnownValueFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..1cd4ad22
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions.rs
@@ -0,0 +1,6 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_blob;
+
+pub mod get_blob_known_value;
+
+pub mod simple_blob_config;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob.rs
new file mode 100644
index 00000000..1ebbffef
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_blob::GetBlobError,
+) -> ::std::rc::Rc<::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::Error> {
+    match value {
+        crate::operation::get_blob::GetBlobError::Unhandled(unhandled) => ::std::rc::Rc::new(
+            ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::Error::Opaque {
+                obj: ::dafny_runtime::UpcastTo::<::dafny_runtime::Object<dyn Any>>::upcast_to(
+                    ::dafny_runtime::object::new(unhandled),
+                ),
+            },
+        ),
+    }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_blob::GetBlobError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_blob::GetBlobError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_blob::GetBlobError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_blob_input;
+
+pub mod _get_blob_output;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_input.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_input.rs
new file mode 100644
index 00000000..961918be
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_input.rs
@@ -0,0 +1,42 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_blob::GetBlobInput,
+) -> ::std::rc::Rc<::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobInput>
+{
+    let dafny_value = match value.value {
+        Some(v) => ::simple_blob_dafny::_Wrappers_Compile::Option::Some {
+            value: ::dafny_runtime::Sequence::from_array(&v),
+        },
+        None => ::simple_blob_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobInput::GetBlobInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobInput,
+    >,
+) -> crate::operation::get_blob::GetBlobInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            ::std::rc::Rc::try_unwrap(dafny_value.value().Extract().to_array())
+                .unwrap_or_else(|rc| (*rc).clone()),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    crate::operation::get_blob::GetBlobInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_output.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_output.rs
new file mode 100644
index 00000000..407033f6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob/_get_blob_output.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_blob::GetBlobOutput,
+) -> ::std::rc::Rc<::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobOutput>
+{
+    let dafny_value = match value.value {
+        Some(b) => ::simple_blob_dafny::_Wrappers_Compile::Option::Some {
+            value: dafny_runtime::dafny_runtime_conversions::vec_to_dafny_sequence(&b, |e| *e),
+        },
+        None => ::simple_blob_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobOutput::GetBlobOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobOutput,
+    >,
+) -> crate::operation::get_blob::GetBlobOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(
+                &dafny_value.value().Extract(),
+                |e| *e,
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_blob::GetBlobOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value.rs
new file mode 100644
index 00000000..6d8eea5f
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value.rs
@@ -0,0 +1,39 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_blob_known_value::GetBlobKnownValueError,
+) -> ::std::rc::Rc<::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::Error> {
+    match value {
+        crate::operation::get_blob_known_value::GetBlobKnownValueError::Unhandled(unhandled) => {
+            ::std::rc::Rc::new(
+                ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::Error::Opaque {
+                    obj: ::dafny_runtime::UpcastTo::<::dafny_runtime::Object<dyn Any>>::upcast_to(
+                        ::dafny_runtime::object::new(unhandled),
+                    ),
+                },
+            )
+        }
+    }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_blob_known_value::GetBlobKnownValueError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_blob_known_value::GetBlobKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_blob_known_value::GetBlobKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_blob_known_value_input;
+
+pub mod _get_blob_known_value_output;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_input.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_input.rs
new file mode 100644
index 00000000..98744281
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_input.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_blob_known_value::GetBlobKnownValueInput,
+) -> ::std::rc::Rc<::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobInput>
+{
+    let dafny_value = match value.value {
+        Some(v) => ::simple_blob_dafny::_Wrappers_Compile::Option::Some {
+            value: ::dafny_runtime::Sequence::from_array(&v),
+        },
+        None => ::simple_blob_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobInput::GetBlobInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobInput,
+    >,
+) -> crate::operation::get_blob_known_value::GetBlobKnownValueInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            ::std::rc::Rc::try_unwrap(dafny_value.value().Extract().to_array())
+                .unwrap_or_else(|rc| (*rc).clone()),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_blob_known_value::GetBlobKnownValueInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_output.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_output.rs
new file mode 100644
index 00000000..c6213615
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/get_blob_known_value/_get_blob_known_value_output.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_blob_known_value::GetBlobKnownValueOutput,
+) -> ::std::rc::Rc<::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobOutput>
+{
+    let dafny_value = match value.value {
+        Some(v) => ::simple_blob_dafny::_Wrappers_Compile::Option::Some {
+            value: dafny_runtime::dafny_runtime_conversions::vec_to_dafny_sequence(&v, |e| *e),
+        },
+        None => ::simple_blob_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobOutput::GetBlobOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::GetBlobOutput,
+    >,
+) -> crate::operation::get_blob_known_value::GetBlobKnownValueOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(
+                &dafny_value.value().Extract(),
+                |e| *e,
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_blob_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_blob_known_value::GetBlobKnownValueOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/simple_blob_config.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/simple_blob_config.rs
new file mode 100644
index 00000000..89599c3f
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/simple_blob_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_blob_config;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/simple_blob_config/_simple_blob_config.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/simple_blob_config/_simple_blob_config.rs
new file mode 100644
index 00000000..7c88a52e
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/conversions/simple_blob_config/_simple_blob_config.rs
@@ -0,0 +1,18 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_blob_config::SimpleBlobConfig,
+) -> ::std::rc::Rc<::simple_blob_dafny::_simple_dtypes_dblob_dinternaldafny_dtypes::SimpleBlobConfig>
+{
+    ::std::rc::Rc::new(::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::SimpleBlobConfig::SimpleBlobConfig {})
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_blob_dafny::r#_simple_dtypes_dblob_dinternaldafny_dtypes::SimpleBlobConfig,
+    >,
+) -> crate::types::simple_blob_config::SimpleBlobConfig {
+    crate::types::simple_blob_config::SimpleBlobConfig {}
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..9d21fbd6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,22 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/lib.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..f9167684
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/lib.rs
@@ -0,0 +1,17 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+pub use types::simple_blob_config::SimpleBlobConfig;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..a72267ed
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation.rs
@@ -0,0 +1,7 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetBlob` operation.
+pub mod get_blob;
+
+/// Types for the `GetBlobKnownValue` operation.
+pub mod get_blob_known_value;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob.rs
new file mode 100644
index 00000000..a41ffce4
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob.rs
@@ -0,0 +1,142 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetBlob`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetBlob;
+impl GetBlob {
+    /// Creates a new `GetBlob`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_blob::GetBlobInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob::GetBlobOutput,
+        crate::operation::get_blob::GetBlobError,
+    > {
+        let inner_input = crate::conversions::get_blob::_get_blob_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(client.dafny_client.clone()).GetBlob(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_blob_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(crate::conversions::get_blob::_get_blob_output::from_dafny(
+                inner_result.value().clone(),
+            ))
+        } else {
+            Err(crate::conversions::get_blob::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetBlob` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetBlobError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetBlobError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetBlobError {
+    /// Creates the `GetBlobError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetBlobError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetBlobError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetBlobError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetBlobError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetBlobError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetBlobError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_blob::_get_blob_output::GetBlobOutput;
+
+pub use crate::operation::get_blob::_get_blob_input::GetBlobInput;
+
+mod _get_blob_input;
+
+mod _get_blob_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_input.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_input.rs
new file mode 100644
index 00000000..6a0d554b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_input.rs
@@ -0,0 +1,60 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetBlobInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+}
+impl GetBlobInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&::std::vec::Vec<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+}
+impl GetBlobInput {
+    /// Creates a new builder-style object to manufacture [`GetBlobInput`](crate::operation::operation::GetBlobInput).
+    pub fn builder() -> crate::operation::get_blob::builders::GetBlobInputBuilder {
+        crate::operation::get_blob::builders::GetBlobInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetBlobInput`](crate::operation::operation::GetBlobInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetBlobInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+}
+impl GetBlobInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> ::std::option::Option<&::std::vec::Vec<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+    /// Consumes the builder and constructs a [`GetBlobInput`](crate::operation::operation::GetBlobInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob::GetBlobInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_blob::GetBlobInput { value: self.value })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_output.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_output.rs
new file mode 100644
index 00000000..b071eb83
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/_get_blob_output.rs
@@ -0,0 +1,66 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetBlobOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+}
+
+impl GetBlobOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&::std::vec::Vec<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+}
+
+impl GetBlobOutput {
+    /// Creates a new builder-style object to manufacture [`GetBlobOutput`](crate::operation::operation::GetBlobOutput).
+    pub fn builder() -> crate::operation::get_blob::builders::GetBlobOutputBuilder {
+        crate::operation::get_blob::builders::GetBlobOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetBlobOutput`](crate::operation::operation::GetBlobOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetBlobOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+}
+
+impl GetBlobOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> ::std::option::Option<&::std::vec::Vec<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+
+    /// Consumes the builder and constructs a [`GetBlobOutput`](crate::operation::operation::GetBlobOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob::GetBlobOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_blob::GetBlobOutput { value: self.value })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/builders.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/builders.rs
new file mode 100644
index 00000000..bedb57b1
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob/builders.rs
@@ -0,0 +1,78 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_blob::_get_blob_output::GetBlobOutputBuilder;
+
+pub use crate::operation::get_blob::_get_blob_input::GetBlobInputBuilder;
+
+impl GetBlobInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob::GetBlobOutput,
+        crate::operation::get_blob::GetBlobError,
+    > {
+        let mut fluent_builder = client.get_blob();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetBlob`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetBlobFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::get_blob::builders::GetBlobInputBuilder,
+}
+impl GetBlobFluentBuilder {
+    /// Creates a new `GetBlob`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetBlob as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_blob::builders::GetBlobInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob::GetBlobOutput,
+        crate::operation::get_blob::GetBlobError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetBlob doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_blob::GetBlobError::unhandled)?;
+        crate::operation::get_blob::GetBlob::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> ::std::option::Option<&::std::vec::Vec<::std::primitive::u8>> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value.rs
new file mode 100644
index 00000000..956d489b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value.rs
@@ -0,0 +1,145 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetBlobKnownValue`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetBlobKnownValue;
+impl GetBlobKnownValue {
+    /// Creates a new `GetBlobKnownValue`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_blob_known_value::GetBlobKnownValueInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob_known_value::GetBlobKnownValueOutput,
+        crate::operation::get_blob_known_value::GetBlobKnownValueError,
+    > {
+        let inner_input =
+            crate::conversions::get_blob_known_value::_get_blob_known_value_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(client.dafny_client.clone()).GetBlob(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_blob_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_blob_known_value::_get_blob_known_value_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_blob_known_value::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetBlobKnownValue` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetBlobKnownValueError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetBlobKnownValueError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetBlobKnownValueError {
+    /// Creates the `GetBlobKnownValueError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetBlobKnownValueError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetBlobKnownValueError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetBlobKnownValueError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetBlobKnownValueError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetBlobKnownValueError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetBlobKnownValueError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_blob_known_value::_get_blob_known_value_output::GetBlobKnownValueOutput;
+
+pub use crate::operation::get_blob_known_value::_get_blob_known_value_input::GetBlobKnownValueInput;
+
+mod _get_blob_known_value_input;
+
+mod _get_blob_known_value_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_input.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_input.rs
new file mode 100644
index 00000000..be28c19c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_input.rs
@@ -0,0 +1,63 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetBlobKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+}
+impl GetBlobKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&::std::vec::Vec<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+}
+impl GetBlobKnownValueInput {
+    /// Creates a new builder-style object to manufacture [`GetBlobKnownValueInput`](crate::operation::operation::GetBlobKnownValueInput).
+    pub fn builder(
+    ) -> crate::operation::get_blob_known_value::builders::GetBlobKnownValueInputBuilder {
+        crate::operation::get_blob_known_value::builders::GetBlobKnownValueInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetBlobKnownValueInput`](crate::operation::operation::GetBlobKnownValueInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetBlobKnownValueInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+}
+impl GetBlobKnownValueInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::vec::Vec<::std::primitive::u8>> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetBlobKnownValueInput`](crate::operation::operation::GetBlobKnownValueInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob_known_value::GetBlobKnownValueInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_blob_known_value::GetBlobKnownValueInput { value: self.value },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_output.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_output.rs
new file mode 100644
index 00000000..794b83ce
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/_get_blob_known_value_output.rs
@@ -0,0 +1,63 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetBlobKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+}
+impl GetBlobKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&::std::vec::Vec<::std::primitive::u8>> {
+        self.value.as_ref()
+    }
+}
+impl GetBlobKnownValueOutput {
+    /// Creates a new builder-style object to manufacture [`GetBlobKnownValueOutput`](crate::operation::operation::GetBlobKnownValueOutput).
+    pub fn builder(
+    ) -> crate::operation::get_blob_known_value::builders::GetBlobKnownValueOutputBuilder {
+        crate::operation::get_blob_known_value::builders::GetBlobKnownValueOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetBlobKnownValueOutput`](crate::operation::operation::GetBlobKnownValueOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetBlobKnownValueOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+}
+impl GetBlobKnownValueOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::vec::Vec<::std::primitive::u8>> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetBlobKnownValueOutput`](crate::operation::operation::GetBlobKnownValueOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob_known_value::GetBlobKnownValueOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_blob_known_value::GetBlobKnownValueOutput { value: self.value },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/builders.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/builders.rs
new file mode 100644
index 00000000..274bb3f3
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/operation/get_blob_known_value/builders.rs
@@ -0,0 +1,80 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_blob_known_value::_get_blob_known_value_output::GetBlobKnownValueOutputBuilder;
+
+pub use crate::operation::get_blob_known_value::_get_blob_known_value_input::GetBlobKnownValueInputBuilder;
+
+impl GetBlobKnownValueInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob_known_value::GetBlobKnownValueOutput,
+        crate::operation::get_blob_known_value::GetBlobKnownValueError,
+    > {
+        let mut fluent_builder = client.get_blob_known_value();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetBlobKnownValue`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetBlobKnownValueFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::get_blob_known_value::builders::GetBlobKnownValueInputBuilder,
+}
+impl GetBlobKnownValueFluentBuilder {
+    /// Creates a new `GetBlobKnownValue`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetBlobKnownValue as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_blob_known_value::builders::GetBlobKnownValueInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_blob_known_value::GetBlobKnownValueOutput,
+        crate::operation::get_blob_known_value::GetBlobKnownValueError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetBlob doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_blob_known_value::GetBlobKnownValueError::unhandled)?;
+        crate::operation::get_blob_known_value::GetBlobKnownValue::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::primitive::u8>>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::vec::Vec<::std::primitive::u8>> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/types.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..1dca219a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/types.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `SimpleBlobConfig`
+pub mod simple_blob_config;
diff --git b/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/types/simple_blob_config.rs a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/types/simple_blob_config.rs
new file mode 100644
index 00000000..0709ccb7
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleBlob/runtimes/rust/src/types/simple_blob_config.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleBlobConfig {}
+
+impl SimpleBlobConfig {
+    pub fn builder() -> SimpleBlobConfigBuilder {
+        SimpleBlobConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleBlobConfigBuilder {}
+
+impl SimpleBlobConfigBuilder {
+    /// Creates a new `SimpleBlobConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {}
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<SimpleBlobConfig, ::aws_smithy_types::error::operation::BuildError>
+    {
+        ::std::result::Result::Ok(SimpleBlobConfig {})
+    }
+}
