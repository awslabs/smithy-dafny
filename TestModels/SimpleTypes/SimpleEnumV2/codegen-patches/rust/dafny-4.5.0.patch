diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..f7bbdbfa
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn crate::r#simple::types::enumv2::internaldafny::types::ISimpleTypesEnumV2Client>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_enum_v2_config::SimpleEnumV2Config,
+    ) -> Result<Self, BuildError> {
+        let inner =
+            crate::simple::types::enumv2::internaldafny::_default::SimpleEnumV2(
+                &crate::conversions::simple_enum_v2_config::_simple_enum_v2_config::to_dafny(conf),
+            );
+        if matches!(
+            inner.as_ref(),
+            crate::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::upcast_object()(inner.Extract()),
+        })
+    }
+}
+
+mod get_enum_v2;
+
+mod get_enum_v2_first_known_value_test;
+mod get_enum_v2_second_known_value_test;
+mod get_enum_v2_third_known_value_test;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2.rs
new file mode 100644
index 00000000..c9a688bd
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2.rs
@@ -0,0 +1,13 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetEnumV2`](crate::operation::get_enum_v2::builders::GetEnumV2FluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(SimpleEnumV2Shape)`](crate::operation::get_enum_v2::builders::GetEnumV2FluentBuilder::value) / [`set_value(Option<SimpleEnumV2Shape>)`](crate::operation::get_enum_v2::builders::GetEnumV2FluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetEnumV2Output`](crate::operation::get_enum_v2::GetEnumV2Output) with field(s):
+    ///   - [`value(Option<EnumV2>)`](crate::operation::get_enum_v2::GetEnumV2Output::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetEnumV2Error>`](crate::operation::get_enum_v2::GetEnumV2Error)
+    pub fn get_enum_v2(&self) -> crate::operation::get_enum_v2::builders::GetEnumV2FluentBuilder {
+        crate::operation::get_enum_v2::builders::GetEnumV2FluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2_first_known_value_test.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2_first_known_value_test.rs
new file mode 100644
index 00000000..ebde767b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2_first_known_value_test.rs
@@ -0,0 +1,18 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetEnumV2`](crate::operation::get_enum_v2_first_known_value::builders::GetEnumV2FluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(SimpleEnumV2Shape)`](crate::operation::get_enum_v2_first_known_value::builders::GetEnumV2FluentBuilder::value) / [`set_value(Option<SimpleEnumV2Shape>)`](crate::operation::get_enum_v2_first_known_value::builders::GetEnumV2FluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetEnumV2Output`](crate::operation::get_enum_v2_first_known_value::GetEnumV2Output) with field(s):
+    ///   - [`value(Option<EnumV2>)`](crate::operation::get_enum_v2_first_known_value::GetEnumV2Output::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetEnumV2Error>`](crate::operation::get_enum_v2_first_known_value::GetEnumV2Error)
+    pub fn get_enum_v2_first_known_value_test(
+        &self,
+    ) -> crate::operation::get_enum_v2_first_known_value_test::builders::GetEnumV2FirstKnownValueTestFluentBuilder
+    {
+        crate::operation::get_enum_v2_first_known_value_test::builders::GetEnumV2FirstKnownValueTestFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2_second_known_value_test.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2_second_known_value_test.rs
new file mode 100644
index 00000000..f4981c29
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2_second_known_value_test.rs
@@ -0,0 +1,18 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetEnumV2`](crate::operation::get_enum_v2_second_known_value::builders::GetEnumV2FluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(SimpleEnumV2Shape)`](crate::operation::get_enum_v2_second_known_value::builders::GetEnumV2FluentBuilder::value) / [`set_value(Option<SimpleEnumV2Shape>)`](crate::operation::get_enum_v2_second_known_value::builders::GetEnumV2FluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetEnumV2Output`](crate::operation::get_enum_v2_second_known_value::GetEnumV2Output) with field(s):
+    ///   - [`value(Option<EnumV2>)`](crate::operation::get_enum_v2_second_known_value::GetEnumV2Output::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetEnumV2Error>`](crate::operation::get_enum_v2_second_known_value::GetEnumV2Error)
+    pub fn get_enum_v2_second_known_value_test(
+        &self,
+    ) -> crate::operation::get_enum_v2_second_known_value_test::builders::GetEnumV2SecondKnownValueTestFluentBuilder
+    {
+        crate::operation::get_enum_v2_second_known_value_test::builders::GetEnumV2SecondKnownValueTestFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2_third_known_value_test.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2_third_known_value_test.rs
new file mode 100644
index 00000000..afc875f3
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/client/get_enum_v2_third_known_value_test.rs
@@ -0,0 +1,18 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetEnumV2`](crate::operation::get_enum_v2_third_known_value::builders::GetEnumV2FluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(SimpleEnumV2Shape)`](crate::operation::get_enum_v2_third_known_value::builders::GetEnumV2FluentBuilder::value) / [`set_value(Option<SimpleEnumV2Shape>)`](crate::operation::get_enum_v2_third_known_value::builders::GetEnumV2FluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetEnumV2Output`](crate::operation::get_enum_v2_third_known_value::GetEnumV2Output) with field(s):
+    ///   - [`value(Option<EnumV2>)`](crate::operation::get_enum_v2_third_known_value::GetEnumV2Output::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetEnumV2Error>`](crate::operation::get_enum_v2_third_known_value::GetEnumV2Error)
+    pub fn get_enum_v2_third_known_value_test(
+        &self,
+    ) -> crate::operation::get_enum_v2_third_known_value_test::builders::GetEnumV2ThirdKnownValueTestFluentBuilder
+    {
+        crate::operation::get_enum_v2_third_known_value_test::builders::GetEnumV2ThirdKnownValueTestFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..323761ef
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions.rs
@@ -0,0 +1,9 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_enum_v2;
+
+pub mod get_enum_v2_first_known_value_test;
+pub mod get_enum_v2_second_known_value_test;
+pub mod get_enum_v2_third_known_value_test;
+
+pub mod simple_enum_v2_config;
+pub mod simple_enum_v2_shape;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2.rs
new file mode 100644
index 00000000..e9b9909b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_enum_v2::GetEnumV2Error,
+) -> ::std::rc::Rc<crate::r#simple::types::enumv2::internaldafny::types::Error> {
+    match value {
+        crate::operation::get_enum_v2::GetEnumV2Error::Unhandled(unhandled) => ::std::rc::Rc::new(
+            crate::r#simple::types::enumv2::internaldafny::types::Error::Opaque {
+                obj: ::dafny_runtime::upcast_object()(
+                    ::dafny_runtime::object::new(unhandled),
+                ),
+            },
+        ),
+    }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::Error,
+    >,
+) -> crate::operation::get_enum_v2::GetEnumV2Error {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::r#simple::types::enumv2::internaldafny::types::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_enum_v2::GetEnumV2Error::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_enum_v2::GetEnumV2Error::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_enum_v2_input;
+
+pub mod _get_enum_v2_output;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2/_get_enum_v2_input.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2/_get_enum_v2_input.rs
new file mode 100644
index 00000000..236bf355
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2/_get_enum_v2_input.rs
@@ -0,0 +1,45 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_v2::GetEnumV2Input,
+) -> ::std::rc::Rc<
+    crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input,
+> {
+    let dafny_value = match value.value {
+        Some(v) => crate::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(
+                crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::to_dafny(&v),
+            ),
+        },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input::GetEnumV2Input {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input,
+    >,
+) -> crate::operation::get_enum_v2::GetEnumV2Input {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::from_dafny(
+                &*dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_v2::GetEnumV2Input { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2/_get_enum_v2_output.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2/_get_enum_v2_output.rs
new file mode 100644
index 00000000..84d950d9
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2/_get_enum_v2_output.rs
@@ -0,0 +1,45 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_v2::GetEnumV2Output,
+) -> ::std::rc::Rc<
+    crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output,
+> {
+    let dafny_value = match value.value {
+        Some(b) => crate::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(
+                crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::to_dafny(&b),
+            ),
+        },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output::GetEnumV2Output {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output,
+    >,
+) -> crate::operation::get_enum_v2::GetEnumV2Output {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::from_dafny(
+                &*dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_v2::GetEnumV2Output { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_first_known_value_test.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_first_known_value_test.rs
new file mode 100644
index 00000000..9e850944
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_first_known_value_test.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestError,
+) -> ::std::rc::Rc<crate::r#simple::types::enumv2::internaldafny::types::Error> {
+    match value {
+    crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::Error,
+    >,
+) -> crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::r#simple::types::enumv2::internaldafny::types::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_enum_v2_first_known_value_test_input;
+
+pub mod _get_enum_v2_first_known_value_test_output;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_input.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_input.rs
new file mode 100644
index 00000000..043d6933
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_input.rs
@@ -0,0 +1,47 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestInput,
+) -> ::std::rc::Rc<
+    crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input,
+> {
+    let dafny_value = match value.value {
+        Some(v) => crate::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(
+                crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::to_dafny(&v),
+            ),
+        },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input::GetEnumV2Input {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input,
+    >,
+) -> crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::from_dafny(
+                &*dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestInput {
+        value,
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_output.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_output.rs
new file mode 100644
index 00000000..7378e117
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_output.rs
@@ -0,0 +1,47 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestOutput,
+) -> ::std::rc::Rc<
+    crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output,
+> {
+    let dafny_value = match value.value {
+        Some(b) => crate::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(
+                crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::to_dafny(&b),
+            ),
+        },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output::GetEnumV2Output {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output,
+    >,
+) -> crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::from_dafny(
+                &*dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestOutput {
+        value,
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_second_known_value_test.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_second_known_value_test.rs
new file mode 100644
index 00000000..b6de63fa
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_second_known_value_test.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestError,
+) -> ::std::rc::Rc<crate::r#simple::types::enumv2::internaldafny::types::Error> {
+    match value {
+    crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::Error,
+    >,
+) -> crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::r#simple::types::enumv2::internaldafny::types::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_enum_v2_second_known_value_test_input;
+
+pub mod _get_enum_v2_second_known_value_test_output;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_input.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_input.rs
new file mode 100644
index 00000000..a7a40bf4
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_input.rs
@@ -0,0 +1,47 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestInput,
+) -> ::std::rc::Rc<
+    crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input,
+> {
+    let dafny_value = match value.value {
+        Some(v) => crate::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(
+                crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::to_dafny(&v),
+            ),
+        },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input::GetEnumV2Input {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input,
+    >,
+) -> crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::from_dafny(
+                &*dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestInput {
+        value,
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_output.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_output.rs
new file mode 100644
index 00000000..07bec266
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_output.rs
@@ -0,0 +1,47 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestOutput,
+) -> ::std::rc::Rc<
+    crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output,
+> {
+    let dafny_value = match value.value {
+        Some(b) => crate::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(
+                crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::to_dafny(&b),
+            ),
+        },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output::GetEnumV2Output {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output,
+    >,
+) -> crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::from_dafny(
+                &*dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestOutput {
+        value,
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_third_known_value_test.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_third_known_value_test.rs
new file mode 100644
index 00000000..a1ddd7da
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_third_known_value_test.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestError,
+) -> ::std::rc::Rc<crate::r#simple::types::enumv2::internaldafny::types::Error> {
+    match value {
+    crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::Error,
+    >,
+) -> crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::r#simple::types::enumv2::internaldafny::types::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_enum_v2_third_known_value_test_input;
+
+pub mod _get_enum_v2_third_known_value_test_output;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_input.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_input.rs
new file mode 100644
index 00000000..8adc054b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_input.rs
@@ -0,0 +1,47 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestInput,
+) -> ::std::rc::Rc<
+    crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input,
+> {
+    let dafny_value = match value.value {
+        Some(v) => crate::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(
+                crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::to_dafny(&v),
+            ),
+        },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input::GetEnumV2Input {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Input,
+    >,
+) -> crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::from_dafny(
+                &*dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestInput {
+        value,
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_output.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_output.rs
new file mode 100644
index 00000000..1607c800
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_output.rs
@@ -0,0 +1,47 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestOutput,
+) -> ::std::rc::Rc<
+    crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output,
+> {
+    let dafny_value = match value.value {
+        Some(b) => crate::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(
+                crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::to_dafny(&b),
+            ),
+        },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output::GetEnumV2Output {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::GetEnumV2Output,
+    >,
+) -> crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_v2_shape::_simple_enum_v2_shape::from_dafny(
+                &*dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestOutput {
+        value,
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_config.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_config.rs
new file mode 100644
index 00000000..3eaacd61
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_enum_v2_config;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_config/_simple_enum_v2_config.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_config/_simple_enum_v2_config.rs
new file mode 100644
index 00000000..f0a68045
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_config/_simple_enum_v2_config.rs
@@ -0,0 +1,19 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_enum_v2_config::SimpleEnumV2Config,
+) -> ::std::rc::Rc<
+    crate::simple::types::enumv2::internaldafny::types::SimpleEnumV2Config,
+> {
+    ::std::rc::Rc::new(crate::r#simple::types::enumv2::internaldafny::types::SimpleEnumV2Config::SimpleEnumV2Config {})
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::types::enumv2::internaldafny::types::SimpleEnumV2Config,
+    >,
+) -> crate::types::simple_enum_v2_config::SimpleEnumV2Config {
+    crate::types::simple_enum_v2_config::SimpleEnumV2Config {}
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_shape.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_shape.rs
new file mode 100644
index 00000000..b4f4a50f
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_shape.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_enum_v2_shape;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_shape/_simple_enum_v2_shape.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_shape/_simple_enum_v2_shape.rs
new file mode 100644
index 00000000..d48a6337
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/conversions/simple_enum_v2_shape/_simple_enum_v2_shape.rs
@@ -0,0 +1,23 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: &crate::types::simple_enum_v2_shape::SimpleEnumV2Shape,
+) -> crate::simple::types::enumv2::internaldafny::types::SimpleEnumV2Shape {
+    match value {
+      crate::types::simple_enum_v2_shape::SimpleEnumV2Shape::FIRST => crate::r#simple::types::enumv2::internaldafny::types::SimpleEnumV2Shape::FIRST {},
+      crate::types::simple_enum_v2_shape::SimpleEnumV2Shape::SECOND => crate::r#simple::types::enumv2::internaldafny::types::SimpleEnumV2Shape::SECOND {},
+      crate::types::simple_enum_v2_shape::SimpleEnumV2Shape::THIRD => crate::r#simple::types::enumv2::internaldafny::types::SimpleEnumV2Shape::THIRD {},
+    }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: &crate::r#simple::types::enumv2::internaldafny::types::SimpleEnumV2Shape,
+) -> crate::types::simple_enum_v2_shape::SimpleEnumV2Shape {
+    match dafny_value {
+    crate::r#simple::types::enumv2::internaldafny::types::SimpleEnumV2Shape::FIRST {} => crate::types::simple_enum_v2_shape::SimpleEnumV2Shape::FIRST,
+    crate::r#simple::types::enumv2::internaldafny::types::SimpleEnumV2Shape::SECOND {} => crate::types::simple_enum_v2_shape::SimpleEnumV2Shape::SECOND,
+    crate::r#simple::types::enumv2::internaldafny::types::SimpleEnumV2Shape::THIRD {} => crate::types::simple_enum_v2_shape::SimpleEnumV2Shape::THIRD,
+  }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/error.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..cce22d1c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+
+impl ::dafny_runtime::UpcastObject<dyn ::std::any::Any> for Unhandled {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/implementation_from_dafny.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/implementation_from_dafny.rs
index a4aa104f..5dcd7a05 100644
--- b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/implementation_from_dafny.rs
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/implementation_from_dafny.rs
@@ -1,6 +1,20 @@
 #![allow(warnings, unconditional_panic)]
 #![allow(nonstandard_style)]
 
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+pub use types::simple_enum_v2_config::SimpleEnumV2Config;
+
 pub mod r#_Wrappers_Compile {
     pub use dafny_runtime::DafnyPrint;
     pub use std::cmp::Eq;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/lib.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..fcb015ba
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/lib.rs
@@ -0,0 +1,19 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub mod implementation_from_dafny;
+
+pub use client::Client;
+pub use types::simple_enum_v2_config::SimpleEnumV2Config;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..565298a1
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation.rs
@@ -0,0 +1,9 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetEnumV2` operation.
+pub mod get_enum_v2;
+
+/// Types for the `GetEnumV2KnownValue` operation.
+pub mod get_enum_v2_first_known_value_test;
+pub mod get_enum_v2_second_known_value_test;
+pub mod get_enum_v2_third_known_value_test;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2.rs
new file mode 100644
index 00000000..f556fbe3
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2.rs
@@ -0,0 +1,145 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetEnumV2`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetEnumV2;
+impl GetEnumV2 {
+    /// Creates a new `GetEnumV2`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_enum_v2::GetEnumV2Input,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2::GetEnumV2Output,
+        crate::operation::get_enum_v2::GetEnumV2Error,
+    > {
+        let inner_input = crate::conversions::get_enum_v2::_get_enum_v2_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetEnumV2(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_enum_v2::_get_enum_v2_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_enum_v2::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetEnumV2` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetEnumV2Error {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetEnumV2Error) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetEnumV2Error {
+    /// Creates the `GetEnumV2Error::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetEnumV2Error::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetEnumV2Error {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetEnumV2Error {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetEnumV2Error {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetEnumV2Error {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetEnumV2Error {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_enum_v2::_get_enum_v2_output::GetEnumV2Output;
+
+pub use crate::operation::get_enum_v2::_get_enum_v2_input::GetEnumV2Input;
+
+mod _get_enum_v2_input;
+
+mod _get_enum_v2_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2/_get_enum_v2_input.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2/_get_enum_v2_input.rs
new file mode 100644
index 00000000..a8420226
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2/_get_enum_v2_input.rs
@@ -0,0 +1,67 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumV2Input {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2Input {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn message(
+        &self,
+    ) -> ::std::option::Option<&crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.value.as_ref()
+    }
+}
+impl GetEnumV2Input {
+    /// Creates a new builder-style object to manufacture [`GetEnumV2Input`](crate::operation::operation::GetEnumV2Input).
+    pub fn builder() -> crate::operation::get_enum_v2::builders::GetEnumV2InputBuilder {
+        crate::operation::get_enum_v2::builders::GetEnumV2InputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumV2Input`](crate::operation::operation::GetEnumV2Input).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumV2InputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2InputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumV2Input`](crate::operation::operation::GetEnumV2Input).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2::GetEnumV2Input,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_enum_v2::GetEnumV2Input {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2/_get_enum_v2_output.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2/_get_enum_v2_output.rs
new file mode 100644
index 00000000..002769f6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2/_get_enum_v2_output.rs
@@ -0,0 +1,73 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumV2Output {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+
+impl GetEnumV2Output {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        &self,
+    ) -> ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.value
+    }
+}
+
+impl GetEnumV2Output {
+    /// Creates a new builder-style object to manufacture [`GetEnumV2Output`](crate::operation::operation::GetEnumV2Output).
+    pub fn builder() -> crate::operation::get_enum_v2::builders::GetEnumV2OutputBuilder {
+        crate::operation::get_enum_v2::builders::GetEnumV2OutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumV2Output`](crate::operation::operation::GetEnumV2Output).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumV2OutputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+
+impl GetEnumV2OutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        &self.value
+    }
+
+    /// Consumes the builder and constructs a [`GetEnumV2Output`](crate::operation::operation::GetEnumV2Output).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2::GetEnumV2Output,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_enum_v2::GetEnumV2Output {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2/builders.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2/builders.rs
new file mode 100644
index 00000000..e742b3d9
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2/builders.rs
@@ -0,0 +1,76 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_enum_v2::_get_enum_v2_input::GetEnumV2InputBuilder;
+pub use crate::operation::get_enum_v2::_get_enum_v2_output::GetEnumV2OutputBuilder;
+
+impl GetEnumV2InputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2::GetEnumV2Output,
+        crate::operation::get_enum_v2::GetEnumV2Error,
+    > {
+        let mut fluent_builder = client.get_enum_v2();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetEnumV2`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetEnumV2FluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::get_enum_v2::builders::GetEnumV2InputBuilder,
+}
+impl GetEnumV2FluentBuilder {
+    /// Creates a new `GetEnumV2`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetEnumV2 as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_enum_v2::builders::GetEnumV2InputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2::GetEnumV2Output,
+        crate::operation::get_enum_v2::GetEnumV2Error,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetEnumV2 doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_enum_v2::GetEnumV2Error::unhandled)?;
+        crate::operation::get_enum_v2::GetEnumV2::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: crate::types::simple_enum_v2_shape::SimpleEnumV2Shape) -> Self {
+        self.inner = self.inner.value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test.rs
new file mode 100644
index 00000000..57c67e00
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test.rs
@@ -0,0 +1,152 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetEnumV2FirstKnownValueTest`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetEnumV2FirstKnownValueTest;
+impl GetEnumV2FirstKnownValueTest {
+    /// Creates a new `GetEnumV2FirstKnownValueTest`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestOutput,
+        crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestError,
+    > {
+        let inner_input =
+            crate::conversions::get_enum_v2_first_known_value_test::_get_enum_v2_first_known_value_test_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetEnumV2(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_enum_v2_first_known_value_test::_get_enum_v2_first_known_value_test_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::get_enum_v2_first_known_value_test::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `GetEnumV2FirstKnownValueTest` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetEnumV2FirstKnownValueTestError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unfirst_known error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetEnumV2FirstKnownValueTestError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetEnumV2FirstKnownValueTestError {
+    /// Creates the `GetEnumV2FirstKnownValueTestError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetEnumV2FirstKnownValueTestError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetEnumV2FirstKnownValueTestError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetEnumV2FirstKnownValueTestError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetEnumV2FirstKnownValueTestError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata
+    for GetEnumV2FirstKnownValueTestError
+{
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError
+    for GetEnumV2FirstKnownValueTestError
+{
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_enum_v2_first_known_value_test::_get_enum_v2_first_known_value_test_output::GetEnumV2FirstKnownValueTestOutput;
+
+pub use crate::operation::get_enum_v2_first_known_value_test::_get_enum_v2_first_known_value_test_input::GetEnumV2FirstKnownValueTestInput;
+
+mod _get_enum_v2_first_known_value_test_input;
+
+mod _get_enum_v2_first_known_value_test_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_input.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_input.rs
new file mode 100644
index 00000000..a367fd77
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_input.rs
@@ -0,0 +1,71 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumV2FirstKnownValueTestInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2FirstKnownValueTestInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        &self,
+    ) -> ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.value
+    }
+}
+impl GetEnumV2FirstKnownValueTestInput {
+    /// Creates a new builder-style object to manufacture [`GetEnumV2FirstKnownValueTestInput`](crate::operation::operation::GetEnumV2FirstKnownValueTestInput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_v2_first_known_value_test::builders::GetEnumV2FirstKnownValueTestInputBuilder
+    {
+        crate::operation::get_enum_v2_first_known_value_test::builders::GetEnumV2FirstKnownValueTestInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumV2FirstKnownValueTestInput`](crate::operation::operation::GetEnumV2FirstKnownValueTestInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumV2FirstKnownValueTestInputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2FirstKnownValueTestInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumV2FirstKnownValueTestInput`](crate::operation::operation::GetEnumV2FirstKnownValueTestInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestInput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_output.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_output.rs
new file mode 100644
index 00000000..f665704a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test/_get_enum_v2_first_known_value_test_output.rs
@@ -0,0 +1,71 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumV2FirstKnownValueTestOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2FirstKnownValueTestOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        &self,
+    ) -> ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.value
+    }
+}
+impl GetEnumV2FirstKnownValueTestOutput {
+    /// Creates a new builder-style object to manufacture [`GetEnumV2FirstKnownValueTestOutput`](crate::operation::operation::GetEnumV2FirstKnownValueTestOutput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_v2_first_known_value_test::builders::GetEnumV2FirstKnownValueTestOutputBuilder
+    {
+        crate::operation::get_enum_v2_first_known_value_test::builders::GetEnumV2FirstKnownValueTestOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumV2FirstKnownValueTestOutput`](crate::operation::operation::GetEnumV2FirstKnownValueTestOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumV2FirstKnownValueTestOutputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2FirstKnownValueTestOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumV2FirstKnownValueTestOutput`](crate::operation::operation::GetEnumV2FirstKnownValueTestOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestOutput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test/builders.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test/builders.rs
new file mode 100644
index 00000000..c88ff6ef
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_first_known_value_test/builders.rs
@@ -0,0 +1,84 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_enum_v2_first_known_value_test::_get_enum_v2_first_known_value_test_input::GetEnumV2FirstKnownValueTestInputBuilder;
+pub use crate::operation::get_enum_v2_first_known_value_test::_get_enum_v2_first_known_value_test_output::GetEnumV2FirstKnownValueTestOutputBuilder;
+
+impl GetEnumV2FirstKnownValueTestInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestOutput,
+        crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestError,
+    > {
+        let mut fluent_builder = client.get_enum_v2_first_known_value_test();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetEnumV2FirstKnownValueTest`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetEnumV2FirstKnownValueTestFluentBuilder {
+    client: crate::client::Client,
+    inner:
+        crate::operation::get_enum_v2_first_known_value_test::builders::GetEnumV2FirstKnownValueTestInputBuilder,
+}
+impl GetEnumV2FirstKnownValueTestFluentBuilder {
+    /// Creates a new `GetEnumV2FirstKnownValueTest`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetEnumV2FirstKnownValueTest as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_enum_v2_first_known_value_test::builders::GetEnumV2FirstKnownValueTestInputBuilder
+    {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestOutput,
+        crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetEnumV2 doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTestError::unhandled)?;
+        crate::operation::get_enum_v2_first_known_value_test::GetEnumV2FirstKnownValueTest::send(
+            &self.client,
+            input,
+        )
+        .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: crate::types::simple_enum_v2_shape::SimpleEnumV2Shape) -> Self {
+        self.inner = self.inner.value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test.rs
new file mode 100644
index 00000000..9fecf26d
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test.rs
@@ -0,0 +1,152 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetEnumV2SecondKnownValueTest`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetEnumV2SecondKnownValueTest;
+impl GetEnumV2SecondKnownValueTest {
+    /// Creates a new `GetEnumV2SecondKnownValueTest`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestOutput,
+        crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestError,
+    > {
+        let inner_input =
+            crate::conversions::get_enum_v2_second_known_value_test::_get_enum_v2_second_known_value_test_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetEnumV2(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_enum_v2_second_known_value_test::_get_enum_v2_second_known_value_test_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::get_enum_v2_second_known_value_test::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `GetEnumV2SecondKnownValueTest` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetEnumV2SecondKnownValueTestError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unsecond_known error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetEnumV2SecondKnownValueTestError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetEnumV2SecondKnownValueTestError {
+    /// Creates the `GetEnumV2SecondKnownValueTestError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetEnumV2SecondKnownValueTestError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetEnumV2SecondKnownValueTestError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetEnumV2SecondKnownValueTestError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetEnumV2SecondKnownValueTestError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata
+    for GetEnumV2SecondKnownValueTestError
+{
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError
+    for GetEnumV2SecondKnownValueTestError
+{
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_enum_v2_second_known_value_test::_get_enum_v2_second_known_value_test_output::GetEnumV2SecondKnownValueTestOutput;
+
+pub use crate::operation::get_enum_v2_second_known_value_test::_get_enum_v2_second_known_value_test_input::GetEnumV2SecondKnownValueTestInput;
+
+mod _get_enum_v2_second_known_value_test_input;
+
+mod _get_enum_v2_second_known_value_test_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_input.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_input.rs
new file mode 100644
index 00000000..d13dfd18
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_input.rs
@@ -0,0 +1,71 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumV2SecondKnownValueTestInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2SecondKnownValueTestInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        &self,
+    ) -> ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.value
+    }
+}
+impl GetEnumV2SecondKnownValueTestInput {
+    /// Creates a new builder-style object to manufacture [`GetEnumV2SecondKnownValueTestInput`](crate::operation::operation::GetEnumV2SecondKnownValueTestInput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_v2_second_known_value_test::builders::GetEnumV2SecondKnownValueTestInputBuilder
+    {
+        crate::operation::get_enum_v2_second_known_value_test::builders::GetEnumV2SecondKnownValueTestInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumV2SecondKnownValueTestInput`](crate::operation::operation::GetEnumV2SecondKnownValueTestInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumV2SecondKnownValueTestInputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2SecondKnownValueTestInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumV2SecondKnownValueTestInput`](crate::operation::operation::GetEnumV2SecondKnownValueTestInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestInput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_output.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_output.rs
new file mode 100644
index 00000000..39218e3a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test/_get_enum_v2_second_known_value_test_output.rs
@@ -0,0 +1,71 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumV2SecondKnownValueTestOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2SecondKnownValueTestOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        &self,
+    ) -> ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.value
+    }
+}
+impl GetEnumV2SecondKnownValueTestOutput {
+    /// Creates a new builder-style object to manufacture [`GetEnumV2SecondKnownValueTestOutput`](crate::operation::operation::GetEnumV2SecondKnownValueTestOutput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_v2_second_known_value_test::builders::GetEnumV2SecondKnownValueTestOutputBuilder
+    {
+        crate::operation::get_enum_v2_second_known_value_test::builders::GetEnumV2SecondKnownValueTestOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumV2SecondKnownValueTestOutput`](crate::operation::operation::GetEnumV2SecondKnownValueTestOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumV2SecondKnownValueTestOutputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2SecondKnownValueTestOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumV2SecondKnownValueTestOutput`](crate::operation::operation::GetEnumV2SecondKnownValueTestOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestOutput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test/builders.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test/builders.rs
new file mode 100644
index 00000000..5137b217
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_second_known_value_test/builders.rs
@@ -0,0 +1,83 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_enum_v2_second_known_value_test::_get_enum_v2_second_known_value_test_input::GetEnumV2SecondKnownValueTestInputBuilder;
+pub use crate::operation::get_enum_v2_second_known_value_test::_get_enum_v2_second_known_value_test_output::GetEnumV2SecondKnownValueTestOutputBuilder;
+
+impl GetEnumV2SecondKnownValueTestInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestOutput,
+        crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestError,
+    > {
+        let mut fluent_builder = client.get_enum_v2_second_known_value_test();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetEnumV2SecondKnownValueTest`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetEnumV2SecondKnownValueTestFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::get_enum_v2_second_known_value_test::builders::GetEnumV2SecondKnownValueTestInputBuilder,
+}
+impl GetEnumV2SecondKnownValueTestFluentBuilder {
+    /// Creates a new `GetEnumV2SecondKnownValueTest`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetEnumV2SecondKnownValueTest as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_enum_v2_second_known_value_test::builders::GetEnumV2SecondKnownValueTestInputBuilder
+    {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestOutput,
+        crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetEnumV2 doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTestError::unhandled)?;
+        crate::operation::get_enum_v2_second_known_value_test::GetEnumV2SecondKnownValueTest::send(
+            &self.client,
+            input,
+        )
+        .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: crate::types::simple_enum_v2_shape::SimpleEnumV2Shape) -> Self {
+        self.inner = self.inner.value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test.rs
new file mode 100644
index 00000000..bf5efb30
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test.rs
@@ -0,0 +1,152 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetEnumV2ThirdKnownValueTest`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetEnumV2ThirdKnownValueTest;
+impl GetEnumV2ThirdKnownValueTest {
+    /// Creates a new `GetEnumV2ThirdKnownValueTest`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestOutput,
+        crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestError,
+    > {
+        let inner_input =
+            crate::conversions::get_enum_v2_third_known_value_test::_get_enum_v2_third_known_value_test_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetEnumV2(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_enum_v2_third_known_value_test::_get_enum_v2_third_known_value_test_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::get_enum_v2_third_known_value_test::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `GetEnumV2ThirdKnownValueTest` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetEnumV2ThirdKnownValueTestError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unthird_known error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetEnumV2ThirdKnownValueTestError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetEnumV2ThirdKnownValueTestError {
+    /// Creates the `GetEnumV2ThirdKnownValueTestError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetEnumV2ThirdKnownValueTestError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetEnumV2ThirdKnownValueTestError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetEnumV2ThirdKnownValueTestError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetEnumV2ThirdKnownValueTestError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata
+    for GetEnumV2ThirdKnownValueTestError
+{
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError
+    for GetEnumV2ThirdKnownValueTestError
+{
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_enum_v2_third_known_value_test::_get_enum_v2_third_known_value_test_output::GetEnumV2ThirdKnownValueTestOutput;
+
+pub use crate::operation::get_enum_v2_third_known_value_test::_get_enum_v2_third_known_value_test_input::GetEnumV2ThirdKnownValueTestInput;
+
+mod _get_enum_v2_third_known_value_test_input;
+
+mod _get_enum_v2_third_known_value_test_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_input.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_input.rs
new file mode 100644
index 00000000..573fb3c1
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_input.rs
@@ -0,0 +1,70 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumV2ThirdKnownValueTestInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2ThirdKnownValueTestInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        &self,
+    ) -> ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.value
+    }
+}
+impl GetEnumV2ThirdKnownValueTestInput {
+    /// Creates a new builder-style object to manufacture [`GetEnumV2ThirdKnownValueTestInput`](crate::operation::operation::GetEnumV2ThirdKnownValueTestInput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_v2_third_known_value_test::builders::GetEnumV2ThirdKnownValueTestInputBuilder
+    {
+        crate::operation::get_enum_v2_third_known_value_test::builders::GetEnumV2ThirdKnownValueTestInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumV2ThirdKnownValueTestInput`](crate::operation::operation::GetEnumV2ThirdKnownValueTestInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumV2ThirdKnownValueTestInputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2ThirdKnownValueTestInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumV2ThirdKnownValueTestInput`](crate::operation::operation::GetEnumV2ThirdKnownValueTestInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestInput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_output.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_output.rs
new file mode 100644
index 00000000..588e636c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test/_get_enum_v2_third_known_value_test_output.rs
@@ -0,0 +1,71 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumV2ThirdKnownValueTestOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2ThirdKnownValueTestOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        &self,
+    ) -> ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.value
+    }
+}
+impl GetEnumV2ThirdKnownValueTestOutput {
+    /// Creates a new builder-style object to manufacture [`GetEnumV2ThirdKnownValueTestOutput`](crate::operation::operation::GetEnumV2ThirdKnownValueTestOutput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_v2_third_known_value_test::builders::GetEnumV2ThirdKnownValueTestOutputBuilder
+    {
+        crate::operation::get_enum_v2_third_known_value_test::builders::GetEnumV2ThirdKnownValueTestOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumV2ThirdKnownValueTestOutput`](crate::operation::operation::GetEnumV2ThirdKnownValueTestOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumV2ThirdKnownValueTestOutputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+}
+impl GetEnumV2ThirdKnownValueTestOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumV2ThirdKnownValueTestOutput`](crate::operation::operation::GetEnumV2ThirdKnownValueTestOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestOutput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test/builders.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test/builders.rs
new file mode 100644
index 00000000..f1bbbe05
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/operation/get_enum_v2_third_known_value_test/builders.rs
@@ -0,0 +1,84 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_enum_v2_third_known_value_test::_get_enum_v2_third_known_value_test_input::GetEnumV2ThirdKnownValueTestInputBuilder;
+pub use crate::operation::get_enum_v2_third_known_value_test::_get_enum_v2_third_known_value_test_output::GetEnumV2ThirdKnownValueTestOutputBuilder;
+
+impl GetEnumV2ThirdKnownValueTestInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestOutput,
+        crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestError,
+    > {
+        let mut fluent_builder = client.get_enum_v2_third_known_value_test();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetEnumV2ThirdKnownValueTest`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetEnumV2ThirdKnownValueTestFluentBuilder {
+    client: crate::client::Client,
+    inner:
+        crate::operation::get_enum_v2_third_known_value_test::builders::GetEnumV2ThirdKnownValueTestInputBuilder,
+}
+impl GetEnumV2ThirdKnownValueTestFluentBuilder {
+    /// Creates a new `GetEnumV2ThirdKnownValueTest`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetEnumV2ThirdKnownValueTest as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_enum_v2_third_known_value_test::builders::GetEnumV2ThirdKnownValueTestInputBuilder
+    {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestOutput,
+        crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetEnumV2 doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTestError::unhandled)?;
+        crate::operation::get_enum_v2_third_known_value_test::GetEnumV2ThirdKnownValueTest::send(
+            &self.client,
+            input,
+        )
+        .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: crate::types::simple_enum_v2_shape::SimpleEnumV2Shape) -> Self {
+        self.inner = self.inner.value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_v2_shape::SimpleEnumV2Shape> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/types.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..951f1e5c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/types.rs
@@ -0,0 +1,5 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `SimpleIntegerConfig`
+pub mod simple_enum_v2_config;
+pub mod simple_enum_v2_shape;
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/types/simple_enum_v2_config.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/types/simple_enum_v2_config.rs
new file mode 100644
index 00000000..37b2d81a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/types/simple_enum_v2_config.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleEnumV2Config {}
+
+impl SimpleEnumV2Config {
+    pub fn builder() -> SimpleEnumV2ConfigBuilder {
+        SimpleEnumV2ConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleEnumV2ConfigBuilder {}
+
+impl SimpleEnumV2ConfigBuilder {
+    /// Creates a new `SimpleEnumV2ConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {}
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<SimpleEnumV2Config, ::aws_smithy_types::error::operation::BuildError>
+    {
+        ::std::result::Result::Ok(SimpleEnumV2Config {})
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/types/simple_enum_v2_shape.rs a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/types/simple_enum_v2_shape.rs
new file mode 100644
index 00000000..b1eb3472
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnumV2/runtimes/rust/src/types/simple_enum_v2_shape.rs
@@ -0,0 +1,6 @@
+#[derive(Debug, PartialEq, Copy, Clone)]
+pub enum SimpleEnumV2Shape {
+    FIRST,
+    SECOND,
+    THIRD,
+}
