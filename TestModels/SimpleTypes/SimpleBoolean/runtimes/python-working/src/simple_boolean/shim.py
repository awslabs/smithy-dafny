# Code generated by smithy-python-codegen DO NOT EDIT.

from .errors import CollectionOfErrors, OpaqueError, ServiceError
from .models import GetBooleanInput, GetBooleanOutput
from .Wrappers import Option_None, Option_Some
from .simple_types_boolean_internaldafny_types import (
    GetBooleanInput_GetBooleanInput as DafnyGetBooleanInput,
    GetBooleanOutput_GetBooleanOutput as DafnyGetBooleanOutput,
)


from . import Wrappers
import asyncio
from . import simple_types_boolean_internaldafny_types
import simple_boolean.client as client_impl

def smithy_error_to_dafny_error(e: ServiceError):
    if isinstance(e, CollectionOfErrors):
        return simple_types_boolean_internaldafny_types.Error_CollectionOfErrors(message=e.message, list=e.list)

    if isinstance(e, OpaqueError):
        return simple_types_boolean_internaldafny_types.Error_Opaque(obj=e.obj)

class SimpleBooleanShim(simple_types_boolean_internaldafny_types.ISimpleTypesBooleanClient):
    def __init__(self, _impl: client_impl) :
        self._impl = _impl

    def GetBoolean(self, input: DafnyGetBooleanInput) -> DafnyGetBooleanOutput:
        unwrapped_request: GetBooleanInput = GetBooleanInput(value=input.value.UnwrapOr(None),
    )
        try:
            wrapped_response = asyncio.run(self._impl.get_boolean(unwrapped_request))
        except ServiceError as e:
            return Wrappers.Result_Failure(smithy_error_to_dafny_error(e))
        return Wrappers.Result_Success(DafnyGetBooleanOutput(value=((Option_Some(wrapped_response.value)) if (wrapped_response.value is not None) else (Option_None())),
    ))
