# Code generated by smithy-python-codegen DO NOT EDIT.

from dataclasses import dataclass
from typing import Any, Callable, TypeAlias, Union

from .dafnyImplInterface import DafnyImplInterface
from .models import GetBooleanInput, GetBooleanOutput
from .Wrappers import Option_None, Option_Some
from .simple_types_boolean_internaldafny_types import (
    SimpleBooleanConfig_SimpleBooleanConfig as DafnySimpleBooleanConfig,
)
from smithy_python.interfaces.interceptor import Interceptor
from smithy_python.interfaces.retries import RetryStrategy


_ServiceInterceptor = Union[Interceptor[GetBooleanInput, GetBooleanOutput, Any, Any]]
@dataclass(kw_only=True)
class Config:
    """Configuration for SimpleTypesBoolean

    :param interceptors: The list of interceptors, which are hooks that are called
    during the execution of a request.

    :param retry_strategy: The retry strategy for issuing retry tokens and computing
    retry delays.

    :param dafnyImplInterface:
    """
    interceptors: list[_ServiceInterceptor] | None = None
    retry_strategy: RetryStrategy | None = None
    dafnyImplInterface: DafnyImplInterface | None = None

# A callable that allows customizing the config object on each request.
Plugin: TypeAlias = Callable[[Config], None]

class SimpleBooleanConfig(Config):
    # TODO: Add types to Config members

    def __init__(self, ):
        super().__init__()

def dafny_config_to_smithy_config(dafny_config) -> SimpleBooleanConfig:
    return SimpleBooleanConfig()

def smithy_config_to_dafny_config(smithy_config) -> DafnySimpleBooleanConfig:
    return DafnySimpleBooleanConfig()
