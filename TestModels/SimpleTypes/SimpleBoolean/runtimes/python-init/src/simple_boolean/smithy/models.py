# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import Any, Dict, Optional


class GetBooleanInput:
    value: Optional[bool]
    def __init__(
        self,
        *,
        value: Optional[bool] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetBooleanInput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetBooleanInput":
        """Creates a GetBooleanInput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return GetBooleanInput(**kwargs)

    def __repr__(self) -> str:
        result = "GetBooleanInput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetBooleanInput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class GetBooleanOutput:
    value: Optional[bool]
    def __init__(
        self,
        *,
        value: Optional[bool] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetBooleanOutput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetBooleanOutput":
        """Creates a GetBooleanOutput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return GetBooleanOutput(**kwargs)

    def __repr__(self) -> str:
        result = "GetBooleanOutput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetBooleanOutput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class Unit:
    pass
