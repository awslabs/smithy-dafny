# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import Any, Dict, Optional


class GetIntegerOperationInput:
    value: Optional[int]
    def __init__(
        self,
        *,
        value: Optional[int] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetIntegerOperationInput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetIntegerOperationInput":
        """Creates a GetIntegerOperationInput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return GetIntegerOperationInput(**kwargs)

    def __repr__(self) -> str:
        result = "GetIntegerOperationInput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetIntegerOperationInput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class GetIntegerOperationOutput:
    value: Optional[int]
    def __init__(
        self,
        *,
        value: Optional[int] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetIntegerOperationOutput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetIntegerOperationOutput":
        """Creates a GetIntegerOperationOutput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return GetIntegerOperationOutput(**kwargs)

    def __repr__(self) -> str:
        result = "GetIntegerOperationOutput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetIntegerOperationOutput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class GetIntegerKnownValueTestInput:
    value: Optional[int]
    def __init__(
        self,
        *,
        value: Optional[int] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetIntegerKnownValueTestInput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetIntegerKnownValueTestInput":
        """Creates a GetIntegerKnownValueTestInput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return GetIntegerKnownValueTestInput(**kwargs)

    def __repr__(self) -> str:
        result = "GetIntegerKnownValueTestInput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetIntegerKnownValueTestInput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class GetIntegerKnownValueTestOutput:
    value: Optional[int]
    def __init__(
        self,
        *,
        value: Optional[int] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetIntegerKnownValueTestOutput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetIntegerKnownValueTestOutput":
        """Creates a GetIntegerKnownValueTestOutput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return GetIntegerKnownValueTestOutput(**kwargs)

    def __repr__(self) -> str:
        result = "GetIntegerKnownValueTestOutput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetIntegerKnownValueTestOutput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )
