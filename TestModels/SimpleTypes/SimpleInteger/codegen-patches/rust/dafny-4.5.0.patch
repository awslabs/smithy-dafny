diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
index b15b3485..44f71829 100644
--- b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
@@ -447,9 +447,7 @@ pub mod r#_SimpleIntegerImpl_Compile {
             ) {
                 panic!("Halt")
             };
-            if !(::dafny_runtime::truncate!(::dafny_runtime::int!(0) - super::r#_StandardLibrary_Compile_dUInt_Compile::_default::INT32_MAX_LIMIT(), i32) <= ::dafny_runtime::truncate!(input.value().UnwrapOr(&(&0).into::<::dafny_runtime::DafnyInt>()/* <i>Coercion from ::dafny_runtime::DafnyInt to T</i> not yet implemented */)/* <i>Coercion from T to ::dafny_runtime::DafnyInt</i> not yet implemented */, i32) && ::dafny_runtime::truncate!(input.value().UnwrapOr(&(&0).into::<::dafny_runtime::DafnyInt>()/* <i>Coercion from ::dafny_runtime::DafnyInt to T</i> not yet implemented */)/* <i>Coercion from T to ::dafny_runtime::DafnyInt</i> not yet implemented */, i32) <= ::dafny_runtime::truncate!(super::r#_StandardLibrary_Compile_dUInt_Compile::_default::INT32_MAX_LIMIT() - ::dafny_runtime::int!(1), i32)) {
-        panic!("Halt")
-      };
+
             let mut res: ::std::rc::Rc<super::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerOutput> = ::std::rc::Rc::new(super::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerOutput::GetIntegerOutput {
             value: input.value().clone()
           });
@@ -489,9 +487,6 @@ pub mod r#_SimpleIntegerImpl_Compile {
             ) {
                 panic!("Halt")
             };
-            if !(::dafny_runtime::truncate!(input.value().UnwrapOr(&(&0).into::<::dafny_runtime::DafnyInt>()/* <i>Coercion from ::dafny_runtime::DafnyInt to T</i> not yet implemented */)/* <i>Coercion from T to ::dafny_runtime::DafnyInt</i> not yet implemented */, i32) == 20) {
-        panic!("Halt")
-      };
             let mut res: ::std::rc::Rc<super::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerOutput> = ::std::rc::Rc::new(super::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerOutput::GetIntegerOutput {
             value: input.value().clone()
           });
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/client.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..090a723d
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/client.rs
@@ -0,0 +1,47 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(Debug)]
+pub(crate) struct Handle {
+    pub(crate) inner: ::dafny_runtime::Object<dyn ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::ISimpleTypesIntegerClient>
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    handle: ::std::sync::Arc<Handle>,
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_integer_config::SimpleIntegerConfig,
+    ) -> Result<Self, BuildError> {
+        let inner =
+            ::simple_integer_dafny::_simple_dtypes_dinteger_dinternaldafny::_default::SimpleInteger(
+                &crate::conversions::simple_integer_config::_simple_integer_config::to_dafny(conf),
+            );
+        if matches!(
+            inner.as_ref(),
+            ::simple_integer_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        let handle = Handle {
+            inner: ::dafny_runtime::UpcastTo::<dafny_runtime::Object<(dyn ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::ISimpleTypesIntegerClient + 'static)>>::upcast_to(inner.Extract()),
+        };
+        Ok(Self {
+            handle: ::std::sync::Arc::new(handle),
+        })
+    }
+}
+
+mod get_integer;
+
+mod get_integer_known_value;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/client/get_integer.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/client/get_integer.rs
new file mode 100644
index 00000000..5e40e704
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/client/get_integer.rs
@@ -0,0 +1,13 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetInteger`](crate::operation::get_integer::builders::GetIntegerFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(i32)`](crate::operation::get_integer::builders::GetIntegerFluentBuilder::value) / [`set_value(Option<i32>)`](crate::operation::get_integer::builders::GetIntegerFluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetIntegerOutput`](crate::operation::get_integer::GetIntegerOutput) with field(s):
+    ///   - [`value(Option<Integer>)`](crate::operation::get_integer::GetIntegerOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetIntegerError>`](crate::operation::get_integer::GetIntegerError)
+    pub fn get_integer(&self) -> crate::operation::get_integer::builders::GetIntegerFluentBuilder {
+        crate::operation::get_integer::builders::GetIntegerFluentBuilder::new(self.handle.clone())
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/client/get_integer_known_value.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/client/get_integer_known_value.rs
new file mode 100644
index 00000000..597963a2
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/client/get_integer_known_value.rs
@@ -0,0 +1,18 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetInteger`](crate::operation::get_integer_known_value::builders::GetIntegerFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(i32)`](crate::operation::get_integer_known_value::builders::GetIntegerFluentBuilder::value) / [`set_value(Option<i32>)`](crate::operation::get_integer_known_value::builders::GetIntegerFluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetIntegerOutput`](crate::operation::get_integer_known_value::GetIntegerOutput) with field(s):
+    ///   - [`value(Option<Integer>)`](crate::operation::get_integer_known_value::GetIntegerOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetIntegerError>`](crate::operation::get_integer_known_value::GetIntegerError)
+    pub fn get_integer_known_value(
+        &self,
+    ) -> crate::operation::get_integer_known_value::builders::GetIntegerKnownValueFluentBuilder
+    {
+        crate::operation::get_integer_known_value::builders::GetIntegerKnownValueFluentBuilder::new(
+            self.handle.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..9d397cd0
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions.rs
@@ -0,0 +1,6 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_integer;
+
+pub mod get_integer_known_value;
+
+pub mod simple_integer_config;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer.rs
new file mode 100644
index 00000000..97230cfc
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_integer::GetIntegerError,
+) -> ::std::rc::Rc<::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::Error> {
+    match value {
+    crate::operation::get_integer::GetIntegerError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::UpcastTo::<::dafny_runtime::Object<dyn Any>>::upcast_to(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_integer::GetIntegerError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_integer::GetIntegerError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_integer::GetIntegerError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_integer_input;
+
+pub mod _get_integer_output;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer/_get_integer_input.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer/_get_integer_input.rs
new file mode 100644
index 00000000..cb6a9cb7
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer/_get_integer_input.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_integer::GetIntegerInput,
+) -> ::std::rc::Rc<
+    ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerInput,
+> {
+    let dafny_value = match value.value {
+        Some(v) => ::simple_integer_dafny::_Wrappers_Compile::Option::Some { value: v },
+        None => ::simple_integer_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerInput::GetIntegerInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerInput,
+    >,
+) -> crate::operation::get_integer::GetIntegerInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_integer_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.value().Extract())
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_integer_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_integer::GetIntegerInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer/_get_integer_output.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer/_get_integer_output.rs
new file mode 100644
index 00000000..b5c8ae8c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer/_get_integer_output.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_integer::GetIntegerOutput,
+) -> ::std::rc::Rc<
+    ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerOutput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => ::simple_integer_dafny::_Wrappers_Compile::Option::Some { value: b },
+        None => ::simple_integer_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerOutput::GetIntegerOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerOutput,
+    >,
+) -> crate::operation::get_integer::GetIntegerOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_integer_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.value().Extract())
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_integer_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_integer::GetIntegerOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer_known_value.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer_known_value.rs
new file mode 100644
index 00000000..2710a5ea
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer_known_value.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_integer_known_value::GetIntegerKnownValueError,
+) -> ::std::rc::Rc<::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::Error> {
+    match value {
+    crate::operation::get_integer_known_value::GetIntegerKnownValueError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::UpcastTo::<::dafny_runtime::Object<dyn Any>>::upcast_to(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_integer_known_value::GetIntegerKnownValueError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_integer_known_value::GetIntegerKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_integer_known_value::GetIntegerKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_integer_known_value_input;
+
+pub mod _get_integer_known_value_output;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer_known_value/_get_integer_known_value_input.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer_known_value/_get_integer_known_value_input.rs
new file mode 100644
index 00000000..873a6ef5
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer_known_value/_get_integer_known_value_input.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_integer_known_value::GetIntegerKnownValueInput,
+) -> ::std::rc::Rc<
+    ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerInput,
+> {
+    let dafny_value = match value.value {
+        Some(v) => ::simple_integer_dafny::_Wrappers_Compile::Option::Some { value: v },
+        None => ::simple_integer_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerInput::GetIntegerInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerInput,
+    >,
+) -> crate::operation::get_integer_known_value::GetIntegerKnownValueInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_integer_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.value().Extract())
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_integer_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_integer_known_value::GetIntegerKnownValueInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer_known_value/_get_integer_known_value_output.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer_known_value/_get_integer_known_value_output.rs
new file mode 100644
index 00000000..35014c3c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/get_integer_known_value/_get_integer_known_value_output.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_integer_known_value::GetIntegerKnownValueOutput,
+) -> ::std::rc::Rc<
+    ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerOutput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => ::simple_integer_dafny::_Wrappers_Compile::Option::Some { value: b },
+        None => ::simple_integer_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerOutput::GetIntegerOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::GetIntegerOutput,
+    >,
+) -> crate::operation::get_integer_known_value::GetIntegerKnownValueOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_integer_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.value().Extract())
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_integer_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_integer_known_value::GetIntegerKnownValueOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/simple_integer_config.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/simple_integer_config.rs
new file mode 100644
index 00000000..f3cdb738
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/simple_integer_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_integer_config;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/simple_integer_config/_simple_integer_config.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/simple_integer_config/_simple_integer_config.rs
new file mode 100644
index 00000000..c97da2f1
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/conversions/simple_integer_config/_simple_integer_config.rs
@@ -0,0 +1,27 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+/*
+pub fn to_internal(&self) -> simple_integer_dafny::_simple_dtypes_dinteger_dinternaldafny_dtypes::SimpleIntegerConfig {
+  simple_integer_dafny::_simple_dtypes_dinteger_dinternaldafny_dtypes::SimpleIntegerConfig::SimpleIntegerConfig {}
+}
+pub fn from_internal(input : &simple_integer_dafny::_simple_dtypes_dinteger_dinternaldafny_dtypes::SimpleIntegerConfig) ->  Self {
+  Self {}
+}
+*/
+
+pub fn to_dafny(
+    value: crate::types::simple_integer_config::SimpleIntegerConfig,
+) -> ::std::rc::Rc<
+    ::simple_integer_dafny::_simple_dtypes_dinteger_dinternaldafny_dtypes::SimpleIntegerConfig,
+> {
+    ::std::rc::Rc::new(::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::SimpleIntegerConfig::SimpleIntegerConfig {})
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_integer_dafny::r#_simple_dtypes_dinteger_dinternaldafny_dtypes::SimpleIntegerConfig,
+    >,
+) -> crate::types::simple_integer_config::SimpleIntegerConfig {
+    crate::types::simple_integer_config::SimpleIntegerConfig {}
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/error.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..9d21fbd6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,22 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/lib.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..df9b21b8
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/lib.rs
@@ -0,0 +1,17 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+pub use types::simple_integer_config::SimpleIntegerConfig;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..faaa994c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation.rs
@@ -0,0 +1,7 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetInteger` operation.
+pub mod get_integer;
+
+/// Types for the `GetIntegerKnownValue` operation.
+pub mod get_integer_known_value;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer.rs
new file mode 100644
index 00000000..2e27e83c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer.rs
@@ -0,0 +1,144 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetInteger`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetInteger;
+impl GetInteger {
+    /// Creates a new `GetInteger`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        handle: &crate::client::Handle,
+        input: crate::operation::get_integer::GetIntegerInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_integer::GetIntegerOutput,
+        crate::operation::get_integer::GetIntegerError,
+    > {
+        let inner_input = crate::conversions::get_integer::_get_integer_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(handle.inner.clone()).GetInteger(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_integer_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_integer::_get_integer_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_integer::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetInteger` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetIntegerError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetIntegerError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetIntegerError {
+    /// Creates the `GetIntegerError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetIntegerError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetIntegerError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetIntegerError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetIntegerError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetIntegerError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetIntegerError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_integer::_get_integer_output::GetIntegerOutput;
+
+pub use crate::operation::get_integer::_get_integer_input::GetIntegerInput;
+
+mod _get_integer_input;
+
+mod _get_integer_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer/_get_integer_input.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer/_get_integer_input.rs
new file mode 100644
index 00000000..ab0c63e0
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer/_get_integer_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetIntegerInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<i32>,
+}
+impl GetIntegerInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&i32> {
+        self.value.as_ref()
+    }
+}
+impl GetIntegerInput {
+    /// Creates a new builder-style object to manufacture [`GetIntegerInput`](crate::operation::operation::GetIntegerInput).
+    pub fn builder() -> crate::operation::get_integer::builders::GetIntegerInputBuilder {
+        crate::operation::get_integer::builders::GetIntegerInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetIntegerInput`](crate::operation::operation::GetIntegerInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetIntegerInputBuilder {
+    pub(crate) value: ::std::option::Option<i32>,
+}
+impl GetIntegerInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<i32>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<i32> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetIntegerInput`](crate::operation::operation::GetIntegerInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_integer::GetIntegerInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_integer::GetIntegerInput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer/_get_integer_output.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer/_get_integer_output.rs
new file mode 100644
index 00000000..49ae58c8
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer/_get_integer_output.rs
@@ -0,0 +1,62 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetIntegerOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<i32>,
+}
+
+impl GetIntegerOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<i32> {
+        self.value
+    }
+}
+
+impl GetIntegerOutput {
+    /// Creates a new builder-style object to manufacture [`GetIntegerOutput`](crate::operation::operation::GetIntegerOutput).
+    pub fn builder() -> crate::operation::get_integer::builders::GetIntegerOutputBuilder {
+        crate::operation::get_integer::builders::GetIntegerOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetIntegerOutput`](crate::operation::operation::GetIntegerOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetIntegerOutputBuilder {
+    pub(crate) value: ::std::option::Option<i32>,
+}
+
+impl GetIntegerOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<i32>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
+        self.value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<i32> {
+        &self.value
+    }
+
+    /// Consumes the builder and constructs a [`GetIntegerOutput`](crate::operation::operation::GetIntegerOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_integer::GetIntegerOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_integer::GetIntegerOutput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer/builders.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer/builders.rs
new file mode 100644
index 00000000..dbcf5215
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer/builders.rs
@@ -0,0 +1,72 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_integer::_get_integer_output::GetIntegerOutputBuilder;
+
+pub use crate::operation::get_integer::_get_integer_input::GetIntegerInputBuilder;
+
+impl GetIntegerInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_integer::GetIntegerOutput,
+        crate::operation::get_integer::GetIntegerError,
+    > {
+        let mut fluent_builder = client.get_integer();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetInteger`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetIntegerFluentBuilder {
+    handle: ::std::sync::Arc<crate::client::Handle>,
+    inner: crate::operation::get_integer::builders::GetIntegerInputBuilder,
+}
+impl GetIntegerFluentBuilder {
+    /// Creates a new `GetInteger`.
+    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
+        Self {
+            handle,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetInteger as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_integer::builders::GetIntegerInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_integer::GetIntegerOutput,
+        crate::operation::get_integer::GetIntegerError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetInteger doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_integer::GetIntegerError::unhandled)?;
+        crate::operation::get_integer::GetInteger::send(&self.handle, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: i32) -> Self {
+        self.inner = self.inner.value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<i32> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value.rs
new file mode 100644
index 00000000..8c009dcd
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value.rs
@@ -0,0 +1,149 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetIntegerKnownValue`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetIntegerKnownValue;
+impl GetIntegerKnownValue {
+    /// Creates a new `GetIntegerKnownValue`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        handle: &crate::client::Handle,
+        input: crate::operation::get_integer_known_value::GetIntegerKnownValueInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_integer_known_value::GetIntegerKnownValueOutput,
+        crate::operation::get_integer_known_value::GetIntegerKnownValueError,
+    > {
+        let inner_input =
+            crate::conversions::get_integer_known_value::_get_integer_known_value_input::to_dafny(
+                input,
+            );
+        let inner_result = ::dafny_runtime::md!(handle.inner.clone()).GetInteger(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_integer_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_integer_known_value::_get_integer_known_value_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::get_integer_known_value::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `GetIntegerKnownValue` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetIntegerKnownValueError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetIntegerKnownValueError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetIntegerKnownValueError {
+    /// Creates the `GetIntegerKnownValueError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetIntegerKnownValueError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetIntegerKnownValueError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetIntegerKnownValueError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetIntegerKnownValueError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetIntegerKnownValueError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetIntegerKnownValueError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_integer_known_value::_get_integer_known_value_output::GetIntegerKnownValueOutput;
+
+pub use crate::operation::get_integer_known_value::_get_integer_known_value_input::GetIntegerKnownValueInput;
+
+mod _get_integer_known_value_input;
+
+mod _get_integer_known_value_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value/_get_integer_known_value_input.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value/_get_integer_known_value_input.rs
new file mode 100644
index 00000000..83a4b829
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value/_get_integer_known_value_input.rs
@@ -0,0 +1,59 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetIntegerKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<i32>,
+}
+impl GetIntegerKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<i32> {
+        self.value
+    }
+}
+impl GetIntegerKnownValueInput {
+    /// Creates a new builder-style object to manufacture [`GetIntegerKnownValueInput`](crate::operation::operation::GetIntegerKnownValueInput).
+    pub fn builder(
+    ) -> crate::operation::get_integer_known_value::builders::GetIntegerKnownValueInputBuilder {
+        crate::operation::get_integer_known_value::builders::GetIntegerKnownValueInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetIntegerKnownValueInput`](crate::operation::operation::GetIntegerKnownValueInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetIntegerKnownValueInputBuilder {
+    pub(crate) value: ::std::option::Option<i32>,
+}
+impl GetIntegerKnownValueInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<i32>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<i32> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetIntegerKnownValueInput`](crate::operation::operation::GetIntegerKnownValueInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_integer_known_value::GetIntegerKnownValueInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_integer_known_value::GetIntegerKnownValueInput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value/_get_integer_known_value_output.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value/_get_integer_known_value_output.rs
new file mode 100644
index 00000000..f80e3163
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value/_get_integer_known_value_output.rs
@@ -0,0 +1,60 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetIntegerKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<i32>,
+}
+impl GetIntegerKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<i32> {
+        self.value
+    }
+}
+impl GetIntegerKnownValueOutput {
+    /// Creates a new builder-style object to manufacture [`GetIntegerKnownValueOutput`](crate::operation::operation::GetIntegerKnownValueOutput).
+    pub fn builder(
+    ) -> crate::operation::get_integer_known_value::builders::GetIntegerKnownValueOutputBuilder
+    {
+        crate::operation::get_integer_known_value::builders::GetIntegerKnownValueOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetIntegerKnownValueOutput`](crate::operation::operation::GetIntegerKnownValueOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetIntegerKnownValueOutputBuilder {
+    pub(crate) value: ::std::option::Option<i32>,
+}
+impl GetIntegerKnownValueOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<i32>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<i32> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetIntegerKnownValueOutput`](crate::operation::operation::GetIntegerKnownValueOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_integer_known_value::GetIntegerKnownValueOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_integer_known_value::GetIntegerKnownValueOutput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value/builders.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value/builders.rs
new file mode 100644
index 00000000..e6388ccb
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/operation/get_integer_known_value/builders.rs
@@ -0,0 +1,78 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_integer_known_value::_get_integer_known_value_output::GetIntegerKnownValueOutputBuilder;
+
+pub use crate::operation::get_integer_known_value::_get_integer_known_value_input::GetIntegerKnownValueInputBuilder;
+
+impl GetIntegerKnownValueInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_integer_known_value::GetIntegerKnownValueOutput,
+        crate::operation::get_integer_known_value::GetIntegerKnownValueError,
+    > {
+        let mut fluent_builder = client.get_integer_known_value();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetIntegerKnownValue`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetIntegerKnownValueFluentBuilder {
+    handle: ::std::sync::Arc<crate::client::Handle>,
+    inner: crate::operation::get_integer_known_value::builders::GetIntegerKnownValueInputBuilder,
+}
+impl GetIntegerKnownValueFluentBuilder {
+    /// Creates a new `GetIntegerKnownValue`.
+    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
+        Self {
+            handle,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetIntegerKnownValue as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_integer_known_value::builders::GetIntegerKnownValueInputBuilder
+    {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_integer_known_value::GetIntegerKnownValueOutput,
+        crate::operation::get_integer_known_value::GetIntegerKnownValueError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetInteger doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(
+                crate::operation::get_integer_known_value::GetIntegerKnownValueError::unhandled,
+            )?;
+        crate::operation::get_integer_known_value::GetIntegerKnownValue::send(&self.handle, input)
+            .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: i32) -> Self {
+        self.inner = self.inner.value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<i32> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/types.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..0ab75543
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/types.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `SimpleIntegerConfig`
+pub mod simple_integer_config;
diff --git b/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/types/simple_integer_config.rs a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/types/simple_integer_config.rs
new file mode 100644
index 00000000..15a5df47
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleInteger/runtimes/rust/src/types/simple_integer_config.rs
@@ -0,0 +1,48 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleIntegerConfig {
+    // XXX : ::std::option::Option<XXXtype>
+}
+
+impl SimpleIntegerConfig {
+    pub fn builder() -> SimpleIntegerConfigBuilder {
+        SimpleIntegerConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleIntegerConfigBuilder {
+    // XXX : ::std::option::Option<XXXtype>
+}
+
+impl SimpleIntegerConfigBuilder {
+    /// Creates a new `SimpleIntegerConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {
+	    // XXX = ::std::option::Option::None
+	    // somewhere get default values for things?
+        }
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<SimpleIntegerConfig, ::aws_smithy_types::error::operation::BuildError>
+    {
+        ::std::result::Result::Ok(SimpleIntegerConfig {})
+    }
+    /*
+        pub fn XXX(mut self, input: impl ::std::convert::Into<XXXtype>) -> Self {
+            self.XXX = ::std::option::Option::Some(input.into());
+            self
+        }
+        #[allow(missing_docs)] // documentation missing in model
+        pub fn set_XXX(mut self, input: ::std::option::Option<XXXtype>) -> Self {
+            self.XXX = input;
+            self
+        }
+        #[allow(missing_docs)] // documentation missing in model
+        pub fn get_XXX(&self) -> &::std::option::Option<XXXtype> {
+            &self.XXX
+        }
+    */
+}
