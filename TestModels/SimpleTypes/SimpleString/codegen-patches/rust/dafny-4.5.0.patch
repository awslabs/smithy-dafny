diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..c85e6fed
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::ISimpleTypesStringClient>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_string_config::SimpleStringConfig,
+    ) -> Result<Self, BuildError> {
+        // If this service had any configuration properties,
+        // they would need converting here too.
+        let inner =
+            crate::implementation_from_dafny::_simple_dtypes_dsmithystring_dinternaldafny::_default::SimpleString(
+                &crate::conversions::simple_string_config::_simple_string_config::to_dafny(conf),
+            );
+        if matches!(
+            inner.as_ref(),
+            crate::implementation_from_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::upcast_object()(inner.Extract()),
+        })
+    }
+}
+
+mod get_string;
+
+mod get_string_known_value;
+
+mod get_string_utf8;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string.rs
new file mode 100644
index 00000000..da262534
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string.rs
@@ -0,0 +1,13 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetString`](crate::operation::get_string::builders::GetStringFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::get_string::builders::GetStringFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_string::builders::GetStringFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetStringOutput`](crate::operation::get_string::GetStringOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::get_string::GetStringOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetStringError>`](crate::operation::get_string::GetStringError)
+    pub fn get_string(&self) -> crate::operation::get_string::builders::GetStringFluentBuilder {
+        crate::operation::get_string::builders::GetStringFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_known_value.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_known_value.rs
new file mode 100644
index 00000000..8c13c6ad
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_known_value.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetStringKnownValue`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetStringKnownValueOutput`](crate::operation::get_string_known_value::GetStringKnownValueOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::get_string_known_value::GetStringKnownValueOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetStringKnownValueError>`](crate::operation::get_string_known_value::GetStringKnownValueError)
+    pub fn get_string_known_value(
+        &self,
+    ) -> crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder {
+        crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_single_value.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_single_value.rs
new file mode 100644
index 00000000..6ce27235
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_single_value.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetStringKnownValue`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetStringKnownValueOutput`](crate::operation::get_string_known_value::GetStringKnownValueOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::get_string_known_value::GetStringKnownValueOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetStringKnownValueError>`](crate::operation::get_string_known_value::GetStringKnownValueError)
+    pub fn get_string_known_value(
+        &self,
+    ) -> crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder {
+        crate::operation::get_string_known_value::builders::GetStringKnownValueFluentBuilder::new(
+            self.handle.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_utf8.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_utf8.rs
new file mode 100644
index 00000000..3a487be0
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/client/get_string_utf8.rs
@@ -0,0 +1,15 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetStringUTF8`](crate::operation::get_string_utf8::builders::GetStringUTF8FluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::get_string_utf8::builders::GetStringUTF8FluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_string_utf8::builders::GetStringUTF8FluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetStringUTF8Output`](crate::operation::get_string_utf8::GetStringUTF8Output) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::get_string_utf8::GetStringUTF8Output::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetStringUTF8Error>`](crate::operation::get_string_utf8::GetStringUTF8Error)
+    pub fn get_string_utf8(
+        &self,
+    ) -> crate::operation::get_string_utf8::builders::GetStringUTF8FluentBuilder {
+        crate::operation::get_string_utf8::builders::GetStringUTF8FluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..0c2b4cf1
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions.rs
@@ -0,0 +1,8 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_string;
+
+pub mod get_string_known_value;
+
+pub mod get_string_utf8;
+
+pub mod simple_string_config;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string.rs
new file mode 100644
index 00000000..a2df3f51
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string.rs
@@ -0,0 +1,33 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_string::GetStringError,
+) -> ::std::rc::Rc<crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>
+{
+    match value {
+    crate::operation::get_string::GetStringError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_string::GetStringError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_string::GetStringError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_string::GetStringError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_string_input;
+
+pub mod _get_string_output;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_input.rs
new file mode 100644
index 00000000..ec391cc1
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string::GetStringInput,
+) -> ::std::rc::Rc<
+    crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => crate::implementation_from_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => crate::implementation_from_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput::GetStringInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+    >,
+) -> crate::operation::get_string::GetStringInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string::GetStringInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_output.rs
new file mode 100644
index 00000000..ac546e50
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string/_get_string_output.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string::GetStringOutput,
+) -> ::std::rc::Rc<
+    crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => crate::implementation_from_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => crate::implementation_from_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>,
+) -> crate::operation::get_string::GetStringOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string::GetStringOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value.rs
new file mode 100644
index 00000000..99b1bf78
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value.rs
@@ -0,0 +1,33 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_string_known_value::GetStringKnownValueError,
+) -> ::std::rc::Rc<crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>
+{
+    match value {
+    crate::operation::get_string_known_value::GetStringKnownValueError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_string_known_value::GetStringKnownValueError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_string_known_value::GetStringKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_string_known_value::GetStringKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_string_known_value_input;
+
+pub mod _get_string_known_value_output;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_input.rs
new file mode 100644
index 00000000..d27ff4ee
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string_known_value::GetStringKnownValueInput,
+) -> ::std::rc::Rc<
+    crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => crate::implementation_from_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => crate::implementation_from_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput::GetStringInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+    >,
+) -> crate::operation::get_string_known_value::GetStringKnownValueInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string_known_value::GetStringKnownValueInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_output.rs
new file mode 100644
index 00000000..86278e6f
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_known_value/_get_string_known_value_output.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string_known_value::GetStringKnownValueOutput,
+) -> ::std::rc::Rc<
+    crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => crate::implementation_from_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => crate::implementation_from_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>,
+) -> crate::operation::get_string_known_value::GetStringKnownValueOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string_known_value::GetStringKnownValueOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8.rs
new file mode 100644
index 00000000..5b983954
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8.rs
@@ -0,0 +1,33 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_string_utf8::GetStringUTF8Error,
+) -> ::std::rc::Rc<crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error>
+{
+    match value {
+    crate::operation::get_string_utf8::GetStringUTF8Error::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_string_utf8::GetStringUTF8Error {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_string_utf8::GetStringUTF8Error::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_string_utf8::GetStringUTF8Error::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_string_utf8_input;
+
+pub mod _get_string_utf8_output;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_input.rs
new file mode 100644
index 00000000..94bece3b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string_utf8::GetStringUTF8Input,
+) -> ::std::rc::Rc<
+    crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => crate::implementation_from_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => crate::implementation_from_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput::GetStringInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringInput,
+    >,
+) -> crate::operation::get_string_utf8::GetStringUTF8Input {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string_utf8::GetStringUTF8Input { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_output.rs
new file mode 100644
index 00000000..13fa503a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/get_string_utf8/_get_string_utf8_output.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_string_utf8::GetStringUTF8Output,
+) -> ::std::rc::Rc<
+    crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput,
+> {
+    let dafny_value = match value.value {
+      Some(s) => crate::implementation_from_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => crate::implementation_from_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput::GetStringOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::GetStringOutput>,
+) -> crate::operation::get_string_utf8::GetStringUTF8Output {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::implementation_from_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_string_utf8::GetStringUTF8Output { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/simple_string_config.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/simple_string_config.rs
new file mode 100644
index 00000000..286313ae
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/simple_string_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_string_config;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/simple_string_config/_simple_string_config.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/simple_string_config/_simple_string_config.rs
new file mode 100644
index 00000000..e2e8a616
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/conversions/simple_string_config/_simple_string_config.rs
@@ -0,0 +1,19 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_string_config::SimpleStringConfig,
+) -> ::std::rc::Rc<
+    crate::implementation_from_dafny::_simple_dtypes_dsmithystring_dinternaldafny_dtypes::SimpleStringConfig,
+> {
+    ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::SimpleStringConfig::SimpleStringConfig {})
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::implementation_from_dafny::r#_simple_dtypes_dsmithystring_dinternaldafny_dtypes::SimpleStringConfig,
+    >,
+) -> crate::types::simple_string_config::SimpleStringConfig {
+    crate::types::simple_string_config::SimpleStringConfig {}
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..cce22d1c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+
+impl ::dafny_runtime::UpcastObject<dyn ::std::any::Any> for Unhandled {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/lib.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..3340c2d9
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/lib.rs
@@ -0,0 +1,19 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub mod implementation_from_dafny;
+
+pub use client::Client;
+pub use types::simple_string_config::SimpleStringConfig;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..af6d5f9c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation.rs
@@ -0,0 +1,10 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetString` operation.
+pub mod get_string;
+
+/// Types for the `GetStringKnownValue` operation.
+pub mod get_string_known_value;
+
+/// Types for the `GetStringUTF8` operation.
+pub mod get_string_utf8;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string.rs
new file mode 100644
index 00000000..10dc7758
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string.rs
@@ -0,0 +1,145 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetString`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetString;
+impl GetString {
+    /// Creates a new `GetString`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_string::GetStringInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_string::GetStringOutput,
+        crate::operation::get_string::GetStringError,
+    > {
+        let inner_input = crate::conversions::get_string::_get_string_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetString(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::implementation_from_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_string::_get_string_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_string::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetString` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetStringError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetStringError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetStringError {
+    /// Creates the `GetStringError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetStringError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetStringError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetStringError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetStringError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetStringError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetStringError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_string::_get_string_output::GetStringOutput;
+
+pub use crate::operation::get_string::_get_string_input::GetStringInput;
+
+mod _get_string_input;
+
+mod _get_string_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_input.rs
new file mode 100644
index 00000000..9c0d47f5
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringInput {
+    /// Creates a new builder-style object to manufacture [`GetStringInput`](crate::operation::operation::GetStringInput).
+    pub fn builder() -> crate::operation::get_string::builders::GetStringInputBuilder {
+        crate::operation::get_string::builders::GetStringInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetStringInput`](crate::operation::operation::GetStringInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringInput`](crate::operation::operation::GetStringInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string::GetStringInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_string::GetStringInput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_output.rs
new file mode 100644
index 00000000..ab6b1fa3
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/_get_string_output.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringOutput {
+    /// Creates a new builder-style object to manufacture [`GetStringOutput`](crate::operation::operation::GetStringOutput).
+    pub fn builder() -> crate::operation::get_string::builders::GetStringOutputBuilder {
+        crate::operation::get_string::builders::GetStringOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetStringOutput`](crate::operation::operation::GetStringOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringOutput`](crate::operation::operation::GetStringOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string::GetStringOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_string::GetStringOutput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/builders.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/builders.rs
new file mode 100644
index 00000000..ec32b2e2
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string/builders.rs
@@ -0,0 +1,72 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_string::_get_string_output::GetStringOutputBuilder;
+
+pub use crate::operation::get_string::_get_string_input::GetStringInputBuilder;
+
+impl GetStringInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_string::GetStringOutput,
+        crate::operation::get_string::GetStringError,
+    > {
+        let mut fluent_builder = client.get_string();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetString`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetStringFluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::get_string::builders::GetStringInputBuilder,
+}
+impl GetStringFluentBuilder {
+    /// Creates a new `GetString`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetString as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_string::builders::GetStringInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string::GetStringOutput,
+        crate::operation::get_string::GetStringError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetString doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_string::GetStringError::unhandled)?;
+        crate::operation::get_string::GetString::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value.rs
new file mode 100644
index 00000000..58d58594
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value.rs
@@ -0,0 +1,146 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetStringKnownValue`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetStringKnownValue;
+impl GetStringKnownValue {
+    /// Creates a new `GetStringKnownValue`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_string_known_value::GetStringKnownValueInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_known_value::GetStringKnownValueOutput,
+        crate::operation::get_string_known_value::GetStringKnownValueError,
+    > {
+        let inner_input =
+            crate::conversions::get_string_known_value::_get_string_known_value_input::to_dafny(
+                input,
+            );
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetStringUTF8(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::implementation_from_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(crate::conversions::get_string_known_value::_get_string_known_value_output::from_dafny(inner_result.value().clone()))
+        } else {
+            Err(
+                crate::conversions::get_string_known_value::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `GetStringKnownValue` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetStringKnownValueError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetStringKnownValueError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetStringKnownValueError {
+    /// Creates the `GetStringKnownValueError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetStringKnownValueError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetStringKnownValueError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetStringKnownValueError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetStringKnownValueError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetStringKnownValueError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetStringKnownValueError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_string_known_value::_get_string_known_value_output::GetStringKnownValueOutput;
+
+pub use crate::operation::get_string_known_value::_get_string_known_value_input::GetStringKnownValueInput;
+
+mod _get_string_known_value_input;
+
+mod _get_string_known_value_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_input.rs
new file mode 100644
index 00000000..b67c3eff
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_input.rs
@@ -0,0 +1,60 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringKnownValueInput {
+    /// Creates a new builder-style object to manufacture [`GetStringKnownValueInput`](crate::operation::operation::GetStringKnownValueInput).
+    pub fn builder(
+    ) -> crate::operation::get_string_known_value::builders::GetStringKnownValueInputBuilder {
+        crate::operation::get_string_known_value::builders::GetStringKnownValueInputBuilder::default(
+        )
+    }
+}
+
+/// A builder for [`GetStringKnownValueInput`](crate::operation::operation::GetStringKnownValueInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringKnownValueInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringKnownValueInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringKnownValueInput`](crate::operation::operation::GetStringKnownValueInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_known_value::GetStringKnownValueInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_string_known_value::GetStringKnownValueInput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_output.rs
new file mode 100644
index 00000000..291e692c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/_get_string_known_value_output.rs
@@ -0,0 +1,59 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringKnownValueOutput {
+    /// Creates a new builder-style object to manufacture [`GetStringKnownValueOutput`](crate::operation::operation::GetStringKnownValueOutput).
+    pub fn builder(
+    ) -> crate::operation::get_string_known_value::builders::GetStringKnownValueOutputBuilder {
+        crate::operation::get_string_known_value::builders::GetStringKnownValueOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetStringKnownValueOutput`](crate::operation::operation::GetStringKnownValueOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringKnownValueOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringKnownValueOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringKnownValueOutput`](crate::operation::operation::GetStringKnownValueOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_known_value::GetStringKnownValueOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_string_known_value::GetStringKnownValueOutput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/builders.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/builders.rs
new file mode 100644
index 00000000..82b4c7fb
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_known_value/builders.rs
@@ -0,0 +1,77 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_string_known_value::_get_string_known_value_output::GetStringKnownValueOutputBuilder;
+
+pub use crate::operation::get_string_known_value::_get_string_known_value_input::GetStringKnownValueInputBuilder;
+
+impl GetStringKnownValueInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_known_value::GetStringKnownValueOutput,
+        crate::operation::get_string_known_value::GetStringKnownValueError,
+    > {
+        let mut fluent_builder = client.get_string_known_value();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetStringKnownValue`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetStringKnownValueFluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::get_string_known_value::builders::GetStringKnownValueInputBuilder,
+}
+impl GetStringKnownValueFluentBuilder {
+    /// Creates a new `GetStringKnownValue`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetStringKnownValue as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_string_known_value::builders::GetStringKnownValueInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_known_value::GetStringKnownValueOutput,
+        crate::operation::get_string_known_value::GetStringKnownValueError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetString doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(
+                crate::operation::get_string_known_value::GetStringKnownValueError::unhandled,
+            )?;
+        crate::operation::get_string_known_value::GetStringKnownValue::send(&self.client, input)
+            .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8.rs
new file mode 100644
index 00000000..08e8cb25
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8.rs
@@ -0,0 +1,146 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetStringUTF8`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetStringUTF8;
+impl GetStringUTF8 {
+    /// Creates a new `GetStringUTF8`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_string_utf8::GetStringUTF8Input,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_utf8::GetStringUTF8Output,
+        crate::operation::get_string_utf8::GetStringUTF8Error,
+    > {
+        let inner_input =
+            crate::conversions::get_string_utf8::_get_string_utf8_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetStringUTF8(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::implementation_from_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_string_utf8::_get_string_utf8_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_string_utf8::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetStringUTF8` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetStringUTF8Error {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetStringUTF8Error) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetStringUTF8Error {
+    /// Creates the `GetStringUTF8Error::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetStringUTF8Error::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetStringUTF8Error {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetStringUTF8Error {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetStringUTF8Error {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetStringUTF8Error {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetStringUTF8Error {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_string_utf8::_get_string_utf8_output::GetStringUTF8Output;
+
+pub use crate::operation::get_string_utf8::_get_string_utf8_input::GetStringUTF8Input;
+
+mod _get_string_utf8_input;
+
+mod _get_string_utf8_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_input.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_input.rs
new file mode 100644
index 00000000..a448688e
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringUTF8Input {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringUTF8Input {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringUTF8Input {
+    /// Creates a new builder-style object to manufacture [`GetStringUTF8Input`](crate::operation::operation::GetStringUTF8Input).
+    pub fn builder() -> crate::operation::get_string_utf8::builders::GetStringUTF8InputBuilder {
+        crate::operation::get_string_utf8::builders::GetStringUTF8InputBuilder::default()
+    }
+}
+
+/// A builder for [`GetStringUTF8Input`](crate::operation::operation::GetStringUTF8Input).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringUTF8InputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringUTF8InputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringUTF8Input`](crate::operation::operation::GetStringUTF8Input).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_utf8::GetStringUTF8Input,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_string_utf8::GetStringUTF8Input {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_output.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_output.rs
new file mode 100644
index 00000000..2c8dca6a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/_get_string_utf8_output.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetStringUTF8Output {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringUTF8Output {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetStringUTF8Output {
+    /// Creates a new builder-style object to manufacture [`GetStringUTF8Output`](crate::operation::operation::GetStringUTF8Output).
+    pub fn builder() -> crate::operation::get_string_utf8::builders::GetStringUTF8OutputBuilder {
+        crate::operation::get_string_utf8::builders::GetStringUTF8OutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetStringUTF8Output`](crate::operation::operation::GetStringUTF8Output).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetStringUTF8OutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetStringUTF8OutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetStringUTF8Output`](crate::operation::operation::GetStringUTF8Output).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_utf8::GetStringUTF8Output,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_string_utf8::GetStringUTF8Output {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/builders.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/builders.rs
new file mode 100644
index 00000000..26bf3d9e
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/operation/get_string_utf8/builders.rs
@@ -0,0 +1,74 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_string_utf8::_get_string_utf8_output::GetStringUTF8OutputBuilder;
+
+pub use crate::operation::get_string_utf8::_get_string_utf8_input::GetStringUTF8InputBuilder;
+
+impl GetStringUTF8InputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_utf8::GetStringUTF8Output,
+        crate::operation::get_string_utf8::GetStringUTF8Error,
+    > {
+        let mut fluent_builder = client.get_string_utf8();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetStringUTF8`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetStringUTF8FluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::get_string_utf8::builders::GetStringUTF8InputBuilder,
+}
+impl GetStringUTF8FluentBuilder {
+    /// Creates a new `GetStringUTF8`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetStringUTF8 as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_string_utf8::builders::GetStringUTF8InputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_string_utf8::GetStringUTF8Output,
+        crate::operation::get_string_utf8::GetStringUTF8Error,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetString doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_string_utf8::GetStringUTF8Error::unhandled)?;
+        crate::operation::get_string_utf8::GetStringUTF8::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/types.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..7ec74609
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/types.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `SimpleStringConfig`
+pub mod simple_string_config;
diff --git b/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/types/simple_string_config.rs a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/types/simple_string_config.rs
new file mode 100644
index 00000000..6b9ec61a
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleString/runtimes/rust/src/types/simple_string_config.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleStringConfig {}
+
+impl SimpleStringConfig {
+    pub fn builder() -> SimpleStringConfigBuilder {
+        SimpleStringConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleStringConfigBuilder {}
+
+impl SimpleStringConfigBuilder {
+    /// Creates a new `SimpleStringConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {}
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<SimpleStringConfig, ::aws_smithy_types::error::operation::BuildError>
+    {
+        ::std::result::Result::Ok(SimpleStringConfig {})
+    }
+}
