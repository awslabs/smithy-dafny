diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
index d0133896..03d5c0e9 100644
--- b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
@@ -103,26 +103,12 @@ pub mod r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes {
     #[derive(PartialEq, Clone)]
     pub enum GetEnumInput {
         GetEnumInput {
-            value: ::std::rc::Rc<
-                super::r#_Wrappers_Compile::Option<
-                    ::std::rc::Rc<
-                        super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape,
-                    >,
-                >,
-            >,
+            value: ::std::rc::Rc<super::r#_Wrappers_Compile::Option<super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape>>,
         },
     }
 
     impl GetEnumInput {
-        pub fn value(
-            &self,
-        ) -> &::std::rc::Rc<
-            super::r#_Wrappers_Compile::Option<
-                ::std::rc::Rc<
-                    super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape,
-                >,
-            >,
-        > {
+        pub fn value(&self) -> &::std::rc::Rc<super::r#_Wrappers_Compile::Option<super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape>> {
             match self {
                 GetEnumInput::GetEnumInput { value } => value,
             }
@@ -179,26 +165,12 @@ pub mod r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes {
     #[derive(PartialEq, Clone)]
     pub enum GetEnumOutput {
         GetEnumOutput {
-            value: ::std::rc::Rc<
-                super::r#_Wrappers_Compile::Option<
-                    ::std::rc::Rc<
-                        super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape,
-                    >,
-                >,
-            >,
+            value: ::std::rc::Rc<super::r#_Wrappers_Compile::Option<super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape>>,
         },
     }
 
     impl GetEnumOutput {
-        pub fn value(
-            &self,
-        ) -> &::std::rc::Rc<
-            super::r#_Wrappers_Compile::Option<
-                ::std::rc::Rc<
-                    super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape,
-                >,
-            >,
-        > {
+        pub fn value(&self) -> &::std::rc::Rc<super::r#_Wrappers_Compile::Option<super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape>> {
             match self {
                 GetEnumOutput::GetEnumOutput { value } => value,
             }
@@ -304,9 +276,9 @@ pub mod r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes {
 
     #[derive(PartialEq, Clone)]
     pub enum SimpleEnumShape {
-        FIRST {},
-        SECOND {},
-        THIRD {},
+        FIRST,
+        SECOND,
+        THIRD,
     }
 
     impl SimpleEnumShape {}
@@ -602,7 +574,7 @@ pub mod r#_SimpleEnumImpl_Compile {
             ) {
                 panic!("Halt")
             };
-            if !(input.value().value().clone() == ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::FIRST {})) {
+            if !(input.value().value().clone() == super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::FIRST) {
         panic!("Halt")
       };
             let mut res: ::std::rc::Rc<super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput> = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput::GetEnumOutput {
@@ -617,7 +589,7 @@ pub mod r#_SimpleEnumImpl_Compile {
             ) {
                 panic!("Halt")
             };
-            if !(res.value().value().clone() == ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::FIRST {})) {
+            if !(res.value().value().clone() == super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::FIRST) {
         panic!("Halt")
       };
             output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
@@ -653,7 +625,7 @@ pub mod r#_SimpleEnumImpl_Compile {
             ) {
                 panic!("Halt")
             };
-            if !(input.value().value().clone() == ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::SECOND {})) {
+            if !(input.value().value().clone() == super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::SECOND) {
         panic!("Halt")
       };
             let mut res: ::std::rc::Rc<super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput> = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput::GetEnumOutput {
@@ -668,7 +640,7 @@ pub mod r#_SimpleEnumImpl_Compile {
             ) {
                 panic!("Halt")
             };
-            if !(res.value().value().clone() == ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::SECOND {})) {
+            if !(res.value().value().clone() == super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::SECOND) {
         panic!("Halt")
       };
             output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
@@ -704,7 +676,7 @@ pub mod r#_SimpleEnumImpl_Compile {
             ) {
                 panic!("Halt")
             };
-            if !(input.value().value().clone() == ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::THIRD {})) {
+            if !(input.value().value().clone() == super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::THIRD) {
         panic!("Halt")
       };
             let mut res: ::std::rc::Rc<super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput> = ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput::GetEnumOutput {
@@ -719,7 +691,7 @@ pub mod r#_SimpleEnumImpl_Compile {
             ) {
                 panic!("Halt")
             };
-            if !(res.value().value().clone() == ::std::rc::Rc::new(super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::THIRD {})) {
+            if !(res.value().value().clone() == super::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::THIRD) {
         panic!("Halt")
       };
             output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..27948b80
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::ISimpleTypesEnumClient>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_enum_config::SimpleEnumConfig,
+    ) -> Result<Self, BuildError> {
+        let inner =
+            ::simple_enum_dafny::_simple_dtypes_dsmithyenum_dinternaldafny::_default::SimpleEnum(
+                &crate::conversions::simple_enum_config::_simple_enum_config::to_dafny(conf),
+            );
+        if matches!(
+            inner.as_ref(),
+            ::simple_enum_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::UpcastTo::<dafny_runtime::Object<(dyn ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::ISimpleTypesEnumClient + 'static)>>::upcast_to(inner.Extract()),
+        })
+    }
+}
+
+mod get_enum;
+
+mod get_enum_first_known_value;
+mod get_enum_second_known_value;
+mod get_enum_third_known_value;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum.rs
new file mode 100644
index 00000000..f0c39525
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum.rs
@@ -0,0 +1,13 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetEnum`](crate::operation::get_enum::builders::GetEnumFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(SimpleEnumShape)`](crate::operation::get_enum::builders::GetEnumFluentBuilder::value) / [`set_value(Option<SimpleEnumShape>)`](crate::operation::get_enum::builders::GetEnumFluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetEnumOutput`](crate::operation::get_enum::GetEnumOutput) with field(s):
+    ///   - [`value(Option<Enum>)`](crate::operation::get_enum::GetEnumOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetEnumError>`](crate::operation::get_enum::GetEnumError)
+    pub fn get_enum(&self) -> crate::operation::get_enum::builders::GetEnumFluentBuilder {
+        crate::operation::get_enum::builders::GetEnumFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum_first_known_value.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum_first_known_value.rs
new file mode 100644
index 00000000..e33e3d6c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum_first_known_value.rs
@@ -0,0 +1,18 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetEnum`](crate::operation::get_enum_first_known_value::builders::GetEnumFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(SimpleEnumShape)`](crate::operation::get_enum_first_known_value::builders::GetEnumFluentBuilder::value) / [`set_value(Option<SimpleEnumShape>)`](crate::operation::get_enum_first_known_value::builders::GetEnumFluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetEnumOutput`](crate::operation::get_enum_first_known_value::GetEnumOutput) with field(s):
+    ///   - [`value(Option<Enum>)`](crate::operation::get_enum_first_known_value::GetEnumOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetEnumError>`](crate::operation::get_enum_first_known_value::GetEnumError)
+    pub fn get_enum_first_known_value(
+        &self,
+    ) -> crate::operation::get_enum_first_known_value::builders::GetEnumFirstKnownValueFluentBuilder
+    {
+        crate::operation::get_enum_first_known_value::builders::GetEnumFirstKnownValueFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum_second_known_value.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum_second_known_value.rs
new file mode 100644
index 00000000..1d9d9309
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum_second_known_value.rs
@@ -0,0 +1,18 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetEnum`](crate::operation::get_enum_second_known_value::builders::GetEnumFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(SimpleEnumShape)`](crate::operation::get_enum_second_known_value::builders::GetEnumFluentBuilder::value) / [`set_value(Option<SimpleEnumShape>)`](crate::operation::get_enum_second_known_value::builders::GetEnumFluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetEnumOutput`](crate::operation::get_enum_second_known_value::GetEnumOutput) with field(s):
+    ///   - [`value(Option<Enum>)`](crate::operation::get_enum_second_known_value::GetEnumOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetEnumError>`](crate::operation::get_enum_second_known_value::GetEnumError)
+    pub fn get_enum_second_known_value(
+        &self,
+    ) -> crate::operation::get_enum_second_known_value::builders::GetEnumSecondKnownValueFluentBuilder
+    {
+        crate::operation::get_enum_second_known_value::builders::GetEnumSecondKnownValueFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum_third_known_value.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum_third_known_value.rs
new file mode 100644
index 00000000..826bb9a8
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/client/get_enum_third_known_value.rs
@@ -0,0 +1,18 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetEnum`](crate::operation::get_enum_third_known_value::builders::GetEnumFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(SimpleEnumShape)`](crate::operation::get_enum_third_known_value::builders::GetEnumFluentBuilder::value) / [`set_value(Option<SimpleEnumShape>)`](crate::operation::get_enum_third_known_value::builders::GetEnumFluentBuilder::set_value):(undocumented)<br>
+    /// - On success, responds with [`GetEnumOutput`](crate::operation::get_enum_third_known_value::GetEnumOutput) with field(s):
+    ///   - [`value(Option<Enum>)`](crate::operation::get_enum_third_known_value::GetEnumOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetEnumError>`](crate::operation::get_enum_third_known_value::GetEnumError)
+    pub fn get_enum_third_known_value(
+        &self,
+    ) -> crate::operation::get_enum_third_known_value::builders::GetEnumThirdKnownValueFluentBuilder
+    {
+        crate::operation::get_enum_third_known_value::builders::GetEnumThirdKnownValueFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..6a7c338b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions.rs
@@ -0,0 +1,9 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_enum;
+
+pub mod get_enum_first_known_value;
+pub mod get_enum_second_known_value;
+pub mod get_enum_third_known_value;
+
+pub mod simple_enum_config;
+pub mod simple_enum_shape;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum.rs
new file mode 100644
index 00000000..99364fbd
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_enum::GetEnumError,
+) -> ::std::rc::Rc<::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error> {
+    match value {
+    crate::operation::get_enum::GetEnumError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::UpcastTo::<::dafny_runtime::Object<dyn Any>>::upcast_to(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_enum::GetEnumError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_enum::GetEnumError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_enum::GetEnumError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_enum_input;
+
+pub mod _get_enum_output;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum/_get_enum_input.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum/_get_enum_input.rs
new file mode 100644
index 00000000..a9e5e36b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum/_get_enum_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum::GetEnumInput,
+) -> ::std::rc::Rc<
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput,
+> {
+    let dafny_value = match value.value {
+        Some(v) => ::simple_enum_dafny::_Wrappers_Compile::Option::Some {
+            value: crate::conversions::simple_enum_shape::_simple_enum_shape::to_dafny(v),
+        },
+        None => ::simple_enum_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput::GetEnumInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput,
+    >,
+) -> crate::operation::get_enum::GetEnumInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_shape::_simple_enum_shape::from_dafny(
+                dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum::GetEnumInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum/_get_enum_output.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum/_get_enum_output.rs
new file mode 100644
index 00000000..b072468f
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum/_get_enum_output.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum::GetEnumOutput,
+) -> ::std::rc::Rc<
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => ::simple_enum_dafny::_Wrappers_Compile::Option::Some {
+            value: crate::conversions::simple_enum_shape::_simple_enum_shape::to_dafny(b),
+        },
+        None => ::simple_enum_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput::GetEnumOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput,
+    >,
+) -> crate::operation::get_enum::GetEnumOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_shape::_simple_enum_shape::from_dafny(
+                dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum::GetEnumOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_first_known_value.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_first_known_value.rs
new file mode 100644
index 00000000..e22bf1a1
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_first_known_value.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueError,
+) -> ::std::rc::Rc<::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error> {
+    match value {
+    crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::UpcastTo::<::dafny_runtime::Object<dyn Any>>::upcast_to(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_enum_first_known_value_input;
+
+pub mod _get_enum_first_known_value_output;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_first_known_value/_get_enum_first_known_value_input.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_first_known_value/_get_enum_first_known_value_input.rs
new file mode 100644
index 00000000..6a025ed7
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_first_known_value/_get_enum_first_known_value_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueInput,
+) -> ::std::rc::Rc<
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput,
+> {
+    let dafny_value = match value.value {
+        Some(v) => ::simple_enum_dafny::_Wrappers_Compile::Option::Some {
+            value: crate::conversions::simple_enum_shape::_simple_enum_shape::to_dafny(v),
+        },
+        None => ::simple_enum_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput::GetEnumInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput,
+    >,
+) -> crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_shape::_simple_enum_shape::from_dafny(
+                dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_first_known_value/_get_enum_first_known_value_output.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_first_known_value/_get_enum_first_known_value_output.rs
new file mode 100644
index 00000000..198db25e
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_first_known_value/_get_enum_first_known_value_output.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueOutput,
+) -> ::std::rc::Rc<
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => ::simple_enum_dafny::_Wrappers_Compile::Option::Some {
+            value: crate::conversions::simple_enum_shape::_simple_enum_shape::to_dafny(b),
+        },
+        None => ::simple_enum_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput::GetEnumOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput,
+    >,
+) -> crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_shape::_simple_enum_shape::from_dafny(
+                dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_second_known_value.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_second_known_value.rs
new file mode 100644
index 00000000..185cc1af
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_second_known_value.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueError,
+) -> ::std::rc::Rc<::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error> {
+    match value {
+    crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::UpcastTo::<::dafny_runtime::Object<dyn Any>>::upcast_to(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_enum_second_known_value_input;
+
+pub mod _get_enum_second_known_value_output;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_second_known_value/_get_enum_second_known_value_input.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_second_known_value/_get_enum_second_known_value_input.rs
new file mode 100644
index 00000000..4e18f453
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_second_known_value/_get_enum_second_known_value_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueInput,
+) -> ::std::rc::Rc<
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput,
+> {
+    let dafny_value = match value.value {
+        Some(v) => ::simple_enum_dafny::_Wrappers_Compile::Option::Some {
+            value: crate::conversions::simple_enum_shape::_simple_enum_shape::to_dafny(v),
+        },
+        None => ::simple_enum_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput::GetEnumInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput,
+    >,
+) -> crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_shape::_simple_enum_shape::from_dafny(
+                dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_second_known_value/_get_enum_second_known_value_output.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_second_known_value/_get_enum_second_known_value_output.rs
new file mode 100644
index 00000000..e73e8b65
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_second_known_value/_get_enum_second_known_value_output.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueOutput,
+) -> ::std::rc::Rc<
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => ::simple_enum_dafny::_Wrappers_Compile::Option::Some {
+            value: crate::conversions::simple_enum_shape::_simple_enum_shape::to_dafny(b),
+        },
+        None => ::simple_enum_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput::GetEnumOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput,
+    >,
+) -> crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_shape::_simple_enum_shape::from_dafny(
+                dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_third_known_value.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_third_known_value.rs
new file mode 100644
index 00000000..c1975c95
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_third_known_value.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueError,
+) -> ::std::rc::Rc<::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error> {
+    match value {
+    crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::UpcastTo::<::dafny_runtime::Object<dyn Any>>::upcast_to(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_enum_third_known_value_input;
+
+pub mod _get_enum_third_known_value_output;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_third_known_value/_get_enum_third_known_value_input.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_third_known_value/_get_enum_third_known_value_input.rs
new file mode 100644
index 00000000..4379f153
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_third_known_value/_get_enum_third_known_value_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueInput,
+) -> ::std::rc::Rc<
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput,
+> {
+    let dafny_value = match value.value {
+        Some(v) => ::simple_enum_dafny::_Wrappers_Compile::Option::Some {
+            value: crate::conversions::simple_enum_shape::_simple_enum_shape::to_dafny(v),
+        },
+        None => ::simple_enum_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput::GetEnumInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumInput,
+    >,
+) -> crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_shape::_simple_enum_shape::from_dafny(
+                dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueInput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_third_known_value/_get_enum_third_known_value_output.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_third_known_value/_get_enum_third_known_value_output.rs
new file mode 100644
index 00000000..920f9526
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/get_enum_third_known_value/_get_enum_third_known_value_output.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueOutput,
+) -> ::std::rc::Rc<
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => ::simple_enum_dafny::_Wrappers_Compile::Option::Some {
+            value: crate::conversions::simple_enum_shape::_simple_enum_shape::to_dafny(b),
+        },
+        None => ::simple_enum_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput::GetEnumOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::GetEnumOutput,
+    >,
+) -> crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            crate::conversions::simple_enum_shape::_simple_enum_shape::from_dafny(
+                dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_enum_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueOutput { value }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_config.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_config.rs
new file mode 100644
index 00000000..973679ee
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_enum_config;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_config/_simple_enum_config.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_config/_simple_enum_config.rs
new file mode 100644
index 00000000..983926f5
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_config/_simple_enum_config.rs
@@ -0,0 +1,19 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_enum_config::SimpleEnumConfig,
+) -> ::std::rc::Rc<
+    ::simple_enum_dafny::_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumConfig,
+> {
+    ::std::rc::Rc::new(::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumConfig::SimpleEnumConfig {})
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumConfig,
+    >,
+) -> crate::types::simple_enum_config::SimpleEnumConfig {
+    crate::types::simple_enum_config::SimpleEnumConfig {}
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_shape.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_shape.rs
new file mode 100644
index 00000000..f531b553
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_shape.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_enum_shape;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_shape/_simple_enum_shape.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_shape/_simple_enum_shape.rs
new file mode 100644
index 00000000..01219f48
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/conversions/simple_enum_shape/_simple_enum_shape.rs
@@ -0,0 +1,23 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_enum_shape::SimpleEnumShape,
+) -> ::simple_enum_dafny::_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape {
+    match value {
+      crate::types::simple_enum_shape::SimpleEnumShape::FIRST => ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::FIRST,
+      crate::types::simple_enum_shape::SimpleEnumShape::SECOND => ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::SECOND,
+      crate::types::simple_enum_shape::SimpleEnumShape::THIRD => ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::THIRD,
+    }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape,
+) -> crate::types::simple_enum_shape::SimpleEnumShape {
+    match dafny_value {
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::FIRST => crate::types::simple_enum_shape::SimpleEnumShape::FIRST,
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::SECOND => crate::types::simple_enum_shape::SimpleEnumShape::SECOND,
+    ::simple_enum_dafny::r#_simple_dtypes_dsmithyenum_dinternaldafny_dtypes::SimpleEnumShape::THIRD => crate::types::simple_enum_shape::SimpleEnumShape::THIRD,
+  }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/error.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..9d21fbd6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,22 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/lib.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..2b58ee57
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/lib.rs
@@ -0,0 +1,17 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+pub use types::simple_enum_config::SimpleEnumConfig;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..9d2f33b6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation.rs
@@ -0,0 +1,9 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetEnum` operation.
+pub mod get_enum;
+
+/// Types for the `GetEnumKnownValue` operation.
+pub mod get_enum_first_known_value;
+pub mod get_enum_second_known_value;
+pub mod get_enum_third_known_value;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum.rs
new file mode 100644
index 00000000..2ecb3ea6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum.rs
@@ -0,0 +1,142 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetEnum`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetEnum;
+impl GetEnum {
+    /// Creates a new `GetEnum`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_enum::GetEnumInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum::GetEnumOutput,
+        crate::operation::get_enum::GetEnumError,
+    > {
+        let inner_input = crate::conversions::get_enum::_get_enum_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(client.dafny_client.clone()).GetEnum(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_enum_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(crate::conversions::get_enum::_get_enum_output::from_dafny(
+                inner_result.value().clone(),
+            ))
+        } else {
+            Err(crate::conversions::get_enum::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetEnum` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetEnumError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetEnumError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetEnumError {
+    /// Creates the `GetEnumError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetEnumError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetEnumError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetEnumError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetEnumError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetEnumError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetEnumError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_enum::_get_enum_output::GetEnumOutput;
+
+pub use crate::operation::get_enum::_get_enum_input::GetEnumInput;
+
+mod _get_enum_input;
+
+mod _get_enum_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum/_get_enum_input.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum/_get_enum_input.rs
new file mode 100644
index 00000000..37b1f16c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum/_get_enum_input.rs
@@ -0,0 +1,65 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn message(
+        &self,
+    ) -> ::std::option::Option<&crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.value.as_ref()
+    }
+}
+impl GetEnumInput {
+    /// Creates a new builder-style object to manufacture [`GetEnumInput`](crate::operation::operation::GetEnumInput).
+    pub fn builder() -> crate::operation::get_enum::builders::GetEnumInputBuilder {
+        crate::operation::get_enum::builders::GetEnumInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumInput`](crate::operation::operation::GetEnumInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumInputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumInput`](crate::operation::operation::GetEnumInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum::GetEnumInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_enum::GetEnumInput { value: self.value })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum/_get_enum_output.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum/_get_enum_output.rs
new file mode 100644
index 00000000..9675cc2c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum/_get_enum_output.rs
@@ -0,0 +1,69 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+
+impl GetEnumOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.value
+    }
+}
+
+impl GetEnumOutput {
+    /// Creates a new builder-style object to manufacture [`GetEnumOutput`](crate::operation::operation::GetEnumOutput).
+    pub fn builder() -> crate::operation::get_enum::builders::GetEnumOutputBuilder {
+        crate::operation::get_enum::builders::GetEnumOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumOutput`](crate::operation::operation::GetEnumOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumOutputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+
+impl GetEnumOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        &self.value
+    }
+
+    /// Consumes the builder and constructs a [`GetEnumOutput`](crate::operation::operation::GetEnumOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum::GetEnumOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_enum::GetEnumOutput { value: self.value })
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum/builders.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum/builders.rs
new file mode 100644
index 00000000..11e371c1
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum/builders.rs
@@ -0,0 +1,76 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_enum::_get_enum_input::GetEnumInputBuilder;
+pub use crate::operation::get_enum::_get_enum_output::GetEnumOutputBuilder;
+
+impl GetEnumInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum::GetEnumOutput,
+        crate::operation::get_enum::GetEnumError,
+    > {
+        let mut fluent_builder = client.get_enum();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetEnum`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetEnumFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::get_enum::builders::GetEnumInputBuilder,
+}
+impl GetEnumFluentBuilder {
+    /// Creates a new `GetEnum`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetEnum as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_enum::builders::GetEnumInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum::GetEnumOutput,
+        crate::operation::get_enum::GetEnumError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetEnum doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_enum::GetEnumError::unhandled)?;
+        crate::operation::get_enum::GetEnum::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: crate::types::simple_enum_shape::SimpleEnumShape) -> Self {
+        self.inner = self.inner.value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value.rs
new file mode 100644
index 00000000..1275ea0b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value.rs
@@ -0,0 +1,149 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetEnumFirstKnownValue`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetEnumFirstKnownValue;
+impl GetEnumFirstKnownValue {
+    /// Creates a new `GetEnumFirstKnownValue`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueOutput,
+        crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueError,
+    > {
+        let inner_input =
+            crate::conversions::get_enum_first_known_value::_get_enum_first_known_value_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(client.dafny_client.clone()).GetEnum(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_enum_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_enum_first_known_value::_get_enum_first_known_value_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::get_enum_first_known_value::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `GetEnumFirstKnownValue` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetEnumFirstKnownValueError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unfirst_known error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetEnumFirstKnownValueError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetEnumFirstKnownValueError {
+    /// Creates the `GetEnumFirstKnownValueError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetEnumFirstKnownValueError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetEnumFirstKnownValueError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetEnumFirstKnownValueError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetEnumFirstKnownValueError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetEnumFirstKnownValueError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError
+    for GetEnumFirstKnownValueError
+{
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_enum_first_known_value::_get_enum_first_known_value_output::GetEnumFirstKnownValueOutput;
+
+pub use crate::operation::get_enum_first_known_value::_get_enum_first_known_value_input::GetEnumFirstKnownValueInput;
+
+mod _get_enum_first_known_value_input;
+
+mod _get_enum_first_known_value_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value/_get_enum_first_known_value_input.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value/_get_enum_first_known_value_input.rs
new file mode 100644
index 00000000..10bdb0d2
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value/_get_enum_first_known_value_input.rs
@@ -0,0 +1,69 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumFirstKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumFirstKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.value
+    }
+}
+impl GetEnumFirstKnownValueInput {
+    /// Creates a new builder-style object to manufacture [`GetEnumFirstKnownValueInput`](crate::operation::operation::GetEnumFirstKnownValueInput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_first_known_value::builders::GetEnumFirstKnownValueInputBuilder
+    {
+        crate::operation::get_enum_first_known_value::builders::GetEnumFirstKnownValueInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumFirstKnownValueInput`](crate::operation::operation::GetEnumFirstKnownValueInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumFirstKnownValueInputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumFirstKnownValueInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumFirstKnownValueInput`](crate::operation::operation::GetEnumFirstKnownValueInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueInput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value/_get_enum_first_known_value_output.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value/_get_enum_first_known_value_output.rs
new file mode 100644
index 00000000..e36919e4
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value/_get_enum_first_known_value_output.rs
@@ -0,0 +1,69 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumFirstKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumFirstKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.value
+    }
+}
+impl GetEnumFirstKnownValueOutput {
+    /// Creates a new builder-style object to manufacture [`GetEnumFirstKnownValueOutput`](crate::operation::operation::GetEnumFirstKnownValueOutput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_first_known_value::builders::GetEnumFirstKnownValueOutputBuilder
+    {
+        crate::operation::get_enum_first_known_value::builders::GetEnumFirstKnownValueOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumFirstKnownValueOutput`](crate::operation::operation::GetEnumFirstKnownValueOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumFirstKnownValueOutputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumFirstKnownValueOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumFirstKnownValueOutput`](crate::operation::operation::GetEnumFirstKnownValueOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueOutput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value/builders.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value/builders.rs
new file mode 100644
index 00000000..e77fc81c
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_first_known_value/builders.rs
@@ -0,0 +1,84 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_enum_first_known_value::_get_enum_first_known_value_input::GetEnumFirstKnownValueInputBuilder;
+pub use crate::operation::get_enum_first_known_value::_get_enum_first_known_value_output::GetEnumFirstKnownValueOutputBuilder;
+
+impl GetEnumFirstKnownValueInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueOutput,
+        crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueError,
+    > {
+        let mut fluent_builder = client.get_enum_first_known_value();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetEnumFirstKnownValue`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetEnumFirstKnownValueFluentBuilder {
+    client: crate::client::Client,
+    inner:
+        crate::operation::get_enum_first_known_value::builders::GetEnumFirstKnownValueInputBuilder,
+}
+impl GetEnumFirstKnownValueFluentBuilder {
+    /// Creates a new `GetEnumFirstKnownValue`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetEnumFirstKnownValue as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_enum_first_known_value::builders::GetEnumFirstKnownValueInputBuilder
+    {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueOutput,
+        crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetEnum doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_enum_first_known_value::GetEnumFirstKnownValueError::unhandled)?;
+        crate::operation::get_enum_first_known_value::GetEnumFirstKnownValue::send(
+            &self.client,
+            input,
+        )
+        .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: crate::types::simple_enum_shape::SimpleEnumShape) -> Self {
+        self.inner = self.inner.value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value.rs
new file mode 100644
index 00000000..ca186003
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value.rs
@@ -0,0 +1,149 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetEnumSecondKnownValue`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetEnumSecondKnownValue;
+impl GetEnumSecondKnownValue {
+    /// Creates a new `GetEnumSecondKnownValue`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueOutput,
+        crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueError,
+    > {
+        let inner_input =
+            crate::conversions::get_enum_second_known_value::_get_enum_second_known_value_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(client.dafny_client.clone()).GetEnum(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_enum_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_enum_second_known_value::_get_enum_second_known_value_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::get_enum_second_known_value::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `GetEnumSecondKnownValue` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetEnumSecondKnownValueError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unsecond_known error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetEnumSecondKnownValueError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetEnumSecondKnownValueError {
+    /// Creates the `GetEnumSecondKnownValueError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetEnumSecondKnownValueError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetEnumSecondKnownValueError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetEnumSecondKnownValueError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetEnumSecondKnownValueError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetEnumSecondKnownValueError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError
+    for GetEnumSecondKnownValueError
+{
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_enum_second_known_value::_get_enum_second_known_value_output::GetEnumSecondKnownValueOutput;
+
+pub use crate::operation::get_enum_second_known_value::_get_enum_second_known_value_input::GetEnumSecondKnownValueInput;
+
+mod _get_enum_second_known_value_input;
+
+mod _get_enum_second_known_value_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value/_get_enum_second_known_value_input.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value/_get_enum_second_known_value_input.rs
new file mode 100644
index 00000000..540ac00b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value/_get_enum_second_known_value_input.rs
@@ -0,0 +1,69 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumSecondKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumSecondKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.value
+    }
+}
+impl GetEnumSecondKnownValueInput {
+    /// Creates a new builder-style object to manufacture [`GetEnumSecondKnownValueInput`](crate::operation::operation::GetEnumSecondKnownValueInput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_second_known_value::builders::GetEnumSecondKnownValueInputBuilder
+    {
+        crate::operation::get_enum_second_known_value::builders::GetEnumSecondKnownValueInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumSecondKnownValueInput`](crate::operation::operation::GetEnumSecondKnownValueInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumSecondKnownValueInputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumSecondKnownValueInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumSecondKnownValueInput`](crate::operation::operation::GetEnumSecondKnownValueInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueInput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value/_get_enum_second_known_value_output.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value/_get_enum_second_known_value_output.rs
new file mode 100644
index 00000000..e6dfe9e6
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value/_get_enum_second_known_value_output.rs
@@ -0,0 +1,69 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumSecondKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumSecondKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.value
+    }
+}
+impl GetEnumSecondKnownValueOutput {
+    /// Creates a new builder-style object to manufacture [`GetEnumSecondKnownValueOutput`](crate::operation::operation::GetEnumSecondKnownValueOutput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_second_known_value::builders::GetEnumSecondKnownValueOutputBuilder
+    {
+        crate::operation::get_enum_second_known_value::builders::GetEnumSecondKnownValueOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumSecondKnownValueOutput`](crate::operation::operation::GetEnumSecondKnownValueOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumSecondKnownValueOutputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumSecondKnownValueOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumSecondKnownValueOutput`](crate::operation::operation::GetEnumSecondKnownValueOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueOutput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value/builders.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value/builders.rs
new file mode 100644
index 00000000..2ea2b8d1
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_second_known_value/builders.rs
@@ -0,0 +1,83 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_enum_second_known_value::_get_enum_second_known_value_input::GetEnumSecondKnownValueInputBuilder;
+pub use crate::operation::get_enum_second_known_value::_get_enum_second_known_value_output::GetEnumSecondKnownValueOutputBuilder;
+
+impl GetEnumSecondKnownValueInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueOutput,
+        crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueError,
+    > {
+        let mut fluent_builder = client.get_enum_second_known_value();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetEnumSecondKnownValue`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetEnumSecondKnownValueFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::get_enum_second_known_value::builders::GetEnumSecondKnownValueInputBuilder,
+}
+impl GetEnumSecondKnownValueFluentBuilder {
+    /// Creates a new `GetEnumSecondKnownValue`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetEnumSecondKnownValue as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_enum_second_known_value::builders::GetEnumSecondKnownValueInputBuilder
+    {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueOutput,
+        crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetEnum doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_enum_second_known_value::GetEnumSecondKnownValueError::unhandled)?;
+        crate::operation::get_enum_second_known_value::GetEnumSecondKnownValue::send(
+            &self.client,
+            input,
+        )
+        .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: crate::types::simple_enum_shape::SimpleEnumShape) -> Self {
+        self.inner = self.inner.value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value.rs
new file mode 100644
index 00000000..1d50ddda
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value.rs
@@ -0,0 +1,149 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetEnumThirdKnownValue`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetEnumThirdKnownValue;
+impl GetEnumThirdKnownValue {
+    /// Creates a new `GetEnumThirdKnownValue`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueOutput,
+        crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueError,
+    > {
+        let inner_input =
+            crate::conversions::get_enum_third_known_value::_get_enum_third_known_value_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(client.dafny_client.clone()).GetEnum(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_enum_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_enum_third_known_value::_get_enum_third_known_value_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::get_enum_third_known_value::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `GetEnumThirdKnownValue` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetEnumThirdKnownValueError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unthird_known error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetEnumThirdKnownValueError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetEnumThirdKnownValueError {
+    /// Creates the `GetEnumThirdKnownValueError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetEnumThirdKnownValueError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetEnumThirdKnownValueError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetEnumThirdKnownValueError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetEnumThirdKnownValueError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetEnumThirdKnownValueError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError
+    for GetEnumThirdKnownValueError
+{
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_enum_third_known_value::_get_enum_third_known_value_output::GetEnumThirdKnownValueOutput;
+
+pub use crate::operation::get_enum_third_known_value::_get_enum_third_known_value_input::GetEnumThirdKnownValueInput;
+
+mod _get_enum_third_known_value_input;
+
+mod _get_enum_third_known_value_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value/_get_enum_third_known_value_input.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value/_get_enum_third_known_value_input.rs
new file mode 100644
index 00000000..c7afdbc7
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value/_get_enum_third_known_value_input.rs
@@ -0,0 +1,68 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumThirdKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumThirdKnownValueInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.value
+    }
+}
+impl GetEnumThirdKnownValueInput {
+    /// Creates a new builder-style object to manufacture [`GetEnumThirdKnownValueInput`](crate::operation::operation::GetEnumThirdKnownValueInput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_third_known_value::builders::GetEnumThirdKnownValueInputBuilder
+    {
+        crate::operation::get_enum_third_known_value::builders::GetEnumThirdKnownValueInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumThirdKnownValueInput`](crate::operation::operation::GetEnumThirdKnownValueInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumThirdKnownValueInputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumThirdKnownValueInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumThirdKnownValueInput`](crate::operation::operation::GetEnumThirdKnownValueInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueInput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value/_get_enum_third_known_value_output.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value/_get_enum_third_known_value_output.rs
new file mode 100644
index 00000000..3ab53666
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value/_get_enum_third_known_value_output.rs
@@ -0,0 +1,69 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetEnumThirdKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumThirdKnownValueOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.value
+    }
+}
+impl GetEnumThirdKnownValueOutput {
+    /// Creates a new builder-style object to manufacture [`GetEnumThirdKnownValueOutput`](crate::operation::operation::GetEnumThirdKnownValueOutput).
+    pub fn builder(
+    ) -> crate::operation::get_enum_third_known_value::builders::GetEnumThirdKnownValueOutputBuilder
+    {
+        crate::operation::get_enum_third_known_value::builders::GetEnumThirdKnownValueOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetEnumThirdKnownValueOutput`](crate::operation::operation::GetEnumThirdKnownValueOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetEnumThirdKnownValueOutputBuilder {
+    pub(crate) value: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+}
+impl GetEnumThirdKnownValueOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetEnumThirdKnownValueOutput`](crate::operation::operation::GetEnumThirdKnownValueOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueOutput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value/builders.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value/builders.rs
new file mode 100644
index 00000000..bc11da8b
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/operation/get_enum_third_known_value/builders.rs
@@ -0,0 +1,84 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_enum_third_known_value::_get_enum_third_known_value_input::GetEnumThirdKnownValueInputBuilder;
+pub use crate::operation::get_enum_third_known_value::_get_enum_third_known_value_output::GetEnumThirdKnownValueOutputBuilder;
+
+impl GetEnumThirdKnownValueInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueOutput,
+        crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueError,
+    > {
+        let mut fluent_builder = client.get_enum_third_known_value();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetEnumThirdKnownValue`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetEnumThirdKnownValueFluentBuilder {
+    client: crate::client::Client,
+    inner:
+        crate::operation::get_enum_third_known_value::builders::GetEnumThirdKnownValueInputBuilder,
+}
+impl GetEnumThirdKnownValueFluentBuilder {
+    /// Creates a new `GetEnumThirdKnownValue`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetEnumThirdKnownValue as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_enum_third_known_value::builders::GetEnumThirdKnownValueInputBuilder
+    {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueOutput,
+        crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetEnum doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_enum_third_known_value::GetEnumThirdKnownValueError::unhandled)?;
+        crate::operation::get_enum_third_known_value::GetEnumThirdKnownValue::send(
+            &self.client,
+            input,
+        )
+        .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: crate::types::simple_enum_shape::SimpleEnumShape) -> Self {
+        self.inner = self.inner.value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape>,
+    ) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_enum_shape::SimpleEnumShape> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/types.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..de391012
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/types.rs
@@ -0,0 +1,5 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `SimpleIntegerConfig`
+pub mod simple_enum_config;
+pub mod simple_enum_shape;
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/types/simple_enum_config.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/types/simple_enum_config.rs
new file mode 100644
index 00000000..fd3ea0e1
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/types/simple_enum_config.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleEnumConfig {}
+
+impl SimpleEnumConfig {
+    pub fn builder() -> SimpleEnumConfigBuilder {
+        SimpleEnumConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleEnumConfigBuilder {}
+
+impl SimpleEnumConfigBuilder {
+    /// Creates a new `SimpleEnumConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {}
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<SimpleEnumConfig, ::aws_smithy_types::error::operation::BuildError>
+    {
+        ::std::result::Result::Ok(SimpleEnumConfig {})
+    }
+}
diff --git b/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/types/simple_enum_shape.rs a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/types/simple_enum_shape.rs
new file mode 100644
index 00000000..dba31405
--- /dev/null
+++ a/TestModels/SimpleTypes/SimpleEnum/runtimes/rust/src/types/simple_enum_shape.rs
@@ -0,0 +1,6 @@
+#[derive(Debug, PartialEq, Copy, Clone)]
+pub enum SimpleEnumShape {
+    FIRST,
+    SECOND,
+    THIRD,
+}
