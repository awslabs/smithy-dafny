# Code generated by smithy-python-codegen DO NOT EDIT.

import _dafny
import module_
import simple_types_smithyenum.smithygenerated.simple_types_smithyenum.dafny_to_smithy
from simple_types_smithyenum_internaldafny_types import (
    Error,
    GetEnumOutput_GetEnumOutput as DafnyGetEnumOutput,
)
from typing import Any

from .dafny_protocol import DafnyResponse
from .errors import CollectionOfErrors, OpaqueError, ServiceError

from .config import Config


async def _deserialize_get_enum(input: DafnyResponse, config: Config):

  if input.IsFailure():
      return await _deserialize_error(input.error)
  return simple_types_smithyenum.smithygenerated.simple_types_smithyenum.dafny_to_smithy.simple_types_smithyenum_GetEnumOutput(input.value)

async def _deserialize_get_enum_first_known_value_test(input: DafnyResponse, config: Config):

  if input.IsFailure():
      return await _deserialize_error(input.error)
  return simple_types_smithyenum.smithygenerated.simple_types_smithyenum.dafny_to_smithy.simple_types_smithyenum_GetEnumOutput(input.value)

async def _deserialize_get_enum_second_known_value_test(input: DafnyResponse, config: Config):

  if input.IsFailure():
      return await _deserialize_error(input.error)
  return simple_types_smithyenum.smithygenerated.simple_types_smithyenum.dafny_to_smithy.simple_types_smithyenum_GetEnumOutput(input.value)

async def _deserialize_get_enum_third_known_value_test(input: DafnyResponse, config: Config):

  if input.IsFailure():
      return await _deserialize_error(input.error)
  return simple_types_smithyenum.smithygenerated.simple_types_smithyenum.dafny_to_smithy.simple_types_smithyenum_GetEnumOutput(input.value)

async def _deserialize_error(error: Error) -> ServiceError:
    if error.is_Opaque:
        return OpaqueError(obj=error.obj)
    elif error.is_CollectionOfErrors:
        return CollectionOfErrors(
            message=_dafny.string_of(error.message),
            list=[await _deserialize_error(dafny_e) for dafny_e in error.list],
        )
    else:
        return OpaqueError(obj=error)
