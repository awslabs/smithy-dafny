// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(dead_code)]
pub fn to_dafny(
    value: crate::operation::get_double::GetDoubleOutput,
) -> ::std::rc::Rc<
    crate::implementation_from_dafny::r#_simple_dtypes_dsmithydouble_dinternaldafny_dtypes::GetDoubleOutput,
> {
    let dafny_value = match value.value {
        Some(v) => crate::implementation_from_dafny::_Wrappers_Compile::Option::Some {
            value: ::dafny_runtime::Sequence::ArraySequence {
                values: std::rc::Rc::new(f64::to_be_bytes(v).to_vec()),
            },
        },
        None => crate::implementation_from_dafny::_Wrappers_Compile::Option::None {},
    };
    ::std::rc::Rc::new(crate::implementation_from_dafny::r#_simple_dtypes_dsmithydouble_dinternaldafny_dtypes::GetDoubleOutput::GetDoubleOutput {
    value: ::std::rc::Rc::new(dafny_value)
  })
}

#[allow(dead_code)]
pub fn from_dafny(
    dafny_value: ::std::rc::Rc<
        crate::implementation_from_dafny::r#_simple_dtypes_dsmithydouble_dinternaldafny_dtypes::GetDoubleOutput,
    >,
) -> crate::operation::get_double::GetDoubleOutput {
    let value = if matches!(
        dafny_value.value().as_ref(),
        crate::implementation_from_dafny::_Wrappers_Compile::Option::Some { .. }
    ) {
        let my_vec = dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(
            &dafny_value.value().Extract(),
            |x| *x,
        );
        Some(f64::from_be_bytes(
            my_vec.try_into().expect("Error converting Sequence to f64"),
        ))
    } else if matches!(
        dafny_value.value().as_ref(),
        crate::implementation_from_dafny::_Wrappers_Compile::Option::None { .. }
    ) {
        None
    } else {
        panic!("Unreachable")
    };
    crate::operation::get_double::GetDoubleOutput { value }
}
