# Code generated by smithy-python-codegen DO NOT EDIT.

import asyncio
import module_
from simple_constraints_internaldafny_types import (
    GetConstraintsOutput_GetConstraintsOutput as DafnyGetConstraintsOutput,
)
from simple_errors_internaldafny_types import (
    GetErrorsOutput_GetErrorsOutput as DafnyGetErrorsOutput,
)
from simple_extendable_resources_internaldafny_types import (
    CreateExtendableResourceOutput_CreateExtendableResourceOutput as DafnyCreateExtendableResourceOutput,
    GetExtendableResourceDataOutput_GetExtendableResourceDataOutput as DafnyGetExtendableResourceDataOutput,
    GetExtendableResourceErrorsOutput_GetExtendableResourceErrorsOutput as DafnyGetExtendableResourceErrorsOutput,
    UseExtendableResourceOutput_UseExtendableResourceOutput as DafnyUseExtendableResourceOutput,
)
from simple_resources_internaldafny_types import (
    GetResourceDataOutput_GetResourceDataOutput as DafnyGetResourceDataOutput,
    GetResourcesOutput_GetResourcesOutput as DafnyGetResourcesOutput,
)
from simple_dependencies_internaldafny_types import (
    Error
)

from simple_extendable_resources.smithygenerated.errors import (
    SimpleExtendableResourcesException
)

from .dafny_protocol import DafnyResponse
from simple_constraints.smithygenerated.models import (
    ComplexListElement,
    GetConstraintsOutput,
)
from simple_errors.smithygenerated.models import GetErrorsOutput
from simple_extendable_resources.smithygenerated.models import (
    CreateExtendableResourceOutput,
    ExtendableResource,
    GetExtendableResourceDataOutput,
    GetExtendableResourceErrorsOutput,
    UseExtendableResourceOutput,
)
from simple_resources.smithygenerated.models import (
    GetResourceDataOutput,
    GetResourcesOutput,
    SimpleResource,
)
from .errors import (
    CollectionOfErrors,
    OpaqueError,
    ServiceError,
    SimpleExtendableResources,
)

from simple_extendable_resources.smithygenerated.deserialize import (
    _deserialize_error as simple_extendable_deserialize_error
)

from .config import Config


async def _deserialize_get_extendable_resource_data(input: DafnyResponse, config: Config) -> GetExtendableResourceDataOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetExtendableResourceDataOutput(blob_value=input.value.blobValue.UnwrapOr(None),
  boolean_value=input.value.booleanValue.UnwrapOr(None),
  string_value=input.value.stringValue.UnwrapOr(None),
  integer_value=input.value.integerValue.UnwrapOr(None),
  long_value=input.value.longValue.UnwrapOr(None),
  )

async def _deserialize_always_modeled_error(input: DafnyResponse, config: Config) -> GetExtendableResourceErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetExtendableResourceErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_get_simple_resource(input: DafnyResponse, config: Config) -> GetResourcesOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetResourcesOutput(output=SimpleResource(_impl=input.value.output),
  )

async def _deserialize_always_error(input: DafnyResponse, config: Config) -> GetErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_use_local_extendable_resource(input: DafnyResponse, config: Config) -> UseExtendableResourceOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return UseExtendableResourceOutput(output=GetExtendableResourceDataOutput(blob_value=input.value.output.blobValue.UnwrapOr(None),
  boolean_value=input.value.output.booleanValue.UnwrapOr(None),
  string_value=input.value.output.stringValue.UnwrapOr(None),
  integer_value=input.value.output.integerValue.UnwrapOr(None),
  long_value=input.value.output.longValue.UnwrapOr(None),
  ),
  )

async def _deserialize_always_native_error(input: DafnyResponse, config: Config) -> GetErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_local_extendable_resource_always_native_error(input: DafnyResponse, config: Config) -> GetExtendableResourceErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetExtendableResourceErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_always_multiple_errors(input: DafnyResponse, config: Config) -> GetExtendableResourceErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetExtendableResourceErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_always_multiple_errors(input: DafnyResponse, config: Config) -> GetErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_use_extendable_resource(input: DafnyResponse, config: Config) -> UseExtendableResourceOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return UseExtendableResourceOutput(output=GetExtendableResourceDataOutput(blob_value=input.value.output.blobValue.UnwrapOr(None),
  boolean_value=input.value.output.booleanValue.UnwrapOr(None),
  string_value=input.value.output.stringValue.UnwrapOr(None),
  integer_value=input.value.output.integerValue.UnwrapOr(None),
  long_value=input.value.output.longValue.UnwrapOr(None),
  ),
  )

async def _deserialize_use_extendable_resource_always_multiple_errors(input: DafnyResponse, config: Config) -> GetExtendableResourceErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetExtendableResourceErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_create_extendable_resource(input: DafnyResponse, config: Config) -> CreateExtendableResourceOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return CreateExtendableResourceOutput(resource=ExtendableResource(_impl=input.value.resource),
  )

async def _deserialize_get_resources(input: DafnyResponse, config: Config) -> GetResourcesOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetResourcesOutput(output=SimpleResource(_impl=input.value.output),
  )

async def _deserialize_local_extendable_resource_always_modeled_error(input: DafnyResponse, config: Config) -> GetExtendableResourceErrorsOutput:

  print("inside the right deser")
  if input.IsFailure():
    print("input isfailure")
    return await _deserialize_error(input.error)
  return GetExtendableResourceErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_use_extendable_resource_always_modeled_error(input: DafnyResponse, config: Config) -> GetExtendableResourceErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetExtendableResourceErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_always_opaque_error(input: DafnyResponse, config: Config) -> GetExtendableResourceErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetExtendableResourceErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_use_extendable_resource_always_opaque_error(input: DafnyResponse, config: Config) -> GetExtendableResourceErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetExtendableResourceErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_use_simple_resource(input: DafnyResponse, config: Config) -> GetResourceDataOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetResourceDataOutput(blob_value=input.value.blobValue.UnwrapOr(None),
  boolean_value=input.value.booleanValue.UnwrapOr(None),
  string_value=input.value.stringValue.UnwrapOr(None),
  integer_value=input.value.integerValue.UnwrapOr(None),
  long_value=input.value.longValue.UnwrapOr(None),
  )

async def _deserialize_use_local_constraints_service(input: DafnyResponse, config: Config) -> GetConstraintsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetConstraintsOutput(my_string=input.value.MyString.UnwrapOr(None),
  non_empty_string=input.value.NonEmptyString.UnwrapOr(None),
  string_less_than_or_equal_to_ten=input.value.StringLessThanOrEqualToTen.UnwrapOr(None),
  my_blob=input.value.MyBlob.UnwrapOr(None),
  non_empty_blob=input.value.NonEmptyBlob.UnwrapOr(None),
  blob_less_than_or_equal_to_ten=input.value.BlobLessThanOrEqualToTen.UnwrapOr(None),
  my_list=[list_element for list_element in input.value.MyList.UnwrapOr(None)],
  non_empty_list=[list_element for list_element in input.value.NonEmptyList.UnwrapOr(None)],
  list_less_than_or_equal_to_ten=[list_element for list_element in input.value.ListLessThanOrEqualToTen.UnwrapOr(None)],
  my_map={key: value for (key, value) in input.value.MyMap.UnwrapOr(None).items },
  non_empty_map={key: value for (key, value) in input.value.NonEmptyMap.UnwrapOr(None).items },
  map_less_than_or_equal_to_ten={key: value for (key, value) in input.value.MapLessThanOrEqualToTen.UnwrapOr(None).items },
  alphabetic=input.value.Alphabetic.UnwrapOr(None),
  one_to_ten=input.value.OneToTen.UnwrapOr(None),
  greater_than_one=input.value.GreaterThanOne.UnwrapOr(None),
  less_than_ten=input.value.LessThanTen.UnwrapOr(None),
  my_unique_list=[list_element for list_element in input.value.MyUniqueList.UnwrapOr(None)],
  my_complex_unique_list=[ComplexListElement(value=list_element.value.UnwrapOr(None),
  blob=list_element.blob.UnwrapOr(None),
  ) for list_element in input.value.MyComplexUniqueList.UnwrapOr(None)],
  my_utf8_bytes=input.value.MyUtf8Bytes.UnwrapOr(None),
  my_list_of_utf8_bytes=[list_element for list_element in input.value.MyListOfUtf8Bytes.UnwrapOr(None)],
  )

async def _deserialize_local_extendable_resource_always_multiple_errors(input: DafnyResponse, config: Config) -> GetExtendableResourceErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetExtendableResourceErrorsOutput(value=input.value.value.UnwrapOr(None),
  )

async def _deserialize_get_resource_data(input: DafnyResponse, config: Config) -> GetResourceDataOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetResourceDataOutput(blob_value=input.value.blobValue.UnwrapOr(None),
  boolean_value=input.value.booleanValue.UnwrapOr(None),
  string_value=input.value.stringValue.UnwrapOr(None),
  integer_value=input.value.integerValue.UnwrapOr(None),
  long_value=input.value.longValue.UnwrapOr(None),
  )

async def _deserialize_get_constraints(input: DafnyResponse, config: Config) -> GetConstraintsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetConstraintsOutput(my_string=input.value.MyString.UnwrapOr(None),
  non_empty_string=input.value.NonEmptyString.UnwrapOr(None),
  string_less_than_or_equal_to_ten=input.value.StringLessThanOrEqualToTen.UnwrapOr(None),
  my_blob=input.value.MyBlob.UnwrapOr(None),
  non_empty_blob=input.value.NonEmptyBlob.UnwrapOr(None),
  blob_less_than_or_equal_to_ten=input.value.BlobLessThanOrEqualToTen.UnwrapOr(None),
  my_list=[list_element for list_element in input.value.MyList.UnwrapOr(None)],
  non_empty_list=[list_element for list_element in input.value.NonEmptyList.UnwrapOr(None)],
  list_less_than_or_equal_to_ten=[list_element for list_element in input.value.ListLessThanOrEqualToTen.UnwrapOr(None)],
  my_map={key: value for (key, value) in input.value.MyMap.UnwrapOr(None).items },
  non_empty_map={key: value for (key, value) in input.value.NonEmptyMap.UnwrapOr(None).items },
  map_less_than_or_equal_to_ten={key: value for (key, value) in input.value.MapLessThanOrEqualToTen.UnwrapOr(None).items },
  alphabetic=input.value.Alphabetic.UnwrapOr(None),
  one_to_ten=input.value.OneToTen.UnwrapOr(None),
  greater_than_one=input.value.GreaterThanOne.UnwrapOr(None),
  less_than_ten=input.value.LessThanTen.UnwrapOr(None),
  my_unique_list=[list_element for list_element in input.value.MyUniqueList.UnwrapOr(None)],
  my_complex_unique_list=[ComplexListElement(value=list_element.value.UnwrapOr(None),
  blob=list_element.blob.UnwrapOr(None),
  ) for list_element in input.value.MyComplexUniqueList.UnwrapOr(None)],
  my_utf8_bytes=input.value.MyUtf8Bytes.UnwrapOr(None),
  my_list_of_utf8_bytes=[list_element for list_element in input.value.MyListOfUtf8Bytes.UnwrapOr(None)],
  )

async def _deserialize_error(
    error: Error
) -> ServiceError:
  if error.is_Opaque:
    return OpaqueError(obj=error.obj)
  if error.is_CollectionOfErrors:
    return CollectionOfErrors(message=error.message, list=error.list)
  if error.is_SimpleExtendableResources:
    print("errror is simpleextendable")
    print(error.__dict__)
    print(type(error))
    try:
      # TODO: It seems we MUST construct the object here, which necessitates an asyncio.run call...
      # Think about this more
      return SimpleExtendableResources(await simple_extendable_deserialize_error(error.SimpleExtendableResources))
      print(a)
      print(type(a))
      return a
    except Exception as e:
      print(e)