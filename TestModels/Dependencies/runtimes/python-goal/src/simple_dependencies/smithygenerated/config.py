# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from dataclasses import dataclass
import module_
from simple_constraints_internaldafny_types import ISimpleConstraintsClient
from simple_dependencies_internaldafny_types import (
    SimpleDependenciesConfig_SimpleDependenciesConfig as DafnySimpleDependenciesConfig,
)
from simple_extendable_resources_internaldafny_types import IExtendableResource
from simple_resources_internaldafny_types import (
    SimpleResourcesConfig_SimpleResourcesConfig as DafnySimpleResourcesConfig,
)
from typing import Any, Callable, TypeAlias, Union

import simple_constraints_internaldafny
from .dafnyImplInterface import DafnyImplInterface
import simple_constraints
from simple_constraints.smithygenerated.client import SimpleConstraints
from simple_extendable_resources.smithygenerated.models import ExtendableResource
import ExtendableResource as DafnyExtendableResource
from simple_resources.smithygenerated.config import SimpleResourcesConfig
from smithy_python._private.retries import SimpleRetryStrategy
from smithy_python.interfaces.interceptor import Interceptor
from smithy_python.interfaces.retries import RetryStrategy

from .models import (
    GetConstraintsInput,
    GetConstraintsOutput,
    GetExtendableResourceDataInput,
    GetExtendableResourceErrorsInput,
    GetExtendableResourceErrorsOutput,
    GetResourceDataOutput,
    GetResourcesInput,
    GetResourcesOutput,
    UseExtendableResourceOutput,
    UseSimpleResourceInput,
)


_ServiceInterceptor = Union[Interceptor[GetResourcesInput, GetResourcesOutput, Any, Any], Interceptor[GetExtendableResourceErrorsInput, GetExtendableResourceErrorsOutput, Any, Any], Interceptor[GetExtendableResourceErrorsInput, GetExtendableResourceErrorsOutput, Any, Any], Interceptor[GetExtendableResourceErrorsInput, GetExtendableResourceErrorsOutput, Any, Any], Interceptor[GetConstraintsInput, GetConstraintsOutput, Any, Any], Interceptor[GetExtendableResourceDataInput, UseExtendableResourceOutput, Any, Any], Interceptor[UseSimpleResourceInput, GetResourceDataOutput, Any, Any]]
@dataclass(init=False)
class Config:
    """Configuration for SimpleDependencies."""

    interceptors: list[_ServiceInterceptor]
    retry_strategy: RetryStrategy
    dafnyImplInterface: DafnyImplInterface | None

    def __init__(
        self,
        *,
        interceptors: list[_ServiceInterceptor] | None = None,
        retry_strategy: RetryStrategy | None = None,
        dafnyImplInterface: DafnyImplInterface | None = None,
    ):
        """Constructor.

        :param interceptors: The list of interceptors, which are hooks that are called
        during the execution of a request.

        :param retry_strategy: The retry strategy for issuing retry tokens and computing
        retry delays.

        :param dafnyImplInterface:
        """
        self.interceptors = interceptors or []
        self.retry_strategy = retry_strategy or SimpleRetryStrategy()
        self.dafnyImplInterface = dafnyImplInterface

# A callable that allows customizing the config object on each request.
Plugin: TypeAlias = Callable[[Config], None]

class SimpleDependenciesConfig(Config):
    # TODO: Add types to Config members
    simple_resources_config: Any
    simple_constraints_service_reference: Any
    extendable_resource_reference: Any
    special_string: Any

    def __init__(self, simple_resources_config, simple_constraints_service_reference, extendable_resource_reference, special_string, ):
        super().__init__()
        self.simple_resources_config = simple_resources_config
        self.simple_constraints_service_reference = simple_constraints_service_reference
        self.extendable_resource_reference = extendable_resource_reference
        self.special_string = special_string

def dafny_config_to_smithy_config(dafny_config) -> SimpleDependenciesConfig:
    print("dafny_config")
    print(dafny_config)
    a = SimpleDependenciesConfig(simple_resources_config=SimpleResourcesConfig(name=dafny_config.simpleResourcesConfig.UnwrapOr(None).name,
           ),
           simple_constraints_service_reference=SimpleConstraints(dafny_config.simpleConstraintsServiceReference.UnwrapOr(None)),
           extendable_resource_reference=ExtendableResource(_impl=dafny_config.extendableResourceReference.UnwrapOr(None)),
           special_string=dafny_config.specialString.UnwrapOr(None),
           )
    print(a.__dict__)
    return a

def smithy_config_to_dafny_config(smithy_config) -> DafnySimpleDependenciesConfig:
    print("smithy_config")
    print(smithy_config)
    simple_constraints_client = simple_constraints_internaldafny.SimpleConstraintsClient()
    simple_constraints_client.ctor__(simple_constraints.smithygenerated.config.smithy_config_to_dafny_config(smithy_config.simple_constraints_service_reference._config))
    dafny_extendable_resource = DafnyExtendableResource.ExtendableResource()
    dafny_extendable_resource.ctor__()
    a = DafnySimpleDependenciesConfig(simpleResourcesConfig=DafnySimpleResourcesConfig(name=smithy_config.simple_resources_config.name,
           ),
           simpleConstraintsServiceReference=simple_constraints_client,
           extendableResourceReference=dafny_extendable_resource,
           specialString=smithy_config.special_string,
           )
    print(a)
    return a
