# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from _dafny import Map, Seq
import module_
from simple_constraints_internaldafny_types import (
    ComplexListElement_ComplexListElement as DafnyComplexListElement,
    GetConstraintsInput_GetConstraintsInput as DafnyGetConstraintsInput,
)
from simple_dependencies_internaldafny_types import (
    UseSimpleResourceInput_UseSimpleResourceInput as DafnyUseSimpleResourceInput,
)
from simple_errors_internaldafny_types import (
    GetErrorsInput_GetErrorsInput as DafnyGetErrorsInput,
)
from simple_extendable_resources_internaldafny_types import (
    CreateExtendableResourceInput_CreateExtendableResourceInput as DafnyCreateExtendableResourceInput,
    GetExtendableResourceDataInput_GetExtendableResourceDataInput as DafnyGetExtendableResourceDataInput,
    GetExtendableResourceErrorsInput_GetExtendableResourceErrorsInput as DafnyGetExtendableResourceErrorsInput,
    IExtendableResource,
    UseExtendableResourceErrorsInput_UseExtendableResourceErrorsInput as DafnyUseExtendableResourceErrorsInput,
    UseExtendableResourceInput_UseExtendableResourceInput as DafnyUseExtendableResourceInput,
)
from simple_resources_internaldafny_types import (
    GetResourceDataInput_GetResourceDataInput as DafnyGetResourceDataInput,
    GetResourcesInput_GetResourcesInput as DafnyGetResourcesInput,
    ISimpleResource,
)

from .dafny_protocol import DafnyRequest
from .models import UseSimpleResourceInput
from simple_constraints.smithygenerated.models import GetConstraintsInput
from simple_errors.smithygenerated.models import GetErrorsInput
from simple_extendable_resources.smithygenerated.models import (
    CreateExtendableResourceInput,
    GetExtendableResourceDataInput,
    GetExtendableResourceErrorsInput,
    UseExtendableResourceErrorsInput,
    UseExtendableResourceInput,
)
from simple_resources.smithygenerated.models import (
    GetResourceDataInput,
    GetResourcesInput,
)

from .config import Config


async def _serialize_get_extendable_resource_data(input: GetExtendableResourceDataInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GetExtendableResourceData", dafny_operation_input=DafnyGetExtendableResourceDataInput(blobValue=((Option_Some(input.blob_value)) if (input.blob_value is not None) else (Option_None())),
    booleanValue=((Option_Some(input.boolean_value)) if (input.boolean_value is not None) else (Option_None())),
    stringValue=((Option_Some(input.string_value)) if (input.string_value is not None) else (Option_None())),
    integerValue=((Option_Some(input.integer_value)) if (input.integer_value is not None) else (Option_None())),
    longValue=((Option_Some(input.long_value)) if (input.long_value is not None) else (Option_None())),
    ))

async def _serialize_always_modeled_error(input: GetExtendableResourceErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="AlwaysModeledError", dafny_operation_input=DafnyGetExtendableResourceErrorsInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_get_simple_resource(input: GetResourcesInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GetSimpleResource", dafny_operation_input=DafnyGetResourcesInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_always_error(input: GetErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="AlwaysError", dafny_operation_input=DafnyGetErrorsInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_use_local_extendable_resource(input: GetExtendableResourceDataInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UseLocalExtendableResource", dafny_operation_input=DafnyGetExtendableResourceDataInput(blobValue=((Option_Some(input.blob_value)) if (input.blob_value is not None) else (Option_None())),
    booleanValue=((Option_Some(input.boolean_value)) if (input.boolean_value is not None) else (Option_None())),
    stringValue=((Option_Some(input.string_value)) if (input.string_value is not None) else (Option_None())),
    integerValue=((Option_Some(input.integer_value)) if (input.integer_value is not None) else (Option_None())),
    longValue=((Option_Some(input.long_value)) if (input.long_value is not None) else (Option_None())),
    ))

async def _serialize_always_native_error(input: GetErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="AlwaysNativeError", dafny_operation_input=DafnyGetErrorsInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_local_extendable_resource_always_native_error(input: GetExtendableResourceErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="LocalExtendableResourceAlwaysNativeError", dafny_operation_input=DafnyGetExtendableResourceErrorsInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_always_multiple_errors(input: GetExtendableResourceErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="AlwaysMultipleErrors", dafny_operation_input=DafnyGetExtendableResourceErrorsInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_always_multiple_errors(input: GetErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="AlwaysMultipleErrors", dafny_operation_input=DafnyGetErrorsInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_use_extendable_resource(input: UseExtendableResourceInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UseExtendableResource", dafny_operation_input=DafnyUseExtendableResourceInput(resource=input.resource,
    input=DafnyGetExtendableResourceDataInput(blobValue=((Option_Some(input.input.blob_value)) if (input.input.blob_value is not None) else (Option_None())),
    booleanValue=((Option_Some(input.input.boolean_value)) if (input.input.boolean_value is not None) else (Option_None())),
    stringValue=((Option_Some(input.input.string_value)) if (input.input.string_value is not None) else (Option_None())),
    integerValue=((Option_Some(input.input.integer_value)) if (input.input.integer_value is not None) else (Option_None())),
    longValue=((Option_Some(input.input.long_value)) if (input.input.long_value is not None) else (Option_None())),
    ),
    ))

async def _serialize_use_extendable_resource_always_multiple_errors(input: UseExtendableResourceErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UseExtendableResourceAlwaysMultipleErrors", dafny_operation_input=DafnyUseExtendableResourceErrorsInput(resource=input.resource,
    input=DafnyGetExtendableResourceErrorsInput(value=((Option_Some(input.input.value)) if (input.input.value is not None) else (Option_None())),
    ),
    ))

async def _serialize_create_extendable_resource(input: CreateExtendableResourceInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="CreateExtendableResource", dafny_operation_input=DafnyCreateExtendableResourceInput(name=input.name,
    ))

async def _serialize_get_resources(input: GetResourcesInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GetResources", dafny_operation_input=DafnyGetResourcesInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_local_extendable_resource_always_modeled_error(input: GetExtendableResourceErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="LocalExtendableResourceAlwaysModeledError", dafny_operation_input=DafnyGetExtendableResourceErrorsInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_use_extendable_resource_always_modeled_error(input: UseExtendableResourceErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UseExtendableResourceAlwaysModeledError", dafny_operation_input=DafnyUseExtendableResourceErrorsInput(resource=input.resource,
    input=DafnyGetExtendableResourceErrorsInput(value=((Option_Some(input.input.value)) if (input.input.value is not None) else (Option_None())),
    ),
    ))

async def _serialize_always_opaque_error(input: GetExtendableResourceErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="AlwaysOpaqueError", dafny_operation_input=DafnyGetExtendableResourceErrorsInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_use_extendable_resource_always_opaque_error(input: UseExtendableResourceErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UseExtendableResourceAlwaysOpaqueError", dafny_operation_input=DafnyUseExtendableResourceErrorsInput(resource=input.resource,
    input=DafnyGetExtendableResourceErrorsInput(value=((Option_Some(input.input.value)) if (input.input.value is not None) else (Option_None())),
    ),
    ))

async def _serialize_use_simple_resource(input: UseSimpleResourceInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UseSimpleResource", dafny_operation_input=DafnyUseSimpleResourceInput(value=input.value,
    input=DafnyGetResourceDataInput(blobValue=((Option_Some(input.input.blob_value)) if (input.input.blob_value is not None) else (Option_None())),
    booleanValue=((Option_Some(input.input.boolean_value)) if (input.input.boolean_value is not None) else (Option_None())),
    stringValue=((Option_Some(input.input.string_value)) if (input.input.string_value is not None) else (Option_None())),
    integerValue=((Option_Some(input.input.integer_value)) if (input.input.integer_value is not None) else (Option_None())),
    longValue=((Option_Some(input.input.long_value)) if (input.input.long_value is not None) else (Option_None())),
    ),
    ))

async def _serialize_use_local_constraints_service(input: GetConstraintsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="UseLocalConstraintsService", dafny_operation_input=DafnyGetConstraintsInput(MyString=((Option_Some(input.my_string)) if (input.my_string is not None) else (Option_None())),
    NonEmptyString=((Option_Some(input.non_empty_string)) if (input.non_empty_string is not None) else (Option_None())),
    StringLessThanOrEqualToTen=((Option_Some(input.string_less_than_or_equal_to_ten)) if (input.string_less_than_or_equal_to_ten is not None) else (Option_None())),
    MyBlob=((Option_Some(input.my_blob)) if (input.my_blob is not None) else (Option_None())),
    NonEmptyBlob=((Option_Some(input.non_empty_blob)) if (input.non_empty_blob is not None) else (Option_None())),
    BlobLessThanOrEqualToTen=((Option_Some(input.blob_less_than_or_equal_to_ten)) if (input.blob_less_than_or_equal_to_ten is not None) else (Option_None())),
    MyList=((Option_Some(Seq([list_element for list_element in input.my_list]))) if (input.my_list is not None) else (Option_None())),
    NonEmptyList=((Option_Some(Seq([list_element for list_element in input.non_empty_list]))) if (input.non_empty_list is not None) else (Option_None())),
    ListLessThanOrEqualToTen=((Option_Some(Seq([list_element for list_element in input.list_less_than_or_equal_to_ten]))) if (input.list_less_than_or_equal_to_ten is not None) else (Option_None())),
    MyMap=((Option_Some(Map({key: value for (key, value) in input.my_map.items() }))) if (input.my_map is not None) else (Option_None())),
    NonEmptyMap=((Option_Some(Map({key: value for (key, value) in input.non_empty_map.items() }))) if (input.non_empty_map is not None) else (Option_None())),
    MapLessThanOrEqualToTen=((Option_Some(Map({key: value for (key, value) in input.map_less_than_or_equal_to_ten.items() }))) if (input.map_less_than_or_equal_to_ten is not None) else (Option_None())),
    Alphabetic=((Option_Some(input.alphabetic)) if (input.alphabetic is not None) else (Option_None())),
    OneToTen=((Option_Some(input.one_to_ten)) if (input.one_to_ten is not None) else (Option_None())),
    GreaterThanOne=((Option_Some(input.greater_than_one)) if (input.greater_than_one is not None) else (Option_None())),
    LessThanTen=((Option_Some(input.less_than_ten)) if (input.less_than_ten is not None) else (Option_None())),
    MyUniqueList=((Option_Some(Seq([list_element for list_element in input.my_unique_list]))) if (input.my_unique_list is not None) else (Option_None())),
    MyComplexUniqueList=((Option_Some(Seq([DafnyComplexListElement(value=((Option_Some(list_element.value)) if (list_element.value is not None) else (Option_None())),
    blob=((Option_Some(list_element.blob)) if (list_element.blob is not None) else (Option_None())),
    ) for list_element in input.my_complex_unique_list]))) if (input.my_complex_unique_list is not None) else (Option_None())),
    MyUtf8Bytes=((Option_Some(input.my_utf8_bytes)) if (input.my_utf8_bytes is not None) else (Option_None())),
    MyListOfUtf8Bytes=((Option_Some(Seq([list_element for list_element in input.my_list_of_utf8_bytes]))) if (input.my_list_of_utf8_bytes is not None) else (Option_None())),
    ))

async def _serialize_local_extendable_resource_always_multiple_errors(input: GetExtendableResourceErrorsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="LocalExtendableResourceAlwaysMultipleErrors", dafny_operation_input=DafnyGetExtendableResourceErrorsInput(value=((Option_Some(input.value)) if (input.value is not None) else (Option_None())),
    ))

async def _serialize_get_resource_data(input: GetResourceDataInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GetResourceData", dafny_operation_input=DafnyGetResourceDataInput(blobValue=((Option_Some(input.blob_value)) if (input.blob_value is not None) else (Option_None())),
    booleanValue=((Option_Some(input.boolean_value)) if (input.boolean_value is not None) else (Option_None())),
    stringValue=((Option_Some(input.string_value)) if (input.string_value is not None) else (Option_None())),
    integerValue=((Option_Some(input.integer_value)) if (input.integer_value is not None) else (Option_None())),
    longValue=((Option_Some(input.long_value)) if (input.long_value is not None) else (Option_None())),
    ))

async def _serialize_get_constraints(input: GetConstraintsInput, config: Config) -> DafnyRequest:
    return DafnyRequest(operation_name="GetConstraints", dafny_operation_input=DafnyGetConstraintsInput(MyString=((Option_Some(input.my_string)) if (input.my_string is not None) else (Option_None())),
    NonEmptyString=((Option_Some(input.non_empty_string)) if (input.non_empty_string is not None) else (Option_None())),
    StringLessThanOrEqualToTen=((Option_Some(input.string_less_than_or_equal_to_ten)) if (input.string_less_than_or_equal_to_ten is not None) else (Option_None())),
    MyBlob=((Option_Some(input.my_blob)) if (input.my_blob is not None) else (Option_None())),
    NonEmptyBlob=((Option_Some(input.non_empty_blob)) if (input.non_empty_blob is not None) else (Option_None())),
    BlobLessThanOrEqualToTen=((Option_Some(input.blob_less_than_or_equal_to_ten)) if (input.blob_less_than_or_equal_to_ten is not None) else (Option_None())),
    MyList=((Option_Some(Seq([list_element for list_element in input.my_list]))) if (input.my_list is not None) else (Option_None())),
    NonEmptyList=((Option_Some(Seq([list_element for list_element in input.non_empty_list]))) if (input.non_empty_list is not None) else (Option_None())),
    ListLessThanOrEqualToTen=((Option_Some(Seq([list_element for list_element in input.list_less_than_or_equal_to_ten]))) if (input.list_less_than_or_equal_to_ten is not None) else (Option_None())),
    MyMap=((Option_Some(Map({key: value for (key, value) in input.my_map.items() }))) if (input.my_map is not None) else (Option_None())),
    NonEmptyMap=((Option_Some(Map({key: value for (key, value) in input.non_empty_map.items() }))) if (input.non_empty_map is not None) else (Option_None())),
    MapLessThanOrEqualToTen=((Option_Some(Map({key: value for (key, value) in input.map_less_than_or_equal_to_ten.items() }))) if (input.map_less_than_or_equal_to_ten is not None) else (Option_None())),
    Alphabetic=((Option_Some(input.alphabetic)) if (input.alphabetic is not None) else (Option_None())),
    OneToTen=((Option_Some(input.one_to_ten)) if (input.one_to_ten is not None) else (Option_None())),
    GreaterThanOne=((Option_Some(input.greater_than_one)) if (input.greater_than_one is not None) else (Option_None())),
    LessThanTen=((Option_Some(input.less_than_ten)) if (input.less_than_ten is not None) else (Option_None())),
    MyUniqueList=((Option_Some(Seq([list_element for list_element in input.my_unique_list]))) if (input.my_unique_list is not None) else (Option_None())),
    MyComplexUniqueList=((Option_Some(Seq([DafnyComplexListElement(value=((Option_Some(list_element.value)) if (list_element.value is not None) else (Option_None())),
    blob=((Option_Some(list_element.blob)) if (list_element.blob is not None) else (Option_None())),
    ) for list_element in input.my_complex_unique_list]))) if (input.my_complex_unique_list is not None) else (Option_None())),
    MyUtf8Bytes=((Option_Some(input.my_utf8_bytes)) if (input.my_utf8_bytes is not None) else (Option_None())),
    MyListOfUtf8Bytes=((Option_Some(Seq([list_element for list_element in input.my_list_of_utf8_bytes]))) if (input.my_list_of_utf8_bytes is not None) else (Option_None())),
    ))
