# Code generated by smithy-python-codegen DO NOT EDIT.

import simple_constraints.smithygenerated.dafny_to_smithy

import simple_constraints.smithygenerated.config
from .models import ComplexListElement, GetConstraintsInput, GetConstraintsOutput


def DafnyToSmithy_simple_constraints_ComplexListElement(input):
    return ComplexListElement(
        value=input.value.UnwrapOr(None).VerbatimString(False),
        blob=bytes(input.blob.UnwrapOr(None)),
    )

def DafnyToSmithy_simple_constraints_GetConstraintsInput(input):
    print("MYBYTES")
    print(input.MyUtf8Bytes.UnwrapOr(None))
    return GetConstraintsInput(
        my_string=input.MyString.UnwrapOr(None).VerbatimString(False),
        non_empty_string=input.NonEmptyString.UnwrapOr(None).VerbatimString(False),
        string_less_than_or_equal_to_ten=input.StringLessThanOrEqualToTen.UnwrapOr(None).VerbatimString(False),
        my_blob=bytes(input.MyBlob.UnwrapOr(None)),
        non_empty_blob=bytes(input.NonEmptyBlob.UnwrapOr(None)),
        blob_less_than_or_equal_to_ten=bytes(input.BlobLessThanOrEqualToTen.UnwrapOr(None)),
        my_list=[list_element.VerbatimString(False) for list_element in input.MyList.UnwrapOr(None)],
        non_empty_list=[list_element.VerbatimString(False) for list_element in input.NonEmptyList.UnwrapOr(None)],
        list_less_than_or_equal_to_ten=[list_element.VerbatimString(False) for list_element in input.ListLessThanOrEqualToTen.UnwrapOr(None)],
        my_map={key.VerbatimString(False): value.VerbatimString(False) for (key, value) in input.MyMap.UnwrapOr(None).items },
        non_empty_map={key.VerbatimString(False): value.VerbatimString(False) for (key, value) in input.NonEmptyMap.UnwrapOr(None).items },
        map_less_than_or_equal_to_ten={key.VerbatimString(False): value.VerbatimString(False) for (key, value) in input.MapLessThanOrEqualToTen.UnwrapOr(None).items },
        alphabetic=input.Alphabetic.UnwrapOr(None).VerbatimString(False),
        one_to_ten=input.OneToTen.UnwrapOr(None),
        greater_than_one=input.GreaterThanOne.UnwrapOr(None),
        less_than_ten=input.LessThanTen.UnwrapOr(None),
        my_unique_list=[list_element.VerbatimString(False) for list_element in input.MyUniqueList.UnwrapOr(None)],
        my_complex_unique_list=[simple_constraints.smithygenerated.dafny_to_smithy.DafnyToSmithy_simple_constraints_ComplexListElement(list_element) for list_element in input.MyComplexUniqueList.UnwrapOr(None)],
        my_utf8_bytes=bytes(input.MyUtf8Bytes.UnwrapOr(None)),
        my_list_of_utf8_bytes=[bytes(list_element) for list_element in input.MyListOfUtf8Bytes.UnwrapOr(None)],
    )

def DafnyToSmithy_simple_constraints_GetConstraintsOutput(input):
    return GetConstraintsOutput(
        my_string=input.MyString.UnwrapOr(None).VerbatimString(False),
        non_empty_string=input.NonEmptyString.UnwrapOr(None).VerbatimString(False),
        string_less_than_or_equal_to_ten=input.StringLessThanOrEqualToTen.UnwrapOr(None).VerbatimString(False),
        my_blob=bytes(input.MyBlob.UnwrapOr(None)),
        non_empty_blob=bytes(input.NonEmptyBlob.UnwrapOr(None)),
        blob_less_than_or_equal_to_ten=bytes(input.BlobLessThanOrEqualToTen.UnwrapOr(None)),
        my_list=[list_element.VerbatimString(False) for list_element in input.MyList.UnwrapOr(None)],
        non_empty_list=[list_element.VerbatimString(False) for list_element in input.NonEmptyList.UnwrapOr(None)],
        list_less_than_or_equal_to_ten=[list_element.VerbatimString(False) for list_element in input.ListLessThanOrEqualToTen.UnwrapOr(None)],
        my_map={key.VerbatimString(False): value.VerbatimString(False) for (key, value) in input.MyMap.UnwrapOr(None).items },
        non_empty_map={key.VerbatimString(False): value.VerbatimString(False) for (key, value) in input.NonEmptyMap.UnwrapOr(None).items },
        map_less_than_or_equal_to_ten={key.VerbatimString(False): value.VerbatimString(False) for (key, value) in input.MapLessThanOrEqualToTen.UnwrapOr(None).items },
        alphabetic=input.Alphabetic.UnwrapOr(None).VerbatimString(False),
        one_to_ten=input.OneToTen.UnwrapOr(None),
        greater_than_one=input.GreaterThanOne.UnwrapOr(None),
        less_than_ten=input.LessThanTen.UnwrapOr(None),
        my_unique_list=[list_element.VerbatimString(False) for list_element in input.MyUniqueList.UnwrapOr(None)],
        my_complex_unique_list=[simple_constraints.smithygenerated.dafny_to_smithy.DafnyToSmithy_simple_constraints_ComplexListElement(list_element) for list_element in input.MyComplexUniqueList.UnwrapOr(None)],
        my_utf8_bytes=bytes(input.MyUtf8Bytes.UnwrapOr(None)),
        my_list_of_utf8_bytes=[bytes(list_element) for list_element in input.MyListOfUtf8Bytes.UnwrapOr(None)],
    )

def DafnyToSmithy_simple_constraints_SimpleConstraintsConfig(input):
    return simple_constraints.smithygenerated.config.SimpleConstraintsConfig(
    )
