# Code generated by smithy-python-codegen DO NOT EDIT.

from Wrappers import Option_None, Option_Some
from _dafny import Map, Seq
import module_
from simple_constraints_internaldafny_types import (
    ComplexListElement_ComplexListElement as DafnyComplexListElement,
    GetConstraintsInput_GetConstraintsInput as DafnyGetConstraintsInput,
    GetConstraintsOutput_GetConstraintsOutput as DafnyGetConstraintsOutput,
    SimpleConstraintsConfig_SimpleConstraintsConfig as DafnySimpleConstraintsConfig,
)
import simple_constraints.smithygenerated.smithy_to_dafny


def SmithyToDafny_simple_constraints_GetConstraintsInput(input):
    return DafnyGetConstraintsInput(
        MyString=((Option_Some(Seq(input.my_string))) if (input.my_string is not None) else (Option_None())),
        NonEmptyString=((Option_Some(Seq(input.non_empty_string))) if (input.non_empty_string is not None) else (Option_None())),
        StringLessThanOrEqualToTen=((Option_Some(Seq(input.string_less_than_or_equal_to_ten))) if (input.string_less_than_or_equal_to_ten is not None) else (Option_None())),
        MyBlob=((Option_Some(Seq(input.my_blob))) if (input.my_blob is not None) else (Option_None())),
        NonEmptyBlob=((Option_Some(Seq(input.non_empty_blob))) if (input.non_empty_blob is not None) else (Option_None())),
        BlobLessThanOrEqualToTen=((Option_Some(Seq(input.blob_less_than_or_equal_to_ten))) if (input.blob_less_than_or_equal_to_ten is not None) else (Option_None())),
        MyList=
        ((Option_Some(Seq([Seq(list_element) for list_element in input.my_list]))) if (input.my_list is not None) else (Option_None())),
        NonEmptyList=
        ((Option_Some(Seq([Seq(list_element) for list_element in input.non_empty_list]))) if (input.non_empty_list is not None) else (Option_None())),
        ListLessThanOrEqualToTen=
        ((Option_Some(Seq([Seq(list_element) for list_element in input.list_less_than_or_equal_to_ten]))) if (input.list_less_than_or_equal_to_ten is not None) else (Option_None())),
        MyMap=
        ((Option_Some(Map({Seq(key): Seq(value) for (key, value) in input.my_map.items() }))) if (input.my_map is not None) else (Option_None())),
        NonEmptyMap=
        ((Option_Some(Map({Seq(key): Seq(value) for (key, value) in input.non_empty_map.items() }))) if (input.non_empty_map is not None) else (Option_None())),
        MapLessThanOrEqualToTen=
        ((Option_Some(Map({Seq(key): Seq(value) for (key, value) in input.map_less_than_or_equal_to_ten.items() }))) if (input.map_less_than_or_equal_to_ten is not None) else (Option_None())),
        Alphabetic=((Option_Some(Seq(input.alphabetic))) if (input.alphabetic is not None) else (Option_None())),
        OneToTen=((Option_Some(input.one_to_ten)) if (input.one_to_ten is not None) else (Option_None())),
        GreaterThanOne=((Option_Some(input.greater_than_one)) if (input.greater_than_one is not None) else (Option_None())),
        LessThanTen=((Option_Some(input.less_than_ten)) if (input.less_than_ten is not None) else (Option_None())),
        MyUniqueList=
        ((Option_Some(Seq([Seq(list_element) for list_element in input.my_unique_list]))) if (input.my_unique_list is not None) else (Option_None())),
        MyComplexUniqueList=
        ((Option_Some(Seq([simple_constraints.smithygenerated.smithy_to_dafny.SmithyToDafny_simple_constraints_ComplexListElement(list_element) for list_element in input.my_complex_unique_list]))) if (input.my_complex_unique_list is not None) else (Option_None())),
        MyUtf8Bytes=((Option_Some(Seq(input.my_utf8_bytes))) if (input.my_utf8_bytes is not None) else (Option_None())),
        MyListOfUtf8Bytes=
        ((Option_Some(Seq([Seq(list_element) for list_element in input.my_list_of_utf8_bytes]))) if (input.my_list_of_utf8_bytes is not None) else (Option_None())),
    )

def SmithyToDafny_simple_constraints_ComplexListElement(input):
    return DafnyComplexListElement(
        value=((Option_Some(Seq(input.value))) if (input.value is not None) else (Option_None())),
        blob=((Option_Some(Seq(input.blob))) if (input.blob is not None) else (Option_None())),
    )

def SmithyToDafny_simple_constraints_GetConstraintsOutput(input):
    return DafnyGetConstraintsOutput(
        MyString=((Option_Some(Seq(input.my_string))) if (input.my_string is not None) else (Option_None())),
        NonEmptyString=((Option_Some(Seq(input.non_empty_string))) if (input.non_empty_string is not None) else (Option_None())),
        StringLessThanOrEqualToTen=((Option_Some(Seq(input.string_less_than_or_equal_to_ten))) if (input.string_less_than_or_equal_to_ten is not None) else (Option_None())),
        MyBlob=((Option_Some(Seq(input.my_blob))) if (input.my_blob is not None) else (Option_None())),
        NonEmptyBlob=((Option_Some(Seq(input.non_empty_blob))) if (input.non_empty_blob is not None) else (Option_None())),
        BlobLessThanOrEqualToTen=((Option_Some(Seq(input.blob_less_than_or_equal_to_ten))) if (input.blob_less_than_or_equal_to_ten is not None) else (Option_None())),
        MyList=
        ((Option_Some(Seq([Seq(list_element) for list_element in input.my_list]))) if (input.my_list is not None) else (Option_None())),
        NonEmptyList=
        ((Option_Some(Seq([Seq(list_element) for list_element in input.non_empty_list]))) if (input.non_empty_list is not None) else (Option_None())),
        ListLessThanOrEqualToTen=
        ((Option_Some(Seq([Seq(list_element) for list_element in input.list_less_than_or_equal_to_ten]))) if (input.list_less_than_or_equal_to_ten is not None) else (Option_None())),
        MyMap=
        ((Option_Some(Map({Seq(key): Seq(value) for (key, value) in input.my_map.items() }))) if (input.my_map is not None) else (Option_None())),
        NonEmptyMap=
        ((Option_Some(Map({Seq(key): Seq(value) for (key, value) in input.non_empty_map.items() }))) if (input.non_empty_map is not None) else (Option_None())),
        MapLessThanOrEqualToTen=
        ((Option_Some(Map({Seq(key): Seq(value) for (key, value) in input.map_less_than_or_equal_to_ten.items() }))) if (input.map_less_than_or_equal_to_ten is not None) else (Option_None())),
        Alphabetic=((Option_Some(Seq(input.alphabetic))) if (input.alphabetic is not None) else (Option_None())),
        OneToTen=((Option_Some(input.one_to_ten)) if (input.one_to_ten is not None) else (Option_None())),
        GreaterThanOne=((Option_Some(input.greater_than_one)) if (input.greater_than_one is not None) else (Option_None())),
        LessThanTen=((Option_Some(input.less_than_ten)) if (input.less_than_ten is not None) else (Option_None())),
        MyUniqueList=
        ((Option_Some(Seq([Seq(list_element) for list_element in input.my_unique_list]))) if (input.my_unique_list is not None) else (Option_None())),
        MyComplexUniqueList=
        ((Option_Some(Seq([simple_constraints.smithygenerated.smithy_to_dafny.SmithyToDafny_simple_constraints_ComplexListElement(list_element) for list_element in input.my_complex_unique_list]))) if (input.my_complex_unique_list is not None) else (Option_None())),
        MyUtf8Bytes=((Option_Some(Seq(input.my_utf8_bytes))) if (input.my_utf8_bytes is not None) else (Option_None())),
        MyListOfUtf8Bytes=
        ((Option_Some(Seq([Seq(list_element) for list_element in input.my_list_of_utf8_bytes]))) if (input.my_list_of_utf8_bytes is not None) else (Option_None())),
    )

def SmithyToDafny_simple_constraints_SimpleConstraintsConfig(input):
    return DafnySimpleConstraintsConfig(
    )
