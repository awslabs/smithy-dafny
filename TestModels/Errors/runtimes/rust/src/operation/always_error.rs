// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Orchestration and serialization glue logic for `AlwaysError`.
#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AlwaysError;
impl AlwaysError {
    /// Creates a new `AlwaysError`
    pub fn new() -> Self {
        Self
    }
    pub(crate) async fn send(
        client: &crate::client::Client,
        input: crate::operation::always_error::AlwaysErrorInput,
    ) -> ::std::result::Result<
        crate::operation::always_error::AlwaysErrorOutput,
        crate::types::error::Error,
    > {
        let inner_input = crate::conversions::always_error::_always_error_input::to_dafny(input);
        let inner_result =
            ::dafny_runtime::md!(client.dafny_client.clone()).AlwaysError(&inner_input);
        if matches!(
            inner_result.as_ref(),
            crate::r#_Wrappers_Compile::Result::Success { .. }
        ) {
            Ok(
                crate::conversions::always_error::_always_error_output::from_dafny(
                    inner_result.value().clone(),
                ),
            )
        } else {
            Err(crate::conversions::error::from_dafny(
                inner_result.error().clone(),
            ))
        }
    }
}

pub use crate::operation::always_error::_always_error_output::AlwaysErrorOutput;

pub use crate::operation::always_error::_always_error_input::AlwaysErrorInput;

mod _always_error_input;

mod _always_error_output;

/// Builders
pub mod builders;
