// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

use std::any::Any;

#[allow(dead_code)]
pub fn to_dafny_error(
    value: crate::operation::always_error::AlwaysErrorError,
) -> ::std::rc::Rc<::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error> {
    match value {
    crate::operation::always_error::AlwaysErrorError::SimpleErrorsException(e) => 
      ::std::rc::Rc::new(::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::SimpleErrorsException { 
        message: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&e.message),
      }),
    crate::operation::always_error::AlwaysErrorError::Unhandled(unhandled) =>
      ::std::rc::Rc::new(::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::Opaque { 
        obj: ::dafny_runtime::UpcastTo::<::dafny_runtime::Object<dyn Any>>::upcast_to(::dafny_runtime::object::new(unhandled)) 
      }),
  }
}

#[allow(dead_code)]
pub fn from_dafny_error(
    dafny_value: ::std::rc::Rc<
        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error,
    >,
) -> crate::operation::always_error::AlwaysErrorError {
  if matches!(&dafny_value.as_ref(), ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::SimpleErrorsException { .. }) {
    // Any other modeled shape conversion would go here too
    let message = dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(dafny_value.message());
    crate::operation::always_error::AlwaysErrorError::SimpleErrorsException(
      crate::types::error::SimpleErrorsException {
        message,
        meta: ::aws_smithy_types::error::ErrorMetadata::builder().message(message).build()
      }
    )
  } else {
    crate::operation::always_error::AlwaysErrorError::unhandled(
      // TODO: Doesn't quite work because DafnyError doesn't implement Sync or Send.]
      // But that's an independent problem to solve: either we change our unhandled to
      // use Box<dyn std::error::Error> instead of ::aws_smithy_runtime_api::box_error::BoxError,
      // or we figure out a way to support Send and Sync on (a subset of) Dafny values.
      //
      // The important point is that we're not throwing away any of the information in the dafny_value.
      // In a pinch a caller could use Box.downcast to get at the data in a Dafny CollectionOfErrors.
      ::dafny_standard_library::conversion::error_from_dafny(dafny_value)
    )
  }
}

pub mod _always_error_input;

pub mod _always_error_output;
