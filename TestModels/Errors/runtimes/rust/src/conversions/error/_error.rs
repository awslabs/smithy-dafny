// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(dead_code)]
use std::borrow::Borrow;
pub fn to_dafny(
    value: crate::types::error::Error,
) -> ::std::rc::Rc<::simple_errors_dafny::_simple_derrors_dinternaldafny_dtypes::Error> {
    let inner = match value {
        crate::types::error::Error::SimpleErrorsException{message} =>     ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::SimpleErrorsException {
            message : dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&message)
          },
          crate::types::error::Error::CollectionOfErrors{list, message} =>     ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::CollectionOfErrors {
            message : dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&message),
            list : dafny_runtime::dafny_runtime_conversions::vec_to_dafny_sequence(&list, |e| to_dafny(e.clone()))
        },
          crate::types::error::Error::Opaque{obj} => ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::Opaque {
            obj : ::dafny_runtime::Object(obj.0)
          },
    };
    ::std::rc::Rc::new(inner)
}

#[allow(dead_code)]
pub fn from_dafny(
    dafny_value: ::std::rc::Rc<
        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error,
    >,
) -> crate::types::error::Error {
    match dafny_value.borrow() {
        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::SimpleErrorsException{message} =>
        crate::types::error::Error::SimpleErrorsException {message :
            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&message)
        },
        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::CollectionOfErrors{list, message} =>
        crate::types::error::Error::CollectionOfErrors {message :
            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&message),
            list : dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(&list, |e| from_dafny(e.clone()))
        },
        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::Opaque{obj} =>
        match &obj.0 {
            None => crate::types::error::Error::Opaque{obj : crate::types::error::Object(None)},
            Some(x) => crate::types::error::Error::Opaque{obj : crate::types::error::Object(Some(x.clone()))},
        },
    }
}
