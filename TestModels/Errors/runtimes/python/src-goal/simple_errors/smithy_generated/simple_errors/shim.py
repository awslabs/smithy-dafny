# Code generated by smithy-python-codegen DO NOT EDIT.

from .models import GetErrorsInput

import Wrappers_Compile
import asyncio
import simple.errors.internaldafny.types
import simple_errors.smithy_generated.simple_errors.client as client_impl
from simple_errors.smithy_generated.simple_errors.errors import SimpleErrorsException

class SimpleErrorsShim(simple.errors.internaldafny.types.ISimpleErrorsClient):
    def __init__(self, _impl: client_impl) :
        self._impl = _impl

    def AlwaysError(self, input: simple.errors.internaldafny.types.GetErrorsInput_GetErrorsInput) -> simple.errors.internaldafny.types.GetErrorsOutput_GetErrorsOutput:
            unwrapped_request: GetErrorsInput = GetErrorsInput(value=input.value)
            print("can I do this in the SHIM??")
            try:
              wrapped_response = asyncio.run(self._impl.always_error(unwrapped_request))
            except SimpleErrorsException as e:
              return Wrappers_Compile.Result_Failure(smithy_error_to_dafny_error(e))
            print("I CAN do this in the SHIM!!")
            return Wrappers_Compile.Result_Success(wrapped_response)
    def AlwaysNativeError(self, input: simple.errors.internaldafny.types.GetErrorsInput_GetErrorsInput) -> simple.errors.internaldafny.types.GetErrorsOutput_GetErrorsOutput:
            unwrapped_request: GetErrorsInput = GetErrorsInput(value=input.value)
            wrapped_response = asyncio.run(self._impl.always_native_error(unwrapped_request))
            return Wrappers_Compile.Result_Success(wrapped_response)
    def AlwaysMultipleErrors(self, input: simple.errors.internaldafny.types.GetErrorsInput_GetErrorsInput) -> simple.errors.internaldafny.types.GetErrorsOutput_GetErrorsOutput:
            unwrapped_request: GetErrorsInput = GetErrorsInput(value=input.value)
            wrapped_response = asyncio.run(self._impl.always_multiple_errors(unwrapped_request))
            return Wrappers_Compile.Result_Success(wrapped_response)

def smithy_error_to_dafny_error(e):
    print("smithy_error_to_dafny_error")
    print(e)
    if isinstance(e, SimpleErrorsException):
      print("is instance of SimpleErrorsException")
      return simple.errors.internaldafny.types.Error_SimpleErrorsException(message=e.message)