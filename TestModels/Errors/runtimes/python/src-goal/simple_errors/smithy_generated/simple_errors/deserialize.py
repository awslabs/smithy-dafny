# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import Any
import _dafny

from .dafny_protocol import DafnyResponse
from simple.errors.internaldafny.types import (
    GetErrorsOutput_GetErrorsOutput as DafnyGetErrorsOutput,
    Error,
    Error_SimpleErrorsException,
)

from .config import Config
from .errors import SimpleErrorsException
from .models import GetErrorsOutput


async def _deserialize_always_error(input: DafnyGetErrorsOutput, config: Config) -> GetErrorsOutput:
  print("_deserialize_always_error")
  print(input)
  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetErrorsOutput(value=input.value.value)

async def _deserialize_always_multiple_errors(input: DafnyGetErrorsOutput, config: Config) -> GetErrorsOutput:

  return GetErrorsOutput(value=input.value.value)

async def _deserialize_always_native_error(input: DafnyGetErrorsOutput, config: Config) -> GetErrorsOutput:

  return GetErrorsOutput(value=input.value.value)

async def _deserialize_error_simple_errors_exception(
    # http_response: DafnyResponse,
    # config: Config,
    # parsed_body: dict[str, Document]| None,
    default_message: str,
) -> SimpleErrorsException:
    kwargs: dict[str, Any] = {"message": default_message}

async def _deserialize_error(error: Error):
   print("_deserialize_error")
   print(error)
   if error.is_SimpleErrorsException:
      return SimpleErrorsException(message=error.message)