# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import Any

from .errors import ServiceError, SimpleErrorsException, CollectionOfErrors, OpaqueError
from simple.errors.internaldafny.types import (
    Error,
    Error_SimpleErrorsException,
    GetErrorsOutput_GetErrorsOutput as DafnyGetErrorsOutput,
)

from .config import Config
from .models import GetErrorsOutput


async def _deserialize_always_error(input: DafnyGetErrorsOutput, config: Config) -> GetErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetErrorsOutput(value=input.value.value)

async def _deserialize_always_multiple_errors(input: DafnyGetErrorsOutput, config: Config) -> GetErrorsOutput:

  print("deser alwaysmultiple")
  print(input)
  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetErrorsOutput(value=input.value.value)

async def _deserialize_always_native_error(input: DafnyGetErrorsOutput, config: Config) -> GetErrorsOutput:

  if input.IsFailure():
    return await _deserialize_error(input.error)
  return GetErrorsOutput(value=input.value.value)

async def _deserialize_error(
    error: Error
) -> ServiceError:
  if error.is_Opaque:
    return OpaqueError(obj=error.obj)
  if error.is_CollectionOfErrors:
    print("deser error collection")
    print(error)
    print(CollectionOfErrors(message=error.message, list=error.list))
    return CollectionOfErrors(message=error.message, list=error.list)
  if error.is_SimpleErrorsException:
    return SimpleErrorsException(message=error.message)
