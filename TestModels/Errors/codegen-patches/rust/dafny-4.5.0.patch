diff --git b/TestModels/Errors/runtimes/rust/src/client.rs a/TestModels/Errors/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..1f570e9d
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/client.rs
@@ -0,0 +1,44 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<
+        dyn ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::ISimpleErrorsClient,
+    >,
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_errors_config::SimpleErrorsConfig,
+    ) -> Result<Self, BuildError> {
+        // If this service had any configuration properties,
+        // they would need converting here too.
+        let inner = ::simple_errors_dafny::_simple_derrors_dinternaldafny::_default::SimpleErrors(
+            &crate::conversions::simple_errors_config::to_dafny(conf),
+        );
+        if matches!(
+            inner.as_ref(),
+            ::simple_errors_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::UpcastTo::<dafny_runtime::Object<(dyn ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::ISimpleErrorsClient + 'static)>>::upcast_to(inner.Extract()),
+        })
+    }
+}
+
+mod always_native_error;
+
+mod always_multiple_errors;
+
+mod always_error;
diff --git b/TestModels/Errors/runtimes/rust/src/client/always_error.rs a/TestModels/Errors/runtimes/rust/src/client/always_error.rs
new file mode 100644
index 00000000..59df452c
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/client/always_error.rs
@@ -0,0 +1,15 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`AlwaysError`](crate::operation::always_error::builders::AlwaysErrorFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::always_error::builders::AlwaysErrorFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::always_error::builders::AlwaysErrorFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`AlwaysErrorOutput`](crate::operation::always_error::AlwaysErrorOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::always_error::AlwaysErrorOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<AlwaysErrorError>`](crate::operation::always_error::AlwaysErrorError)
+    pub fn always_error(
+        &self,
+    ) -> crate::operation::always_error::builders::AlwaysErrorFluentBuilder {
+        crate::operation::always_error::builders::AlwaysErrorFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/client/always_multiple_errors.rs a/TestModels/Errors/runtimes/rust/src/client/always_multiple_errors.rs
new file mode 100644
index 00000000..2f991dae
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/client/always_multiple_errors.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`AlwaysMultipleErrors`](crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`AlwaysMultipleErrorsOutput`](crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<AlwaysMultipleErrorsError>`](crate::operation::always_multiple_errors::AlwaysMultipleErrorsError)
+    pub fn always_multiple_errors(
+        &self,
+    ) -> crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsFluentBuilder {
+        crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/client/always_native_error.rs a/TestModels/Errors/runtimes/rust/src/client/always_native_error.rs
new file mode 100644
index 00000000..94df8597
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/client/always_native_error.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`AlwaysNativeError`](crate::operation::always_native_error::builders::AlwaysNativeErrorFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::always_native_error::builders::AlwaysNativeErrorFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::always_native_error::builders::AlwaysNativeErrorFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`AlwaysNativeErrorOutput`](crate::operation::always_native_error::AlwaysNativeErrorOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::always_native_error::AlwaysNativeErrorOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<AlwaysNativeErrorError>`](crate::operation::always_native_error::AlwaysNativeErrorError)
+    pub fn always_native_error(
+        &self,
+    ) -> crate::operation::always_native_error::builders::AlwaysNativeErrorFluentBuilder {
+        crate::operation::always_native_error::builders::AlwaysNativeErrorFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/client/always_native_error_single_value.rs a/TestModels/Errors/runtimes/rust/src/client/always_native_error_single_value.rs
new file mode 100644
index 00000000..936e8670
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/client/always_native_error_single_value.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`AlwaysMultipleErrors`](crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`AlwaysMultipleErrorsOutput`](crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<AlwaysMultipleErrorsError>`](crate::operation::always_multiple_errors::AlwaysMultipleErrorsError)
+    pub fn always_multiple_errors(
+        &self,
+    ) -> crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsFluentBuilder {
+        crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsFluentBuilder::new(
+            self.handle.clone(),
+        )
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/conversions.rs a/TestModels/Errors/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..053dc677
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions.rs
@@ -0,0 +1,10 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod always_native_error;
+
+pub mod always_multiple_errors;
+
+pub mod always_error;
+
+pub mod simple_errors_config;
+
+pub mod error;
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/always_error.rs a/TestModels/Errors/runtimes/rust/src/conversions/always_error.rs
new file mode 100644
index 00000000..79c063e5
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/always_error.rs
@@ -0,0 +1,5 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _always_error_input;
+
+pub mod _always_error_output;
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/always_error/_always_error_input.rs a/TestModels/Errors/runtimes/rust/src/conversions/always_error/_always_error_input.rs
new file mode 100644
index 00000000..404a26e8
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/always_error/_always_error_input.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::always_error::AlwaysErrorInput,
+) -> ::std::rc::Rc<::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsInput> {
+    let dafny_value = match value.value {
+      Some(s) => ::simple_errors_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_errors_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsInput::GetErrorsInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsInput,
+    >,
+) -> crate::operation::always_error::AlwaysErrorInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::always_error::AlwaysErrorInput { value }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/always_error/_always_error_output.rs a/TestModels/Errors/runtimes/rust/src/conversions/always_error/_always_error_output.rs
new file mode 100644
index 00000000..4b6568f2
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/always_error/_always_error_output.rs
@@ -0,0 +1,42 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::always_error::AlwaysErrorOutput,
+) -> ::std::rc::Rc<::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsOutput>
+{
+    let dafny_value = match value.value {
+      Some(s) => ::simple_errors_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_errors_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsOutput::GetErrorsOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsOutput,
+    >,
+) -> crate::operation::always_error::AlwaysErrorOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::always_error::AlwaysErrorOutput { value }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/always_multiple_errors.rs a/TestModels/Errors/runtimes/rust/src/conversions/always_multiple_errors.rs
new file mode 100644
index 00000000..7034785f
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/always_multiple_errors.rs
@@ -0,0 +1,5 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _always_multiple_errors_input;
+
+pub mod _always_multiple_errors_output;
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/always_multiple_errors/_always_multiple_errors_input.rs a/TestModels/Errors/runtimes/rust/src/conversions/always_multiple_errors/_always_multiple_errors_input.rs
new file mode 100644
index 00000000..fbc50d72
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/always_multiple_errors/_always_multiple_errors_input.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::always_multiple_errors::AlwaysMultipleErrorsInput,
+) -> ::std::rc::Rc<::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsInput> {
+    let dafny_value = match value.value {
+      Some(s) => ::simple_errors_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_errors_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsInput::GetErrorsInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsInput,
+    >,
+) -> crate::operation::always_multiple_errors::AlwaysMultipleErrorsInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::always_multiple_errors::AlwaysMultipleErrorsInput { value }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/always_multiple_errors/_always_multiple_errors_output.rs a/TestModels/Errors/runtimes/rust/src/conversions/always_multiple_errors/_always_multiple_errors_output.rs
new file mode 100644
index 00000000..bdd571b9
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/always_multiple_errors/_always_multiple_errors_output.rs
@@ -0,0 +1,42 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput,
+) -> ::std::rc::Rc<::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsOutput>
+{
+    let dafny_value = match value.value {
+      Some(s) => ::simple_errors_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_errors_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsOutput::GetErrorsOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsOutput,
+    >,
+) -> crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput { value }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/always_native_error.rs a/TestModels/Errors/runtimes/rust/src/conversions/always_native_error.rs
new file mode 100644
index 00000000..a952b250
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/always_native_error.rs
@@ -0,0 +1,5 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _always_native_error_input;
+
+pub mod _always_native_error_output;
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/always_native_error/_always_native_error_input.rs a/TestModels/Errors/runtimes/rust/src/conversions/always_native_error/_always_native_error_input.rs
new file mode 100644
index 00000000..643ff17b
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/always_native_error/_always_native_error_input.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::always_native_error::AlwaysNativeErrorInput,
+) -> ::std::rc::Rc<::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsInput> {
+    let dafny_value = match value.value {
+      Some(s) => ::simple_errors_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_errors_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsInput::GetErrorsInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsInput,
+    >,
+) -> crate::operation::always_native_error::AlwaysNativeErrorInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::always_native_error::AlwaysNativeErrorInput { value }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/always_native_error/_always_native_error_output.rs a/TestModels/Errors/runtimes/rust/src/conversions/always_native_error/_always_native_error_output.rs
new file mode 100644
index 00000000..eca9f96d
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/always_native_error/_always_native_error_output.rs
@@ -0,0 +1,42 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::always_native_error::AlwaysNativeErrorOutput,
+) -> ::std::rc::Rc<::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsOutput>
+{
+    let dafny_value = match value.value {
+      Some(s) => ::simple_errors_dafny::_Wrappers_Compile::Option::Some {
+        value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s)
+      },
+      None => ::simple_errors_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsOutput::GetErrorsOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::GetErrorsOutput,
+    >,
+) -> crate::operation::always_native_error::AlwaysNativeErrorOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_errors_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::always_native_error::AlwaysNativeErrorOutput { value }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/error.rs a/TestModels/Errors/runtimes/rust/src/conversions/error.rs
new file mode 100644
index 00000000..c20539f8
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/error.rs
@@ -0,0 +1,44 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+use std::borrow::Borrow;
+pub fn to_dafny(
+    value: crate::types::error::Error,
+) -> ::std::rc::Rc<::simple_errors_dafny::_simple_derrors_dinternaldafny_dtypes::Error> {
+    let inner = match value {
+        crate::types::error::Error::SimpleErrorsException{message} =>     ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::SimpleErrorsException {
+            message : dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&message)
+          },
+          crate::types::error::Error::CollectionOfErrors{list, message} =>     ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::CollectionOfErrors {
+            message : dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&message),
+            list : dafny_runtime::dafny_runtime_conversions::vec_to_dafny_sequence(&list, |e| to_dafny(e.clone()))
+        },
+          crate::types::error::Error::Opaque{obj} => ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::Opaque {
+            obj : ::dafny_runtime::Object(obj.0)
+          },
+    };
+    ::std::rc::Rc::new(inner)
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::types::error::Error {
+    match dafny_value.borrow() {
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::SimpleErrorsException{message} =>
+        crate::types::error::Error::SimpleErrorsException {message :
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&message)
+        },
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::CollectionOfErrors{list, message} =>
+        crate::types::error::Error::CollectionOfErrors {message :
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&message),
+            list : dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(&list, |e| from_dafny(e.clone()))
+        },
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::Error::Opaque{obj} =>
+        match &obj.0 {
+            None => crate::types::error::Error::Opaque{obj : crate::types::error::Object(None)},
+            Some(x) => crate::types::error::Error::Opaque{obj : crate::types::error::Object(Some(x.clone()))},
+        },
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/conversions/simple_errors_config.rs a/TestModels/Errors/runtimes/rust/src/conversions/simple_errors_config.rs
new file mode 100644
index 00000000..dfc2f195
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/conversions/simple_errors_config.rs
@@ -0,0 +1,18 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_errors_config::SimpleErrorsConfig,
+) -> ::std::rc::Rc<::simple_errors_dafny::_simple_derrors_dinternaldafny_dtypes::SimpleErrorsConfig>
+{
+    ::std::rc::Rc::new(::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::SimpleErrorsConfig::SimpleErrorsConfig {})
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_errors_dafny::r#_simple_derrors_dinternaldafny_dtypes::SimpleErrorsConfig,
+    >,
+) -> crate::types::simple_errors_config::SimpleErrorsConfig {
+    crate::types::simple_errors_config::SimpleErrorsConfig {}
+}
diff --git b/TestModels/Errors/runtimes/rust/src/lib.rs a/TestModels/Errors/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..62f3a041
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/lib.rs
@@ -0,0 +1,14 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+pub use types::simple_errors_config::SimpleErrorsConfig;
diff --git b/TestModels/Errors/runtimes/rust/src/operation.rs a/TestModels/Errors/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..6af46ad4
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation.rs
@@ -0,0 +1,10 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `AlwaysNativeError` operation.
+pub mod always_native_error;
+
+/// Types for the `AlwaysMultipleErrors` operation.
+pub mod always_multiple_errors;
+
+/// Types for the `AlwaysNativeError` operation.
+pub mod always_error;
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_error.rs a/TestModels/Errors/runtimes/rust/src/operation/always_error.rs
new file mode 100644
index 00000000..430132ad
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_error.rs
@@ -0,0 +1,47 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `AlwaysError`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct AlwaysError;
+impl AlwaysError {
+    /// Creates a new `AlwaysError`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::always_error::AlwaysErrorInput,
+    ) -> ::std::result::Result<
+        crate::operation::always_error::AlwaysErrorOutput,
+        crate::types::error::Error,
+    > {
+        let inner_input = crate::conversions::always_error::_always_error_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).AlwaysError(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_errors_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::always_error::_always_error_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::error::from_dafny(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+pub use crate::operation::always_error::_always_error_output::AlwaysErrorOutput;
+
+pub use crate::operation::always_error::_always_error_input::AlwaysErrorInput;
+
+mod _always_error_input;
+
+mod _always_error_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_error/_always_error_input.rs a/TestModels/Errors/runtimes/rust/src/operation/always_error/_always_error_input.rs
new file mode 100644
index 00000000..4dc0ddc3
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_error/_always_error_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct AlwaysErrorInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysErrorInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl AlwaysErrorInput {
+    /// Creates a new builder-style object to manufacture [`AlwaysErrorInput`](crate::operation::operation::AlwaysErrorInput).
+    pub fn builder() -> crate::operation::always_error::builders::AlwaysErrorInputBuilder {
+        crate::operation::always_error::builders::AlwaysErrorInputBuilder::default()
+    }
+}
+
+/// A builder for [`AlwaysErrorInput`](crate::operation::operation::AlwaysErrorInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct AlwaysErrorInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysErrorInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`AlwaysErrorInput`](crate::operation::operation::AlwaysErrorInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_error::AlwaysErrorInput,
+        crate::types::error::Error,
+    > {
+        ::std::result::Result::Ok(crate::operation::always_error::AlwaysErrorInput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_error/_always_error_output.rs a/TestModels/Errors/runtimes/rust/src/operation/always_error/_always_error_output.rs
new file mode 100644
index 00000000..1357edd4
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_error/_always_error_output.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct AlwaysErrorOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysErrorOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl AlwaysErrorOutput {
+    /// Creates a new builder-style object to manufacture [`AlwaysErrorOutput`](crate::operation::operation::AlwaysErrorOutput).
+    pub fn builder() -> crate::operation::always_error::builders::AlwaysErrorOutputBuilder {
+        crate::operation::always_error::builders::AlwaysErrorOutputBuilder::default()
+    }
+}
+
+/// A builder for [`AlwaysErrorOutput`](crate::operation::operation::AlwaysErrorOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct AlwaysErrorOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysErrorOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`AlwaysErrorOutput`](crate::operation::operation::AlwaysErrorOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_error::AlwaysErrorOutput,
+        crate::types::error::Error,
+    > {
+        ::std::result::Result::Ok(crate::operation::always_error::AlwaysErrorOutput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_error/builders.rs a/TestModels/Errors/runtimes/rust/src/operation/always_error/builders.rs
new file mode 100644
index 00000000..69d54b81
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_error/builders.rs
@@ -0,0 +1,64 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::always_error::_always_error_output::AlwaysErrorOutputBuilder;
+
+pub use crate::operation::always_error::_always_error_input::AlwaysErrorInputBuilder;
+
+impl AlwaysErrorInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::always_error::AlwaysErrorOutput,
+        crate::types::error::Error,
+    > {
+        let mut fluent_builder = client.always_error();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `AlwaysError`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct AlwaysErrorFluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::always_error::builders::AlwaysErrorInputBuilder,
+}
+impl AlwaysErrorFluentBuilder {
+    /// Creates a new `AlwaysError`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the AlwaysError as a reference.
+    pub fn as_input(&self) -> &crate::operation::always_error::builders::AlwaysErrorInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_error::AlwaysErrorOutput,
+        crate::types::error::Error,
+    > {
+        let input = self.inner.build()?;
+        crate::operation::always_error::AlwaysError::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors.rs a/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors.rs
new file mode 100644
index 00000000..b4d57945
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors.rs
@@ -0,0 +1,46 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `AlwaysMultipleErrors`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct AlwaysMultipleErrors;
+impl AlwaysMultipleErrors {
+    /// Creates a new `AlwaysMultipleErrors`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::always_multiple_errors::AlwaysMultipleErrorsInput,
+    ) -> ::std::result::Result<
+        crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput,
+        crate::types::error::Error,
+    > {
+        let inner_input =
+            crate::conversions::always_multiple_errors::_always_multiple_errors_input::to_dafny(
+                input,
+            );
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).AlwaysMultipleErrors(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_errors_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(crate::conversions::always_multiple_errors::_always_multiple_errors_output::from_dafny(inner_result.value().clone()))
+        } else {
+            Err(crate::conversions::error::from_dafny(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+pub use crate::operation::always_multiple_errors::_always_multiple_errors_output::AlwaysMultipleErrorsOutput;
+
+pub use crate::operation::always_multiple_errors::_always_multiple_errors_input::AlwaysMultipleErrorsInput;
+
+mod _always_multiple_errors_input;
+
+mod _always_multiple_errors_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors/_always_multiple_errors_input.rs a/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors/_always_multiple_errors_input.rs
new file mode 100644
index 00000000..001066a6
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors/_always_multiple_errors_input.rs
@@ -0,0 +1,60 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct AlwaysMultipleErrorsInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysMultipleErrorsInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl AlwaysMultipleErrorsInput {
+    /// Creates a new builder-style object to manufacture [`AlwaysMultipleErrorsInput`](crate::operation::operation::AlwaysMultipleErrorsInput).
+    pub fn builder(
+    ) -> crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsInputBuilder {
+        crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsInputBuilder::default(
+        )
+    }
+}
+
+/// A builder for [`AlwaysMultipleErrorsInput`](crate::operation::operation::AlwaysMultipleErrorsInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct AlwaysMultipleErrorsInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysMultipleErrorsInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`AlwaysMultipleErrorsInput`](crate::operation::operation::AlwaysMultipleErrorsInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_multiple_errors::AlwaysMultipleErrorsInput,
+        crate::types::error::Error,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::always_multiple_errors::AlwaysMultipleErrorsInput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors/_always_multiple_errors_output.rs a/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors/_always_multiple_errors_output.rs
new file mode 100644
index 00000000..a80e04cb
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors/_always_multiple_errors_output.rs
@@ -0,0 +1,59 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct AlwaysMultipleErrorsOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysMultipleErrorsOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl AlwaysMultipleErrorsOutput {
+    /// Creates a new builder-style object to manufacture [`AlwaysMultipleErrorsOutput`](crate::operation::operation::AlwaysMultipleErrorsOutput).
+    pub fn builder(
+    ) -> crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsOutputBuilder {
+        crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsOutputBuilder::default()
+    }
+}
+
+/// A builder for [`AlwaysMultipleErrorsOutput`](crate::operation::operation::AlwaysMultipleErrorsOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct AlwaysMultipleErrorsOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysMultipleErrorsOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`AlwaysMultipleErrorsOutput`](crate::operation::operation::AlwaysMultipleErrorsOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput,
+        crate::types::error::Error,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput {
+                value: self.value,
+            },
+        )
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors/builders.rs a/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors/builders.rs
new file mode 100644
index 00000000..16f54725
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_multiple_errors/builders.rs
@@ -0,0 +1,67 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::always_multiple_errors::_always_multiple_errors_output::AlwaysMultipleErrorsOutputBuilder;
+
+pub use crate::operation::always_multiple_errors::_always_multiple_errors_input::AlwaysMultipleErrorsInputBuilder;
+
+impl AlwaysMultipleErrorsInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput,
+        crate::types::error::Error,
+    > {
+        let mut fluent_builder = client.always_multiple_errors();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `AlwaysMultipleErrors`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct AlwaysMultipleErrorsFluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsInputBuilder,
+}
+impl AlwaysMultipleErrorsFluentBuilder {
+    /// Creates a new `AlwaysMultipleErrors`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the AlwaysMultipleErrors as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::always_multiple_errors::builders::AlwaysMultipleErrorsInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_multiple_errors::AlwaysMultipleErrorsOutput,
+        crate::types::error::Error,
+    > {
+        let input = self.inner.build()?;
+        crate::operation::always_multiple_errors::AlwaysMultipleErrors::send(&self.client, input)
+            .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_native_error.rs a/TestModels/Errors/runtimes/rust/src/operation/always_native_error.rs
new file mode 100644
index 00000000..7aed788b
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_native_error.rs
@@ -0,0 +1,48 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `AlwaysNativeError`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct AlwaysNativeError;
+impl AlwaysNativeError {
+    /// Creates a new `AlwaysNativeError`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::always_native_error::AlwaysNativeErrorInput,
+    ) -> ::std::result::Result<
+        crate::operation::always_native_error::AlwaysNativeErrorOutput,
+        crate::types::error::Error,
+    > {
+        let inner_input =
+            crate::conversions::always_native_error::_always_native_error_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).AlwaysNativeError(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_errors_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::always_native_error::_always_native_error_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::error::from_dafny(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+pub use crate::operation::always_native_error::_always_native_error_output::AlwaysNativeErrorOutput;
+
+pub use crate::operation::always_native_error::_always_native_error_input::AlwaysNativeErrorInput;
+
+mod _always_native_error_input;
+
+mod _always_native_error_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_native_error/_always_native_error_input.rs a/TestModels/Errors/runtimes/rust/src/operation/always_native_error/_always_native_error_input.rs
new file mode 100644
index 00000000..01197012
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_native_error/_always_native_error_input.rs
@@ -0,0 +1,57 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct AlwaysNativeErrorInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysNativeErrorInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl AlwaysNativeErrorInput {
+    /// Creates a new builder-style object to manufacture [`AlwaysNativeErrorInput`](crate::operation::operation::AlwaysNativeErrorInput).
+    pub fn builder(
+    ) -> crate::operation::always_native_error::builders::AlwaysNativeErrorInputBuilder {
+        crate::operation::always_native_error::builders::AlwaysNativeErrorInputBuilder::default()
+    }
+}
+
+/// A builder for [`AlwaysNativeErrorInput`](crate::operation::operation::AlwaysNativeErrorInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct AlwaysNativeErrorInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysNativeErrorInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`AlwaysNativeErrorInput`](crate::operation::operation::AlwaysNativeErrorInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_native_error::AlwaysNativeErrorInput,
+        crate::types::error::Error,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::always_native_error::AlwaysNativeErrorInput { value: self.value },
+        )
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_native_error/_always_native_error_output.rs a/TestModels/Errors/runtimes/rust/src/operation/always_native_error/_always_native_error_output.rs
new file mode 100644
index 00000000..e898c25a
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_native_error/_always_native_error_output.rs
@@ -0,0 +1,57 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct AlwaysNativeErrorOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysNativeErrorOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl AlwaysNativeErrorOutput {
+    /// Creates a new builder-style object to manufacture [`AlwaysNativeErrorOutput`](crate::operation::operation::AlwaysNativeErrorOutput).
+    pub fn builder(
+    ) -> crate::operation::always_native_error::builders::AlwaysNativeErrorOutputBuilder {
+        crate::operation::always_native_error::builders::AlwaysNativeErrorOutputBuilder::default()
+    }
+}
+
+/// A builder for [`AlwaysNativeErrorOutput`](crate::operation::operation::AlwaysNativeErrorOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct AlwaysNativeErrorOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl AlwaysNativeErrorOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`AlwaysNativeErrorOutput`](crate::operation::operation::AlwaysNativeErrorOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_native_error::AlwaysNativeErrorOutput,
+        crate::types::error::Error,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::always_native_error::AlwaysNativeErrorOutput { value: self.value },
+        )
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/operation/always_native_error/builders.rs a/TestModels/Errors/runtimes/rust/src/operation/always_native_error/builders.rs
new file mode 100644
index 00000000..96268a14
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/operation/always_native_error/builders.rs
@@ -0,0 +1,66 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::always_native_error::_always_native_error_output::AlwaysNativeErrorOutputBuilder;
+
+pub use crate::operation::always_native_error::_always_native_error_input::AlwaysNativeErrorInputBuilder;
+
+impl AlwaysNativeErrorInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::always_native_error::AlwaysNativeErrorOutput,
+        crate::types::error::Error,
+    > {
+        let mut fluent_builder = client.always_native_error();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `AlwaysNativeError`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct AlwaysNativeErrorFluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::always_native_error::builders::AlwaysNativeErrorInputBuilder,
+}
+impl AlwaysNativeErrorFluentBuilder {
+    /// Creates a new `AlwaysNativeError`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the AlwaysNativeError as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::always_native_error::builders::AlwaysNativeErrorInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_native_error::AlwaysNativeErrorOutput,
+        crate::types::error::Error,
+    > {
+        let input = self.inner.build()?;
+        crate::operation::always_native_error::AlwaysNativeError::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/Errors/runtimes/rust/src/types.rs a/TestModels/Errors/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..6c90be4b
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/types.rs
@@ -0,0 +1,5 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod error;
+/// Types for the `SimpleErrorsConfig`
+pub mod simple_errors_config;
diff --git b/TestModels/Errors/runtimes/rust/src/types/error.rs a/TestModels/Errors/runtimes/rust/src/types/error.rs
new file mode 100644
index 00000000..2aad1cde
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/types/error.rs
@@ -0,0 +1,45 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(Clone, Debug)]
+pub struct Object(pub Option<::std::rc::Rc<std::cell::UnsafeCell<dyn ::std::any::Any>>>);
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug, ::std::cmp::PartialEq)]
+pub enum Error {
+    SimpleErrorsException {
+        message: String,
+    },
+    CollectionOfErrors {
+        list: Vec<Error>,
+        message: String,
+    },
+    Opaque {
+        // obj: Option<::std::rc::Rc<std::cell::UnsafeCell<dyn ::std::any::Any>>>,
+        obj: Object,
+    },
+}
+
+impl PartialEq for Object {
+    fn eq(&self, other: &Self) -> bool {
+        if let Some(p) = &self.0 {
+            if let Some(q) = &other.0 {
+                // To compare addresses, we need to ensure we only compare thin pointers
+                // https://users.rust-lang.org/t/comparing-addresses-between-fat-and-thin-pointers/89008
+                ::std::ptr::eq(p.as_ref().get() as *const (), q.as_ref().get() as *const ())
+            } else {
+                false
+            }
+        } else {
+            false
+        }
+    }
+}
+
+impl Eq for Error {}
+
+impl ::std::fmt::Display for Error {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
+        write!(f, "{:?}", self)
+    }
+}
+
+impl ::std::error::Error for Error {}
diff --git b/TestModels/Errors/runtimes/rust/src/types/simple_errors_config.rs a/TestModels/Errors/runtimes/rust/src/types/simple_errors_config.rs
new file mode 100644
index 00000000..3ef8185c
--- /dev/null
+++ a/TestModels/Errors/runtimes/rust/src/types/simple_errors_config.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleErrorsConfig {}
+
+impl SimpleErrorsConfig {
+    pub fn builder() -> SimpleErrorsConfigBuilder {
+        SimpleErrorsConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleErrorsConfigBuilder {}
+
+impl SimpleErrorsConfigBuilder {
+    /// Creates a new `SimpleErrorsConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {}
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<SimpleErrorsConfig, ::aws_smithy_types::error::operation::BuildError>
+    {
+        ::std::result::Result::Ok(SimpleErrorsConfig {})
+    }
+}
