diff --git b/TestModels/Extendable/runtimes/rust/src/client.rs a/TestModels/Extendable/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..34b1e013
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/client.rs
@@ -0,0 +1,40 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::ISimpleExtendableResourcesClient>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_extendable_resources_config::SimpleExtendableResourcesConfig,
+    ) -> Result<Self, BuildError> {
+        let inner =
+            ::simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny::_default::SimpleExtendableResources(
+                &crate::conversions::simple_extendable_resources_config::_simple_extendable_resources_config::to_dafny(
+                    conf,
+                ),
+            );
+        if matches!(
+            inner.as_ref(),
+            ::simple_extendable_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::upcast_object()(inner.Extract()),
+        })
+    }
+}
+
+mod create_extendable_resource;
+mod use_extendable_resource;
diff --git b/TestModels/Extendable/runtimes/rust/src/client/create_extendable_resource.rs a/TestModels/Extendable/runtimes/rust/src/client/create_extendable_resource.rs
new file mode 100644
index 00000000..bfe1ebfe
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/client/create_extendable_resource.rs
@@ -0,0 +1,16 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`CreateExtendableResource`](crate::operation::create_extendable_resource::builders::CreateExtendableResourceFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<Resources>>)`](crate::operation::create_extendable_resource::builders::CreateExtendableResourceFluentBuilder::name) / [`set_name(Option<Resources>)`](crate::operation::create_extendable_resource::builders::CreateExtendableResourceFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`CreateExtendableResourceOutput`](crate::operation::create_extendable_resource::CreateExtendableResourceOutput) with field(s):
+    ///   - [`value(Option<Resources>)`](crate::operation::create_extendable_resource::CreateExtendableResourceOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<CreateExtendableResourceError>`](crate::operation::create_extendable_resource::CreateExtendableResourceError)
+    pub fn create_extendable_resource(
+        &self,
+    ) -> crate::operation::create_extendable_resource::builders::CreateExtendableResourceFluentBuilder
+    {
+        crate::operation::create_extendable_resource::builders::CreateExtendableResourceFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/client/use_extendable_resource.rs a/TestModels/Extendable/runtimes/rust/src/client/use_extendable_resource.rs
new file mode 100644
index 00000000..30229328
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/client/use_extendable_resource.rs
@@ -0,0 +1,18 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`UseExtendableResource`](crate::operation::use_extendable_resource::builders::UseExtendableResourceFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<Resources>>)`](crate::operation::use_extendable_resource::builders::UseExtendableResourceFluentBuilder::name) / [`set_name(Option<Resources>)`](crate::operation::use_extendable_resource::builders::UseExtendableResourceFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`UseExtendableResourceOutput`](crate::operation::use_extendable_resource::UseExtendableResourceOutput) with field(s):
+    ///   - [`value(Option<Resources>)`](crate::operation::use_extendable_resource::UseExtendableResourceOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<UseExtendableResourceError>`](crate::operation::use_extendable_resource::UseExtendableResourceError)
+    pub fn use_extendable_resource(
+        &self,
+    ) -> crate::operation::use_extendable_resource::builders::UseExtendableResourceFluentBuilder
+    {
+        crate::operation::use_extendable_resource::builders::UseExtendableResourceFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions.rs a/TestModels/Extendable/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..7e0a4c35
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions.rs
@@ -0,0 +1,9 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod create_extendable_resource;
+
+pub mod always_modeled_error;
+pub mod extendable_resource;
+pub mod get_extendable_resource_data;
+pub mod use_extendable_resource;
+
+pub mod simple_extendable_resources_config;
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/always_modeled_error.rs a/TestModels/Extendable/runtimes/rust/src/conversions/always_modeled_error.rs
new file mode 100644
index 00000000..f7e0ac0f
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/always_modeled_error.rs
@@ -0,0 +1,69 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::always_modeled_error::AlwaysModeledErrorError,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error,
+> {
+    match value {
+      crate::operation::always_modeled_error::AlwaysModeledErrorError::SimpleExtendableResourcesException(e) =>
+      ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::SimpleExtendableResourcesException { 
+        message: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&e.message)
+      }),
+      crate::operation::always_modeled_error::AlwaysModeledErrorError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::always_modeled_error::AlwaysModeledErrorError {
+    match &*dafny_value {
+      ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::SimpleExtendableResourcesException {
+        message,
+    } =>
+    crate::operation::always_modeled_error::AlwaysModeledErrorError::SimpleExtendableResourcesException (
+      crate::error::simple_extendable_resources_exception::SimpleExtendableResourcesException {
+        message : dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&message),
+        meta : ::std::default::Default::default()
+      }
+    ),
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::CollectionOfErrors {
+      list, message,
+    } =>
+    crate::operation::always_modeled_error::AlwaysModeledErrorError::SimpleExtendableResourcesException (
+      crate::error::simple_extendable_resources_exception::SimpleExtendableResourcesException {
+        message : dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&message) + " Plus some unknown list of errors.",
+        meta : ::std::default::Default::default()
+      }
+    ),
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::Opaque {
+      obj,
+    } =>
+    crate::operation::always_modeled_error::AlwaysModeledErrorError::SimpleExtendableResourcesException (
+      crate::error::simple_extendable_resources_exception::SimpleExtendableResourcesException {
+        message : "Opaque Error".to_string(),
+        meta : ::std::default::Default::default()
+      }
+    ),
+  }
+}
+
+//     // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+//     if matches!(&dafny_value.as_ref(), ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+//     let error_message = "TODO: can't get message yet";
+//     crate::operation::always_modeled_error::AlwaysModeledErrorError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+//   } else {
+//     crate::operation::always_modeled_error::AlwaysModeledErrorError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+//   }
+// }
+
+pub mod _always_modeled_error_input;
+
+pub mod _always_modeled_error_output;
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/always_modeled_error/_always_modeled_error_input.rs a/TestModels/Extendable/runtimes/rust/src/conversions/always_modeled_error/_always_modeled_error_input.rs
new file mode 100644
index 00000000..da9a6f6a
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/always_modeled_error/_always_modeled_error_input.rs
@@ -0,0 +1,27 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::always_modeled_error::AlwaysModeledErrorInput,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsInput,
+>{
+    ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsInput::GetExtendableResourceErrorsInput {
+        value: dafny_standard_library::conversion::ostring_to_dafny(value.value()),
+  })
+}
+// _always_modeled_error_Input
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsInput,
+    >,
+) -> crate::operation::always_modeled_error::AlwaysModeledErrorInput {
+    match &*dafny_value {
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsInput::GetExtendableResourceErrorsInput {
+            value,
+        } =>
+        crate::operation::always_modeled_error::AlwaysModeledErrorInput {
+            value: dafny_standard_library::conversion::ostring_from_dafny(value.clone()),
+        }
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/always_modeled_error/_always_modeled_error_output.rs a/TestModels/Extendable/runtimes/rust/src/conversions/always_modeled_error/_always_modeled_error_output.rs
new file mode 100644
index 00000000..4f4c2cb7
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/always_modeled_error/_always_modeled_error_output.rs
@@ -0,0 +1,27 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::always_modeled_error::AlwaysModeledErrorOutput,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsOutput,
+>{
+    ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsOutput::GetExtendableResourceErrorsOutput {
+        value: dafny_standard_library::conversion::ostring_to_dafny(value.value()),
+  })
+}
+// _always_modeled_error_output
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsOutput,
+    >,
+) -> crate::operation::always_modeled_error::AlwaysModeledErrorOutput {
+    match &*dafny_value {
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsOutput::GetExtendableResourceErrorsOutput {
+            value,
+        } =>
+        crate::operation::always_modeled_error::AlwaysModeledErrorOutput {
+            value: dafny_standard_library::conversion::ostring_from_dafny(value.clone()),
+        }
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/create_extendable_resource.rs a/TestModels/Extendable/runtimes/rust/src/conversions/create_extendable_resource.rs
new file mode 100644
index 00000000..40b42003
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/create_extendable_resource.rs
@@ -0,0 +1,34 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::create_extendable_resource::CreateExtendableResourceError,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error,
+> {
+    match value {
+    crate::operation::create_extendable_resource::CreateExtendableResourceError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::create_extendable_resource::CreateExtendableResourceError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::create_extendable_resource::CreateExtendableResourceError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::create_extendable_resource::CreateExtendableResourceError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _create_extendable_resource_input;
+
+pub mod _create_extendable_resource_output;
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/create_extendable_resource/_create_extendable_resource_input.rs a/TestModels/Extendable/runtimes/rust/src/conversions/create_extendable_resource/_create_extendable_resource_input.rs
new file mode 100644
index 00000000..ec7a1a94
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/create_extendable_resource/_create_extendable_resource_input.rs
@@ -0,0 +1,29 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::create_extendable_resource::CreateExtendableResourceInput,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::CreateExtendableResourceInput,
+>{
+    ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::CreateExtendableResourceInput::CreateExtendableResourceInput {
+        name: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(value.name())
+    })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::CreateExtendableResourceInput,
+    >,
+) -> crate::operation::create_extendable_resource::CreateExtendableResourceInput {
+    match &*dafny_value {
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::CreateExtendableResourceInput::CreateExtendableResourceInput {
+            name
+        } =>
+        crate::operation::create_extendable_resource::CreateExtendableResourceInput {
+            name: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &*name
+            )
+         }
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/create_extendable_resource/_create_extendable_resource_output.rs a/TestModels/Extendable/runtimes/rust/src/conversions/create_extendable_resource/_create_extendable_resource_output.rs
new file mode 100644
index 00000000..3afd81a4
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/create_extendable_resource/_create_extendable_resource_output.rs
@@ -0,0 +1,25 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::create_extendable_resource::CreateExtendableResourceOutput,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::CreateExtendableResourceOutput,
+>{
+    ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::CreateExtendableResourceOutput::CreateExtendableResourceOutput {
+        resource : crate::conversions::extendable_resource::_extendable_resource::to_dafny(value.output().clone()),
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::CreateExtendableResourceOutput,
+    >,
+) -> crate::operation::create_extendable_resource::CreateExtendableResourceOutput {
+    crate::operation::create_extendable_resource::CreateExtendableResourceOutput {
+        output: crate::conversions::extendable_resource::_extendable_resource::from_dafny(
+            dafny_value.resource().clone(),
+        ),
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/extendable_resource.rs a/TestModels/Extendable/runtimes/rust/src/conversions/extendable_resource.rs
new file mode 100644
index 00000000..9accd4b5
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/extendable_resource.rs
@@ -0,0 +1 @@
+pub mod _extendable_resource;
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/extendable_resource/_extendable_resource.rs a/TestModels/Extendable/runtimes/rust/src/conversions/extendable_resource/_extendable_resource.rs
new file mode 100644
index 00000000..ca1db0da
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/extendable_resource/_extendable_resource.rs
@@ -0,0 +1,161 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+use crate::types::extendable_resource::ExtendableResource;
+
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::types::extendable_resource::ExtendableResourceRef,
+) ->
+::dafny_runtime::Object<dyn simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::IExtendableResource>
+{
+    let wrap = ExtendableResourceWrapper { obj: value.clone() };
+    let inner : ::std::rc::Rc<::std::cell::UnsafeCell<dyn ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::IExtendableResource>>
+    = ::std::rc::Rc::new(::std::cell::UnsafeCell::new(wrap));
+
+    ::dafny_runtime::Object(Some(inner))
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::dafny_runtime::Object<dyn simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::IExtendableResource>,
+) -> crate::types::extendable_resource::ExtendableResourceRef {
+    let wrap = ExtendableResourceDafnyWrapper {
+        obj: dafny_value.clone(),
+    };
+    ::std::rc::Rc::new(::std::cell::RefCell::new(wrap))
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct ExtendableResourceWrapper {
+    obj: crate::types::extendable_resource::ExtendableResourceRef,
+}
+
+impl dafny_runtime::UpcastObject<dyn std::any::Any> for ExtendableResourceWrapper {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
+
+impl ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::IExtendableResource
+    for ExtendableResourceWrapper
+{
+    fn r#_GetExtendableResourceData_k(
+        &mut self,
+        input: &::std::rc::Rc<
+            ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceDataInput,
+        >,
+    ) -> ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_Wrappers_Compile::Result<
+            ::std::rc::Rc<
+                ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceDataOutput,
+            >,
+            ::std::rc::Rc<::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error>,
+        >,
+    >
+    {
+        let inner_input =
+            crate::conversions::get_extendable_resource_data::_get_extendable_resource_data_input::from_dafny(
+                input.clone(),
+            );
+        let inner_result = self.obj.borrow_mut().get_extendable_resource_data(inner_input);
+        let result = match inner_result {
+            Ok(x) => ::simple_extendable_dafny::r#_Wrappers_Compile::Result::Success {
+                value: crate::conversions::get_extendable_resource_data::_get_extendable_resource_data_output::to_dafny(
+                    x,
+                ),
+            },
+            Err(x) => ::simple_extendable_dafny::r#_Wrappers_Compile::Result::Failure {
+                error: crate::conversions::get_extendable_resource_data::to_dafny_error(x),
+            },
+        };
+        ::std::rc::Rc::new(result)
+    }
+    fn _AlwaysMultipleErrors_k(&mut self, input: & std::rc::Rc<simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsInput>)
+    ->  std::rc::Rc<simple_extendable_dafny::_Wrappers_Compile::Result< std::rc::Rc<simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsOutput>,  std::rc::Rc<simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny_dtypes::Error>>>
+    { todo!() }
+    fn _AlwaysModeledError_k(&mut self, input: & std::rc::Rc<simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsInput>)
+    ->  std::rc::Rc<simple_extendable_dafny::_Wrappers_Compile::Result< std::rc::Rc<simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsOutput>,  std::rc::Rc<simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny_dtypes::Error>>>
+    {
+        let inner_input =
+        crate::conversions::always_modeled_error::_always_modeled_error_input::from_dafny(
+            input.clone(),
+        );
+    let inner_result = self.obj.borrow_mut().always_modeled_error(inner_input);
+    let result = match inner_result {
+        Ok(x) => ::simple_extendable_dafny::r#_Wrappers_Compile::Result::Success {
+            value: crate::conversions::always_modeled_error::_always_modeled_error_output::to_dafny(
+                x,
+            ),
+        },
+        Err(x) => ::simple_extendable_dafny::r#_Wrappers_Compile::Result::Failure {
+            error: crate::conversions::always_modeled_error::to_dafny_error(x),
+        },
+    };
+    ::std::rc::Rc::new(result)
+
+    }
+    fn _AlwaysOpaqueError_k(&mut self, input: & std::rc::Rc<simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsInput>)
+    ->  std::rc::Rc<simple_extendable_dafny::_Wrappers_Compile::Result< std::rc::Rc<simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceErrorsOutput>,  std::rc::Rc<simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny_dtypes::Error>>>
+    { todo!() }
+ }
+
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct ExtendableResourceDafnyWrapper {
+    pub(crate) obj: ::dafny_runtime::Object<
+        dyn ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::IExtendableResource,
+    >,
+}
+
+impl ExtendableResource for ExtendableResourceDafnyWrapper {
+    fn get_extendable_resource_data(
+        &mut self,
+        input: crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput,
+    ) -> Result<
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput,
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataError,
+    > {
+        let inner_input =
+            crate::conversions::get_extendable_resource_data::_get_extendable_resource_data_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(self.obj.clone()).GetExtendableResourceData(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_extendable_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_extendable_resource_data::_get_extendable_resource_data_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::get_extendable_resource_data::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+
+    fn always_modeled_error(
+        &mut self,
+        input: crate::operation::always_modeled_error::AlwaysModeledErrorInput,
+    ) -> Result<
+        crate::operation::always_modeled_error::AlwaysModeledErrorOutput,
+        crate::operation::always_modeled_error::AlwaysModeledErrorError,
+    > {
+        let inner_input =
+            crate::conversions::always_modeled_error::_always_modeled_error_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(self.obj.clone()).AlwaysModeledError(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_extendable_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::always_modeled_error::_always_modeled_error_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::always_modeled_error::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/get_extendable_resource_data.rs a/TestModels/Extendable/runtimes/rust/src/conversions/get_extendable_resource_data.rs
new file mode 100644
index 00000000..14212841
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/get_extendable_resource_data.rs
@@ -0,0 +1,34 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_extendable_resource_data::GetExtendableResourceDataError,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error,
+> {
+    match value {
+    crate::operation::get_extendable_resource_data::GetExtendableResourceDataError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_extendable_resource_data::GetExtendableResourceDataError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_extendable_resource_data::GetExtendableResourceDataError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_extendable_resource_data::GetExtendableResourceDataError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_extendable_resource_data_input;
+
+pub mod _get_extendable_resource_data_output;
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/get_extendable_resource_data/_get_extendable_resource_data_input.rs a/TestModels/Extendable/runtimes/rust/src/conversions/get_extendable_resource_data/_get_extendable_resource_data_input.rs
new file mode 100644
index 00000000..2916487d
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/get_extendable_resource_data/_get_extendable_resource_data_input.rs
@@ -0,0 +1,39 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceDataInput,
+>{
+    ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceDataInput::GetExtendableResourceDataInput {
+        stringValue: dafny_standard_library::conversion::ostring_to_dafny(value.string_value()),
+        booleanValue: dafny_standard_library::conversion::obool_to_dafny(value.boolean_value()),
+        integerValue: dafny_standard_library::conversion::oint_to_dafny(value.integer_value()),
+        longValue: dafny_standard_library::conversion::olong_to_dafny(value.long_value()),
+        blobValue: dafny_standard_library::conversion::oblob_to_dafny(value.blob_value())
+  })
+}
+// _get_extendable_resource_data_Input
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceDataInput,
+    >,
+) -> crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput {
+    match &*dafny_value {
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceDataInput::GetExtendableResourceDataInput {
+            blobValue,
+            booleanValue,
+            integerValue,
+            longValue,
+            stringValue,
+        } =>
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput {
+            string_value: dafny_standard_library::conversion::ostring_from_dafny(stringValue.clone()),
+            boolean_value: dafny_standard_library::conversion::obool_from_dafny(booleanValue.clone()),
+            integer_value: dafny_standard_library::conversion::oint_from_dafny(integerValue.clone()),
+            long_value: dafny_standard_library::conversion::olong_from_dafny(longValue.clone()),
+            blob_value: dafny_standard_library::conversion::oblob_from_dafny(blobValue.clone())
+         }
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/get_extendable_resource_data/_get_extendable_resource_data_output.rs a/TestModels/Extendable/runtimes/rust/src/conversions/get_extendable_resource_data/_get_extendable_resource_data_output.rs
new file mode 100644
index 00000000..7a9fd6b0
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/get_extendable_resource_data/_get_extendable_resource_data_output.rs
@@ -0,0 +1,39 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceDataOutput,
+>{
+    ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceDataOutput::GetExtendableResourceDataOutput {
+        stringValue: dafny_standard_library::conversion::ostring_to_dafny(value.string_value()),
+        booleanValue: dafny_standard_library::conversion::obool_to_dafny(value.boolean_value()),
+        integerValue: dafny_standard_library::conversion::oint_to_dafny(value.integer_value()),
+        longValue: dafny_standard_library::conversion::olong_to_dafny(value.long_value()),
+        blobValue: dafny_standard_library::conversion::oblob_to_dafny(value.blob_value())
+  })
+}
+// _get_extendable_resource_data_output
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceDataOutput,
+    >,
+) -> crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput {
+    match &*dafny_value {
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::GetExtendableResourceDataOutput::GetExtendableResourceDataOutput {
+            blobValue,
+            booleanValue,
+            integerValue,
+            longValue,
+            stringValue,
+        } =>
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput {
+            string_value: dafny_standard_library::conversion::ostring_from_dafny(stringValue.clone()),
+            boolean_value: dafny_standard_library::conversion::obool_from_dafny(booleanValue.clone()),
+            integer_value: dafny_standard_library::conversion::oint_from_dafny(integerValue.clone()),
+            long_value: dafny_standard_library::conversion::olong_from_dafny(longValue.clone()),
+            blob_value: dafny_standard_library::conversion::oblob_from_dafny(blobValue.clone())
+         }
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/simple_extendable_resources_config.rs a/TestModels/Extendable/runtimes/rust/src/conversions/simple_extendable_resources_config.rs
new file mode 100644
index 00000000..c96033ee
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/simple_extendable_resources_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_extendable_resources_config;
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/simple_extendable_resources_config/_simple_extendable_resources_config.rs a/TestModels/Extendable/runtimes/rust/src/conversions/simple_extendable_resources_config/_simple_extendable_resources_config.rs
new file mode 100644
index 00000000..c8d0fdb5
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/simple_extendable_resources_config/_simple_extendable_resources_config.rs
@@ -0,0 +1,20 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_extendable_resources_config::SimpleExtendableResourcesConfig,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::_simple_dextendable_dresources_dinternaldafny_dtypes::SimpleExtendableResourcesConfig,
+>{
+    let inner = ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::SimpleExtendableResourcesConfig::SimpleExtendableResourcesConfig {};
+    ::std::rc::Rc::new(inner)
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::SimpleExtendableResourcesConfig,
+    >,
+) -> crate::types::simple_extendable_resources_config::SimpleExtendableResourcesConfig {
+    crate::types::simple_extendable_resources_config::SimpleExtendableResourcesConfig {}
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/use_extendable_resource.rs a/TestModels/Extendable/runtimes/rust/src/conversions/use_extendable_resource.rs
new file mode 100644
index 00000000..18d1252d
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/use_extendable_resource.rs
@@ -0,0 +1,34 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::use_extendable_resource::UseExtendableResourceError,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error,
+> {
+    match value {
+    crate::operation::use_extendable_resource::UseExtendableResourceError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::use_extendable_resource::UseExtendableResourceError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::use_extendable_resource::UseExtendableResourceError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::use_extendable_resource::UseExtendableResourceError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _use_extendable_resource_input;
+
+pub mod _use_extendable_resource_output;
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/use_extendable_resource/_use_extendable_resource_input.rs a/TestModels/Extendable/runtimes/rust/src/conversions/use_extendable_resource/_use_extendable_resource_input.rs
new file mode 100644
index 00000000..d9d4e0f2
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/use_extendable_resource/_use_extendable_resource_input.rs
@@ -0,0 +1,30 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::use_extendable_resource::UseExtendableResourceInput,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::UseExtendableResourceInput,
+>{
+    ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::UseExtendableResourceInput::UseExtendableResourceInput {
+        input : crate::conversions::get_extendable_resource_data::_get_extendable_resource_data_input::to_dafny(value.input().clone()),
+        resource : crate::conversions::extendable_resource::_extendable_resource::to_dafny(value.resource().clone()),
+  })
+}
+// _use_extendable_resource_Input
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::UseExtendableResourceInput,
+    >,
+) -> crate::operation::use_extendable_resource::UseExtendableResourceInput {
+    match &*dafny_value {
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::UseExtendableResourceInput::UseExtendableResourceInput {
+            input,
+            resource,
+        } =>
+        crate::operation::use_extendable_resource::UseExtendableResourceInput {
+            input : crate::conversions::get_extendable_resource_data::_get_extendable_resource_data_input::from_dafny(input.clone()),
+            resource : crate::conversions::extendable_resource::_extendable_resource::from_dafny(resource.clone()),
+        }
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/conversions/use_extendable_resource/_use_extendable_resource_output.rs a/TestModels/Extendable/runtimes/rust/src/conversions/use_extendable_resource/_use_extendable_resource_output.rs
new file mode 100644
index 00000000..a80f4ccb
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/conversions/use_extendable_resource/_use_extendable_resource_output.rs
@@ -0,0 +1,27 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::use_extendable_resource::UseExtendableResourceOutput,
+) -> ::std::rc::Rc<
+    ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::UseExtendableResourceOutput,
+>{
+    ::std::rc::Rc::new(::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::UseExtendableResourceOutput::UseExtendableResourceOutput {
+        output : crate::conversions::get_extendable_resource_data::_get_extendable_resource_data_output::to_dafny(value.output().clone())
+  })
+}
+// _use_extendable_resource_output
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::UseExtendableResourceOutput,
+    >,
+) -> crate::operation::use_extendable_resource::UseExtendableResourceOutput {
+    match &*dafny_value {
+        ::simple_extendable_dafny::r#_simple_dextendable_dresources_dinternaldafny_dtypes::UseExtendableResourceOutput::UseExtendableResourceOutput {
+            output,
+        } =>
+        crate::operation::use_extendable_resource::UseExtendableResourceOutput {
+            output : crate::conversions::get_extendable_resource_data::_get_extendable_resource_data_output::from_dafny(output.clone())
+        }
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/error.rs a/TestModels/Extendable/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..04805d4d
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/error.rs
@@ -0,0 +1,15 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub mod sealed_unhandled;
+pub mod simple_extendable_resources_exception;
diff --git b/TestModels/Extendable/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/Extendable/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..a220e04d
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,30 @@
+use std::any::Any;
+
+use dafny_runtime::UpcastObject;
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(::std::fmt::Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+
+impl UpcastObject<dyn Any> for Unhandled {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
\ No newline at end of file
diff --git b/TestModels/Extendable/runtimes/rust/src/error/simple_extendable_resources_exception.rs a/TestModels/Extendable/runtimes/rust/src/error/simple_extendable_resources_exception.rs
new file mode 100644
index 00000000..1f7ff852
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/error/simple_extendable_resources_exception.rs
@@ -0,0 +1,23 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(::std::clone::Clone, ::std::fmt::Debug, ::std::cmp::PartialEq)]
+pub struct SimpleExtendableResourcesException {
+    pub message: String,
+    pub meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+// simple_extendable_resources_exception
diff --git b/TestModels/Extendable/runtimes/rust/src/lib.rs a/TestModels/Extendable/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..3c584614
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/lib.rs
@@ -0,0 +1,17 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+pub use types::simple_extendable_resources_config::SimpleExtendableResourcesConfig;
diff --git b/TestModels/Extendable/runtimes/rust/src/operation.rs a/TestModels/Extendable/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..f2acf369
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation.rs
@@ -0,0 +1,7 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod always_modeled_error;
+/// Types for the `CreateExtendableResource` operation.
+pub mod create_extendable_resource;
+pub mod get_extendable_resource_data;
+pub mod use_extendable_resource;
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error.rs a/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error.rs
new file mode 100644
index 00000000..3a161b4d
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error.rs
@@ -0,0 +1,131 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `AlwaysModeledError`.
+
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct AlwaysModeledError;
+impl AlwaysModeledError {
+    /// Uses a new `AlwaysModeledError`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: crate::types::extendable_resource::ExtendableResourceRef,
+        input: crate::operation::always_modeled_error::AlwaysModeledErrorInput,
+    ) -> ::std::result::Result<
+        crate::operation::always_modeled_error::AlwaysModeledErrorOutput,
+        crate::operation::always_modeled_error::AlwaysModeledErrorError,
+    > {
+        client.borrow_mut().always_modeled_error(input)
+    }
+}
+
+/// Error type for the `AlwaysModeledError` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum AlwaysModeledErrorError {
+    SimpleExtendableResourcesException(
+        crate::error::simple_extendable_resources_exception::SimpleExtendableResourcesException,
+    ),
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl AlwaysModeledErrorError {
+    /// Uses the `AlwaysModeledErrorError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Uses the `AlwaysModeledErrorError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::SimpleExtendableResourcesException(e) => &e.meta,
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for AlwaysModeledErrorError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::SimpleExtendableResourcesException(_) => None,
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for AlwaysModeledErrorError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::SimpleExtendableResourcesException(e) => {
+                write!(f, "SimpleExtendableResourcesException : {:}", e.message)
+            }
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for AlwaysModeledErrorError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for AlwaysModeledErrorError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::SimpleExtendableResourcesException(e) => &e.meta,
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for AlwaysModeledErrorError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::always_modeled_error::_always_modeled_error_output::AlwaysModeledErrorOutput;
+
+pub use crate::operation::always_modeled_error::_always_modeled_error_input::AlwaysModeledErrorInput;
+
+mod _always_modeled_error_input;
+
+mod _always_modeled_error_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error/_always_modeled_error_input.rs a/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error/_always_modeled_error_input.rs
new file mode 100644
index 00000000..0627f097
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error/_always_modeled_error_input.rs
@@ -0,0 +1,61 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct AlwaysModeledErrorInput {
+    pub(crate) value: Option<String>,
+}
+
+impl AlwaysModeledErrorInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> &Option<String> {
+        &self.value
+    }
+}
+
+impl AlwaysModeledErrorInput {
+    /// Creates a new builder-style object to manufacture [`AlwaysModeledErrorInput`](crate::operation::operation::AlwaysModeledErrorInput).
+    pub fn builder(
+    ) -> crate::operation::always_modeled_error::builders::AlwaysModeledErrorInputBuilder {
+        crate::operation::always_modeled_error::builders::AlwaysModeledErrorInputBuilder::default()
+    }
+}
+
+/// A builder for [`AlwaysModeledErrorInput`](crate::operation::operation::AlwaysModeledErrorInput).
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::default::Default)]
+pub struct AlwaysModeledErrorInputBuilder {
+    value: Option<String>,
+}
+
+impl AlwaysModeledErrorInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: String) -> Self {
+        self.value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: Option<String>) -> Self {
+        self.value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &Option<String> {
+        &self.value
+    }
+
+    /// Consumes the builder and constructs a [`AlwaysModeledErrorInput`](crate::operation::operation::AlwaysModeledErrorInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_modeled_error::AlwaysModeledErrorInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::always_modeled_error::AlwaysModeledErrorInput { value: self.value },
+        )
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error/_always_modeled_error_output.rs a/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error/_always_modeled_error_output.rs
new file mode 100644
index 00000000..9efb86c5
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error/_always_modeled_error_output.rs
@@ -0,0 +1,61 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct AlwaysModeledErrorOutput {
+    pub(crate) value: Option<String>,
+}
+
+impl AlwaysModeledErrorOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> &Option<String> {
+        &self.value
+    }
+}
+
+impl AlwaysModeledErrorOutput {
+    /// Creates a new builder-style object to manufacture [`AlwaysModeledErrorOutput`](crate::operation::operation::AlwaysModeledErrorOutput).
+    pub fn builder(
+    ) -> crate::operation::always_modeled_error::builders::AlwaysModeledErrorOutputBuilder {
+        crate::operation::always_modeled_error::builders::AlwaysModeledErrorOutputBuilder::default()
+    }
+}
+
+/// A builder for [`AlwaysModeledErrorOutput`](crate::operation::operation::AlwaysModeledErrorOutput).
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::default::Default)]
+pub struct AlwaysModeledErrorOutputBuilder {
+    value: Option<String>,
+}
+
+impl AlwaysModeledErrorOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: String) -> Self {
+        self.value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: Option<String>) -> Self {
+        self.value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &Option<String> {
+        &self.value
+    }
+
+    /// Consumes the builder and constructs a [`AlwaysModeledErrorOutput`](crate::operation::operation::AlwaysModeledErrorOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_modeled_error::AlwaysModeledErrorOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::always_modeled_error::AlwaysModeledErrorOutput { value: self.value },
+        )
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error/builders.rs a/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error/builders.rs
new file mode 100644
index 00000000..5e88b36b
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/always_modeled_error/builders.rs
@@ -0,0 +1,79 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::always_modeled_error::_always_modeled_error_output::AlwaysModeledErrorOutputBuilder;
+
+pub use crate::operation::always_modeled_error::_always_modeled_error_input::AlwaysModeledErrorInputBuilder;
+
+impl AlwaysModeledErrorInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: crate::types::extendable_resource::ExtendableResourceRef,
+    ) -> ::std::result::Result<
+        crate::operation::always_modeled_error::AlwaysModeledErrorOutput,
+        crate::operation::always_modeled_error::AlwaysModeledErrorError,
+    > {
+        let input = self.build().unwrap();
+        // let mut fluent_builder = client.borrow_mut().get_extendable_resource_data();
+        // fluent_builder.inner = self;
+        // fluent_builder.send().await
+        client.borrow_mut().always_modeled_error(input)
+    }
+}
+/// Fluent builder constructing a request to `AlwaysModeledError`.
+///
+#[derive(::std::clone::Clone)]
+pub struct AlwaysModeledErrorFluentBuilder {
+    client: crate::types::extendable_resource::ExtendableResourceRef,
+    inner: crate::operation::always_modeled_error::builders::AlwaysModeledErrorInputBuilder,
+}
+impl AlwaysModeledErrorFluentBuilder {
+    /// Creates a new `AlwaysModeledError`.
+    #[allow(dead_code)]
+    pub(crate) fn new(client: crate::types::extendable_resource::ExtendableResourceRef) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the AlwaysModeledError as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::always_modeled_error::builders::AlwaysModeledErrorInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::always_modeled_error::AlwaysModeledErrorOutput,
+        crate::operation::always_modeled_error::AlwaysModeledErrorError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since AlwaysModeledError doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::always_modeled_error::AlwaysModeledErrorError::unhandled)?;
+        crate::operation::always_modeled_error::AlwaysModeledError::send(self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: Option<String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &Option<String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource.rs a/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource.rs
new file mode 100644
index 00000000..022145b5
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource.rs
@@ -0,0 +1,149 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `CreateExtendableResource`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct CreateExtendableResource;
+impl CreateExtendableResource {
+    /// Creates a new `CreateExtendableResource`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::create_extendable_resource::CreateExtendableResourceInput,
+    ) -> ::std::result::Result<
+        crate::operation::create_extendable_resource::CreateExtendableResourceOutput,
+        crate::operation::create_extendable_resource::CreateExtendableResourceError,
+    > {
+        let inner_input = crate::conversions::create_extendable_resource::_create_extendable_resource_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(client.dafny_client.clone())
+            .CreateExtendableResource(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_extendable_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::create_extendable_resource::_create_extendable_resource_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::create_extendable_resource::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `CreateExtendableResource` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum CreateExtendableResourceError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-CreateExtendableResourceError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl CreateExtendableResourceError {
+    /// Creates the `CreateExtendableResourceError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `CreateExtendableResourceError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for CreateExtendableResourceError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for CreateExtendableResourceError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for CreateExtendableResourceError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for CreateExtendableResourceError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError
+    for CreateExtendableResourceError
+{
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::create_extendable_resource::_create_extendable_resource_output::CreateExtendableResourceOutput;
+
+pub use crate::operation::create_extendable_resource::_create_extendable_resource_input::CreateExtendableResourceInput;
+
+mod _create_extendable_resource_input;
+
+mod _create_extendable_resource_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource/_create_extendable_resource_input.rs a/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource/_create_extendable_resource_input.rs
new file mode 100644
index 00000000..f307afad
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource/_create_extendable_resource_input.rs
@@ -0,0 +1,60 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct CreateExtendableResourceInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub(crate) name: ::std::string::String,
+}
+impl CreateExtendableResourceInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn name(&self) -> &String {
+        &self.name
+    }
+}
+impl CreateExtendableResourceInput {
+    /// Creates a new builder-style object to manufacture [`CreateExtendableResourceInput`](crate::operation::operation::CreateExtendableResourceInput).
+    pub fn builder(
+    ) -> crate::operation::create_extendable_resource::builders::CreateExtendableResourceInputBuilder
+    {
+        crate::operation::create_extendable_resource::builders::CreateExtendableResourceInputBuilder::default()
+    }
+}
+
+/// A builder for [`CreateExtendableResourceInput`](crate::operation::operation::CreateExtendableResourceInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct CreateExtendableResourceInputBuilder {
+    pub(crate) name: ::std::option::Option<::std::string::String>,
+}
+impl CreateExtendableResourceInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.name = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.name = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
+        &self.name
+    }
+    /// Consumes the builder and constructs a [`CreateExtendableResourceInput`](crate::operation::operation::CreateExtendableResourceInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::create_extendable_resource::CreateExtendableResourceInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::create_extendable_resource::CreateExtendableResourceInput {
+                name: self.name.unwrap(),
+            },
+        )
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource/_create_extendable_resource_output.rs a/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource/_create_extendable_resource_output.rs
new file mode 100644
index 00000000..9fecc60f
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource/_create_extendable_resource_output.rs
@@ -0,0 +1,71 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+pub struct CreateExtendableResourceOutput {
+    pub(crate) output: crate::types::extendable_resource::ExtendableResourceRef,
+}
+
+impl CreateExtendableResourceOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn output(&self) -> crate::types::extendable_resource::ExtendableResourceRef {
+        self.output.clone()
+    }
+}
+
+impl CreateExtendableResourceOutput {
+    /// Creates a new builder-style object to manufacture [`CreateExtendableResourceOutput`](crate::operation::operation::CreateExtendableResourceOutput).
+    pub fn builder(
+    ) -> crate::operation::create_extendable_resource::builders::CreateExtendableResourceOutputBuilder
+    {
+        crate::operation::create_extendable_resource::builders::CreateExtendableResourceOutputBuilder::default()
+    }
+}
+
+/// A builder for [`CreateExtendableResourceOutput`](crate::operation::operation::CreateExtendableResourceOutput).
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::default::Default)]
+pub struct CreateExtendableResourceOutputBuilder {
+    pub(crate) output:
+        ::std::option::Option<crate::types::extendable_resource::ExtendableResourceRef>,
+}
+
+impl CreateExtendableResourceOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn output(
+        mut self,
+        input: crate::types::extendable_resource::ExtendableResourceRef,
+    ) -> Self {
+        self.output = ::std::option::Option::Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_output(
+        mut self,
+        input: ::std::option::Option<crate::types::extendable_resource::ExtendableResourceRef>,
+    ) -> Self {
+        self.output = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_output(
+        &self,
+    ) -> &::std::option::Option<crate::types::extendable_resource::ExtendableResourceRef> {
+        &self.output
+    }
+
+    /// Consumes the builder and constructs a [`CreateExtendableResourceOutput`](crate::operation::operation::CreateExtendableResourceOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::create_extendable_resource::CreateExtendableResourceOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::create_extendable_resource::CreateExtendableResourceOutput {
+                output: self.output.unwrap(),
+            },
+        )
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource/builders.rs a/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource/builders.rs
new file mode 100644
index 00000000..a0b85a66
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/create_extendable_resource/builders.rs
@@ -0,0 +1,79 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::create_extendable_resource::_create_extendable_resource_output::CreateExtendableResourceOutputBuilder;
+
+pub use crate::operation::create_extendable_resource::_create_extendable_resource_input::CreateExtendableResourceInputBuilder;
+
+impl CreateExtendableResourceInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::create_extendable_resource::CreateExtendableResourceOutput,
+        crate::operation::create_extendable_resource::CreateExtendableResourceError,
+    > {
+        let mut fluent_builder = client.create_extendable_resource();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `CreateExtendableResource`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct CreateExtendableResourceFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::create_extendable_resource::builders::CreateExtendableResourceInputBuilder,
+}
+impl CreateExtendableResourceFluentBuilder {
+    /// Creates a new `CreateExtendableResource`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the CreateExtendableResource as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::create_extendable_resource::builders::CreateExtendableResourceInputBuilder
+    {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::create_extendable_resource::CreateExtendableResourceOutput,
+        crate::operation::create_extendable_resource::CreateExtendableResourceError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since CreateExtendableResource doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::create_extendable_resource::CreateExtendableResourceError::unhandled)?;
+        crate::operation::create_extendable_resource::CreateExtendableResource::send(
+            &self.client,
+            input,
+        )
+        .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.name(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_name(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_name()
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data.rs a/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data.rs
new file mode 100644
index 00000000..327919c9
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data.rs
@@ -0,0 +1,132 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetExtendableResourceData`.
+
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetExtendableResourceData;
+impl GetExtendableResourceData {
+    /// Creates a new `GetExtendableResourceData`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: crate::types::extendable_resource::ExtendableResourceRef,
+        input: crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput,
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataError,
+    > {
+        client.borrow_mut().get_extendable_resource_data(input)
+    }
+}
+
+/// Error type for the `GetExtendableResourceData` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetExtendableResourceDataError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetExtendableResourceDataError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetExtendableResourceDataError {
+    /// Creates the `GetExtendableResourceDataError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetExtendableResourceDataError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetExtendableResourceDataError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetExtendableResourceDataError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetExtendableResourceDataError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetExtendableResourceDataError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError
+    for GetExtendableResourceDataError
+{
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_extendable_resource_data::_get_extendable_resource_data_output::GetExtendableResourceDataOutput;
+
+pub use crate::operation::get_extendable_resource_data::_get_extendable_resource_data_input::GetExtendableResourceDataInput;
+
+mod _get_extendable_resource_data_input;
+
+mod _get_extendable_resource_data_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data/_get_extendable_resource_data_input.rs a/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data/_get_extendable_resource_data_input.rs
new file mode 100644
index 00000000..4bde18a1
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data/_get_extendable_resource_data_input.rs
@@ -0,0 +1,159 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetExtendableResourceDataInput {
+    pub(crate) blob_value: Option<Vec<u8>>,
+    pub(crate) boolean_value: Option<bool>,
+    pub(crate) string_value: Option<String>,
+    pub(crate) integer_value: Option<i32>,
+    pub(crate) long_value: Option<i64>,
+}
+
+impl GetExtendableResourceDataInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(&self) -> &Option<Vec<u8>> {
+        &self.blob_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(&self) -> Option<bool> {
+        self.boolean_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(&self) -> &Option<String> {
+        &self.string_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(&self) -> Option<i32> {
+        self.integer_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(&self) -> Option<i64> {
+        self.long_value
+    }
+}
+
+impl GetExtendableResourceDataInput {
+    /// Creates a new builder-style object to manufacture [`GetExtendableResourceDataInput`](crate::operation::operation::GetExtendableResourceDataInput).
+    pub fn builder() -> crate::operation::get_extendable_resource_data::builders::GetExtendableResourceDataInputBuilder{
+        crate::operation::get_extendable_resource_data::builders::GetExtendableResourceDataInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetExtendableResourceDataInput`](crate::operation::operation::GetExtendableResourceDataInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetExtendableResourceDataInputBuilder {
+    blob_value: Option<Vec<u8>>,
+    boolean_value: Option<bool>,
+    string_value: Option<String>,
+    integer_value: Option<i32>,
+    long_value: Option<i64>,
+}
+
+impl GetExtendableResourceDataInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(mut self, input: Vec<u8>) -> Self {
+        self.blob_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_blob_value(mut self, input: Option<Vec<u8>>) -> Self {
+        self.blob_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_blob_value(&self) -> &Option<Vec<u8>> {
+        &self.blob_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(mut self, input: bool) -> Self {
+        self.boolean_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_boolean_value(mut self, input: Option<bool>) -> Self {
+        self.boolean_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_boolean_value(&self) -> Option<bool> {
+        self.boolean_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(mut self, input: String) -> Self {
+        self.string_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_string_value(mut self, input: Option<String>) -> Self {
+        self.string_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_string_value(&self) -> &Option<String> {
+        &self.string_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(mut self, input: i32) -> Self {
+        self.integer_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_integer_value(mut self, input: Option<i32>) -> Self {
+        self.integer_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_integer_value(&self) -> Option<i32> {
+        self.integer_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(mut self, input: i64) -> Self {
+        self.long_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_long_value(mut self, input: Option<i64>) -> Self {
+        self.long_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_long_value(&self) -> Option<i64> {
+        self.long_value
+    }
+
+    /// Consumes the builder and constructs a [`GetExtendableResourceDataInput`](crate::operation::operation::GetExtendableResourceDataInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput {
+                blob_value: self.blob_value,
+                boolean_value: self.boolean_value,
+                string_value: self.string_value,
+                integer_value: self.integer_value,
+                long_value: self.long_value,
+            },
+        )
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data/_get_extendable_resource_data_output.rs a/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data/_get_extendable_resource_data_output.rs
new file mode 100644
index 00000000..8a90caa9
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data/_get_extendable_resource_data_output.rs
@@ -0,0 +1,160 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetExtendableResourceDataOutput {
+    pub(crate) blob_value: Option<Vec<u8>>,
+    pub(crate) boolean_value: Option<bool>,
+    pub(crate) string_value: Option<String>,
+    pub(crate) integer_value: Option<i32>,
+    pub(crate) long_value: Option<i64>,
+}
+
+impl GetExtendableResourceDataOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(&self) -> &Option<Vec<u8>> {
+        &self.blob_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(&self) -> Option<bool> {
+        self.boolean_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(&self) -> &Option<String> {
+        &self.string_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(&self) -> Option<i32> {
+        self.integer_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(&self) -> Option<i64> {
+        self.long_value
+    }
+}
+
+impl GetExtendableResourceDataOutput {
+    /// Creates a new builder-style object to manufacture [`GetExtendableResourceDataOutput`](crate::operation::operation::GetExtendableResourceDataOutput).
+    pub fn builder() -> crate::operation::get_extendable_resource_data::builders::GetExtendableResourceDataOutputBuilder
+    {
+        crate::operation::get_extendable_resource_data::builders::GetExtendableResourceDataOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetExtendableResourceDataOutput`](crate::operation::operation::GetExtendableResourceDataOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetExtendableResourceDataOutputBuilder {
+    blob_value: Option<Vec<u8>>,
+    boolean_value: Option<bool>,
+    string_value: Option<String>,
+    integer_value: Option<i32>,
+    long_value: Option<i64>,
+}
+
+impl GetExtendableResourceDataOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(mut self, input: Vec<u8>) -> Self {
+        self.blob_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_blob_value(mut self, input: Option<Vec<u8>>) -> Self {
+        self.blob_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_blob_value(&self) -> &Option<Vec<u8>> {
+        &self.blob_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(mut self, input: bool) -> Self {
+        self.boolean_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_boolean_value(mut self, input: Option<bool>) -> Self {
+        self.boolean_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_boolean_value(&self) -> Option<bool> {
+        self.boolean_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(mut self, input: String) -> Self {
+        self.string_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_string_value(mut self, input: Option<String>) -> Self {
+        self.string_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_string_value(&self) -> &Option<String> {
+        &self.string_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(mut self, input: i32) -> Self {
+        self.integer_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_integer_value(mut self, input: Option<i32>) -> Self {
+        self.integer_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_integer_value(&self) -> Option<i32> {
+        self.integer_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(mut self, input: i64) -> Self {
+        self.long_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_long_value(mut self, input: Option<i64>) -> Self {
+        self.long_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_long_value(&self) -> Option<i64> {
+        self.long_value
+    }
+
+    /// Consumes the builder and constructs a [`GetExtendableResourceDataOutput`](crate::operation::operation::GetExtendableResourceDataOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput {
+                blob_value: self.blob_value,
+                boolean_value: self.boolean_value,
+                string_value: self.string_value,
+                integer_value: self.integer_value,
+                long_value: self.long_value,
+            },
+        )
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data/builders.rs a/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data/builders.rs
new file mode 100644
index 00000000..e452efcd
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/get_extendable_resource_data/builders.rs
@@ -0,0 +1,152 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_extendable_resource_data::_get_extendable_resource_data_output::GetExtendableResourceDataOutputBuilder;
+
+pub use crate::operation::get_extendable_resource_data::_get_extendable_resource_data_input::GetExtendableResourceDataInputBuilder;
+
+impl GetExtendableResourceDataInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: crate::types::extendable_resource::ExtendableResourceRef,
+    ) -> ::std::result::Result<
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput,
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataError,
+    > {
+        // FIXME - how to convert BuildError to GetExtendableResourceDataError
+        let input = self.build().unwrap();
+        // let mut fluent_builder = client.borrow_mut().get_extendable_resource_data();
+        // fluent_builder.inner = self;
+        // fluent_builder.send().await
+        client.borrow_mut().get_extendable_resource_data(input)
+    }
+}
+/// Fluent builder constructing a request to `GetExtendableResourceData`.
+///
+#[derive(::std::clone::Clone)]
+pub struct GetExtendableResourceDataFluentBuilder {
+    client: crate::types::extendable_resource::ExtendableResourceRef,
+    inner: crate::operation::get_extendable_resource_data::builders::GetExtendableResourceDataInputBuilder,
+}
+impl GetExtendableResourceDataFluentBuilder {
+    /// Creates a new `GetExtendableResourceData`.
+    #[allow(dead_code)]
+    pub(crate) fn new(client: crate::types::extendable_resource::ExtendableResourceRef) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetExtendableResourceData as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_extendable_resource_data::builders::GetExtendableResourceDataInputBuilder{
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput,
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetExtendableResourceData doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_extendable_resource_data::GetExtendableResourceDataError::unhandled)?;
+        crate::operation::get_extendable_resource_data::GetExtendableResourceData::send(
+            self.client,
+            input,
+        )
+        .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(mut self, input: impl ::std::convert::Into<Vec<u8>>) -> Self {
+        self.inner = self.inner.blob_value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_blob_value(mut self, input: Option<Vec<u8>>) -> Self {
+        self.inner = self.inner.set_blob_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_blob_value(&self) -> &Option<Vec<u8>> {
+        self.inner.get_blob_value()
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(mut self, input: impl ::std::convert::Into<bool>) -> Self {
+        self.inner = self.inner.boolean_value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_boolean_value(mut self, input: Option<bool>) -> Self {
+        self.inner = self.inner.set_boolean_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_boolean_value(&self) -> Option<bool> {
+        self.inner.get_boolean_value()
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(mut self, input: impl ::std::convert::Into<String>) -> Self {
+        self.inner = self.inner.string_value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_string_value(mut self, input: Option<String>) -> Self {
+        self.inner = self.inner.set_string_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_string_value(&self) -> &Option<String> {
+        self.inner.get_string_value()
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(mut self, input: impl ::std::convert::Into<i32>) -> Self {
+        self.inner = self.inner.integer_value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_integer_value(mut self, input: Option<i32>) -> Self {
+        self.inner = self.inner.set_integer_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_integer_value(&self) -> Option<i32> {
+        self.inner.get_integer_value()
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(mut self, input: impl ::std::convert::Into<i64>) -> Self {
+        self.inner = self.inner.long_value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_long_value(mut self, input: Option<i64>) -> Self {
+        self.inner = self.inner.set_long_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_long_value(&self) -> Option<i64> {
+        self.inner.get_long_value()
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource.rs a/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource.rs
new file mode 100644
index 00000000..8c4a2b60
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource.rs
@@ -0,0 +1,151 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `UseExtendableResource`.
+
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct UseExtendableResource;
+impl UseExtendableResource {
+    /// Uses a new `UseExtendableResource`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::use_extendable_resource::UseExtendableResourceInput,
+    ) -> ::std::result::Result<
+        crate::operation::use_extendable_resource::UseExtendableResourceOutput,
+        crate::operation::use_extendable_resource::UseExtendableResourceError,
+    > {
+        let inner_input =
+            crate::conversions::use_extendable_resource::_use_extendable_resource_input::to_dafny(
+                input,
+            );
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).UseExtendableResource(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_extendable_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::use_extendable_resource::_use_extendable_resource_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::use_extendable_resource::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `UseExtendableResource` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum UseExtendableResourceError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-UseExtendableResourceError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl UseExtendableResourceError {
+    /// Uses the `UseExtendableResourceError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Uses the `UseExtendableResourceError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for UseExtendableResourceError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for UseExtendableResourceError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for UseExtendableResourceError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for UseExtendableResourceError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for UseExtendableResourceError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::use_extendable_resource::_use_extendable_resource_output::UseExtendableResourceOutput;
+
+pub use crate::operation::use_extendable_resource::_use_extendable_resource_input::UseExtendableResourceInput;
+
+mod _use_extendable_resource_input;
+
+mod _use_extendable_resource_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource/_use_extendable_resource_input.rs a/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource/_use_extendable_resource_input.rs
new file mode 100644
index 00000000..0f803166
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource/_use_extendable_resource_input.rs
@@ -0,0 +1,95 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+use crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput;
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone)]
+pub struct UseExtendableResourceInput {
+    pub(crate) input: GetExtendableResourceDataInput,
+    pub(crate) resource: crate::types::extendable_resource::ExtendableResourceRef,
+}
+
+impl UseExtendableResourceInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn input(&self) -> &GetExtendableResourceDataInput {
+        &self.input
+    }
+    pub fn resource(&self) -> &crate::types::extendable_resource::ExtendableResourceRef {
+        &self.resource
+    }
+}
+
+impl UseExtendableResourceInput {
+    /// Creates a new builder-style object to manufacture [`UseExtendableResourceInput`](crate::operation::operation::UseExtendableResourceInput).
+    pub fn builder(
+    ) -> crate::operation::use_extendable_resource::builders::UseExtendableResourceInputBuilder
+    {
+        crate::operation::use_extendable_resource::builders::UseExtendableResourceInputBuilder::default()
+    }
+}
+
+/// A builder for [`UseExtendableResourceInput`](crate::operation::operation::UseExtendableResourceInput).
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::default::Default)]
+pub struct UseExtendableResourceInputBuilder {
+    input: Option<GetExtendableResourceDataInput>,
+    resource: Option<crate::types::extendable_resource::ExtendableResourceRef>,
+}
+
+impl UseExtendableResourceInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn input(mut self, input: GetExtendableResourceDataInput) -> Self {
+        self.input = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_input(mut self, input: Option<GetExtendableResourceDataInput>) -> Self {
+        self.input = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_input(&self) -> &Option<GetExtendableResourceDataInput> {
+        &self.input
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn resource(
+        mut self,
+        input: crate::types::extendable_resource::ExtendableResourceRef,
+    ) -> Self {
+        self.resource = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_resource(
+        mut self,
+        input: Option<crate::types::extendable_resource::ExtendableResourceRef>,
+    ) -> Self {
+        self.resource = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_resource(
+        &self,
+    ) -> &Option<crate::types::extendable_resource::ExtendableResourceRef> {
+        &self.resource
+    }
+
+    /// Consumes the builder and constructs a [`UseExtendableResourceInput`](crate::operation::operation::UseExtendableResourceInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::use_extendable_resource::UseExtendableResourceInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::use_extendable_resource::UseExtendableResourceInput {
+                input: self.input.unwrap(),
+                resource: self.resource.unwrap(),
+            },
+        )
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource/_use_extendable_resource_output.rs a/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource/_use_extendable_resource_output.rs
new file mode 100644
index 00000000..c51b17f2
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource/_use_extendable_resource_output.rs
@@ -0,0 +1,66 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+use crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput;
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct UseExtendableResourceOutput {
+    pub(crate) output: GetExtendableResourceDataOutput,
+}
+
+impl UseExtendableResourceOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn output(&self) -> &GetExtendableResourceDataOutput {
+        &self.output
+    }
+}
+
+impl UseExtendableResourceOutput {
+    /// Creates a new builder-style object to manufacture [`UseExtendableResourceOutput`](crate::operation::operation::UseExtendableResourceOutput).
+    pub fn builder(
+    ) -> crate::operation::use_extendable_resource::builders::UseExtendableResourceOutputBuilder
+    {
+        crate::operation::use_extendable_resource::builders::UseExtendableResourceOutputBuilder::default()
+    }
+}
+
+/// A builder for [`UseExtendableResourceOutput`](crate::operation::operation::UseExtendableResourceOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct UseExtendableResourceOutputBuilder {
+    output: Option<GetExtendableResourceDataOutput>,
+}
+
+impl UseExtendableResourceOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn output(mut self, input: GetExtendableResourceDataOutput) -> Self {
+        self.output = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_output(mut self, input: Option<GetExtendableResourceDataOutput>) -> Self {
+        self.output = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_output(&self) -> &Option<GetExtendableResourceDataOutput> {
+        &self.output
+    }
+
+    /// Consumes the builder and constructs a [`UseExtendableResourceOutput`](crate::operation::operation::UseExtendableResourceOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::use_extendable_resource::UseExtendableResourceOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::use_extendable_resource::UseExtendableResourceOutput {
+                output: self.output.unwrap(),
+            },
+        )
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource/builders.rs a/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource/builders.rs
new file mode 100644
index 00000000..913472b0
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/operation/use_extendable_resource/builders.rs
@@ -0,0 +1,119 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::use_extendable_resource::_use_extendable_resource_output::UseExtendableResourceOutputBuilder;
+
+pub use crate::operation::use_extendable_resource::_use_extendable_resource_input::UseExtendableResourceInputBuilder;
+
+impl UseExtendableResourceInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::use_extendable_resource::UseExtendableResourceOutput,
+        crate::operation::use_extendable_resource::UseExtendableResourceError,
+    > {
+        let mut fluent_builder = client.use_extendable_resource();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `UseExtendableResource`.
+///
+#[derive(::std::clone::Clone)]
+pub struct UseExtendableResourceFluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::use_extendable_resource::builders::UseExtendableResourceInputBuilder,
+}
+impl UseExtendableResourceFluentBuilder {
+    /// Creates a new `UseExtendableResource`.
+    #[allow(dead_code)]
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the UseExtendableResource as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::use_extendable_resource::builders::UseExtendableResourceInputBuilder
+    {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::use_extendable_resource::UseExtendableResourceOutput,
+        crate::operation::use_extendable_resource::UseExtendableResourceError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since UseExtendableResource doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(
+                crate::operation::use_extendable_resource::UseExtendableResourceError::unhandled,
+            )?;
+        crate::operation::use_extendable_resource::UseExtendableResource::send(&self.client, input)
+            .await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn input(
+        mut self,
+        input: impl ::std::convert::Into<
+            crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput,
+        >,
+    ) -> Self {
+        self.inner = self.inner.input(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_input(
+        mut self,
+        input: Option<
+            crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput,
+        >,
+    ) -> Self {
+        self.inner = self.inner.set_input(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_input(
+        &self,
+    ) -> &Option<crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput>
+    {
+        self.inner.get_input()
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn resource(
+        mut self,
+        input: impl ::std::convert::Into<crate::types::extendable_resource::ExtendableResourceRef>,
+    ) -> Self {
+        self.inner = self.inner.resource(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_resource(
+        mut self,
+        input: Option<crate::types::extendable_resource::ExtendableResourceRef>,
+    ) -> Self {
+        self.inner = self.inner.set_resource(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_resource(
+        &self,
+    ) -> &Option<crate::types::extendable_resource::ExtendableResourceRef> {
+        self.inner.get_resource()
+    }
+}
diff --git b/TestModels/Extendable/runtimes/rust/src/types.rs a/TestModels/Extendable/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..ece013ae
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/types.rs
@@ -0,0 +1,8 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `ExtendableResource`
+pub mod extendable_resource;
+pub use extendable_resource::ExtendableResource;
+
+/// Types for the `SimpleExtendableResourcesConfig`
+pub mod simple_extendable_resources_config;
diff --git b/TestModels/Extendable/runtimes/rust/src/types/extendable_resource.rs a/TestModels/Extendable/runtimes/rust/src/types/extendable_resource.rs
new file mode 100644
index 00000000..5f3742cf
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/types/extendable_resource.rs
@@ -0,0 +1,22 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub trait ExtendableResource {
+    fn get_extendable_resource_data(
+        &mut self,
+        input: crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput,
+    ) -> Result<
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataOutput,
+        crate::operation::get_extendable_resource_data::GetExtendableResourceDataError,
+    >;
+    fn always_modeled_error(
+        &mut self,
+        input: crate::operation::always_modeled_error::AlwaysModeledErrorInput,
+    ) -> Result<
+        crate::operation::always_modeled_error::AlwaysModeledErrorOutput,
+        crate::operation::always_modeled_error::AlwaysModeledErrorError,
+    >;
+}
+
+pub trait ExtendableResourceDebug: ExtendableResource + std::fmt::Debug {}
+impl<T> ExtendableResourceDebug for T where T: ExtendableResource + std::fmt::Debug {}
+pub type ExtendableResourceRef = ::std::rc::Rc<std::cell::RefCell<dyn ExtendableResourceDebug>>;
diff --git b/TestModels/Extendable/runtimes/rust/src/types/simple_extendable_resources_config.rs a/TestModels/Extendable/runtimes/rust/src/types/simple_extendable_resources_config.rs
new file mode 100644
index 00000000..06ffd95c
--- /dev/null
+++ a/TestModels/Extendable/runtimes/rust/src/types/simple_extendable_resources_config.rs
@@ -0,0 +1,28 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleExtendableResourcesConfig {}
+
+impl SimpleExtendableResourcesConfig {
+    pub fn builder() -> SimpleExtendableResourcesConfigBuilder {
+        SimpleExtendableResourcesConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug, ::std::default::Default)]
+pub struct SimpleExtendableResourcesConfigBuilder {}
+
+impl SimpleExtendableResourcesConfigBuilder {
+    /// Creates a new `SimpleExtendableResourcesConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self::default()
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        SimpleExtendableResourcesConfig,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(SimpleExtendableResourcesConfig {})
+    }
+}
