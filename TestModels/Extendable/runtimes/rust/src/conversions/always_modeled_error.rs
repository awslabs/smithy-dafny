// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

use std::any::Any;

#[allow(dead_code)]
pub fn to_dafny_error(
    value: crate::operation::always_modeled_error::AlwaysModeledErrorError,
) -> ::std::rc::Rc<
    crate::r#simple::extendable::resources::internaldafny::types::Error,
> {
    match value {
      crate::operation::always_modeled_error::AlwaysModeledErrorError::SimpleExtendableResourcesException(e) =>
      ::std::rc::Rc::new(crate::r#simple::extendable::resources::internaldafny::types::Error::SimpleExtendableResourcesException { 
        message: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&e.message)
      }),
      crate::operation::always_modeled_error::AlwaysModeledErrorError::Unhandled(unhandled) =>
      ::std::rc::Rc::new(crate::r#simple::extendable::resources::internaldafny::types::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
  }
}

#[allow(dead_code)]
pub fn from_dafny_error(
    dafny_value: ::std::rc::Rc<
        crate::r#simple::extendable::resources::internaldafny::types::Error,
    >,
) -> crate::operation::always_modeled_error::AlwaysModeledErrorError {
    match &*dafny_value {
      crate::r#simple::extendable::resources::internaldafny::types::Error::SimpleExtendableResourcesException {
        message,
    } =>
    crate::operation::always_modeled_error::AlwaysModeledErrorError::SimpleExtendableResourcesException (
      crate::error::simple_extendable_resources_exception::SimpleExtendableResourcesException {
        message : dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&message),
        meta : ::std::default::Default::default()
      }
    ),
    crate::r#simple::extendable::resources::internaldafny::types::Error::CollectionOfErrors {
      list, message,
    } =>
    crate::operation::always_modeled_error::AlwaysModeledErrorError::SimpleExtendableResourcesException (
      crate::error::simple_extendable_resources_exception::SimpleExtendableResourcesException {
        message : dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&message) + " Plus some unknown list of errors.",
        meta : ::std::default::Default::default()
      }
    ),
    crate::r#simple::extendable::resources::internaldafny::types::Error::Opaque {
      obj,
    } =>
    crate::operation::always_modeled_error::AlwaysModeledErrorError::SimpleExtendableResourcesException (
      crate::error::simple_extendable_resources_exception::SimpleExtendableResourcesException {
        message : "Opaque Error".to_string(),
        meta : ::std::default::Default::default()
      }
    ),
  }
}

//     // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
//     if matches!(&dafny_value.as_ref(), crate::r#simple::extendable::resources::internaldafny::types::Error::CollectionOfErrors { .. }) {
//     let error_message = "TODO: can't get message yet";
//     crate::operation::always_modeled_error::AlwaysModeledErrorError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
//   } else {
//     crate::operation::always_modeled_error::AlwaysModeledErrorError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
//   }
// }

pub mod _always_modeled_error_input;

pub mod _always_modeled_error_output;
