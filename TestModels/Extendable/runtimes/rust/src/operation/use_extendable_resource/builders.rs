// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::use_extendable_resource::_use_extendable_resource_output::UseExtendableResourceOutputBuilder;

pub use crate::operation::use_extendable_resource::_use_extendable_resource_input::UseExtendableResourceInputBuilder;

impl UseExtendableResourceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::use_extendable_resource::UseExtendableResourceOutput,
        crate::operation::use_extendable_resource::UseExtendableResourceError,
    > {
        let mut fluent_builder = client.use_extendable_resource();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UseExtendableResource`.
///
#[derive(::std::clone::Clone)]
pub struct UseExtendableResourceFluentBuilder {
    client: crate::Client,
    inner: crate::operation::use_extendable_resource::builders::UseExtendableResourceInputBuilder,
}
impl UseExtendableResourceFluentBuilder {
    /// Creates a new `UseExtendableResource`.
    #[allow(dead_code)]
    pub(crate) fn new(client: crate::Client) -> Self {
        Self {
            client,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the UseExtendableResource as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::use_extendable_resource::builders::UseExtendableResourceInputBuilder
    {
        &self.inner
    }
    /// Sends the request and returns the response.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::use_extendable_resource::UseExtendableResourceOutput,
        crate::operation::use_extendable_resource::UseExtendableResourceError,
    > {
        let input = self
            .inner
            .build()
            // Using unhandled since UseExtendableResource doesn't declare any validation,
            // and smithy-rs seems to not generate a ValidationError case unless there is
            // (but isn't that a backwards compatibility problem for output structures?)
            // Vanilla smithy-rs uses SdkError::construction_failure,
            // but we aren't using SdkError.
            .map_err(
                crate::operation::use_extendable_resource::UseExtendableResourceError::unhandled,
            )?;
        crate::operation::use_extendable_resource::UseExtendableResource::send(&self.client, input)
            .await
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn input(mut self, input: impl ::std::convert::Into<crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput>) -> Self {
        self.inner = self.inner.input(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_input(mut self, input: Option<crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput>) -> Self {
        self.inner = self.inner.set_input(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_input(&self) -> &Option<crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput> {
        self.inner.get_input()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn resource(mut self, input: impl ::std::convert::Into<crate::types::extendable_resource::ExtendableResourceRef>) -> Self {
        self.inner = self.inner.resource(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_resource(mut self, input: Option<crate::types::extendable_resource::ExtendableResourceRef>) -> Self {
        self.inner = self.inner.set_resource(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_resource(&self) -> &Option<crate::types::extendable_resource::ExtendableResourceRef> {
        self.inner.get_resource()
    }

}
