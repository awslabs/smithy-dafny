// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use crate::operation::get_extendable_resource_data::GetExtendableResourceDataInput;
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone)]
pub struct UseExtendableResourceInput {
    pub(crate) input: GetExtendableResourceDataInput,
    pub(crate) resource: crate::types::extendable_resource::ExtendableResourceRef,
}

impl UseExtendableResourceInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn input(&self) -> &GetExtendableResourceDataInput {
        &self.input
    }
    pub fn resource(&self) -> &crate::types::extendable_resource::ExtendableResourceRef {
        &self.resource
    }
}

impl UseExtendableResourceInput {
    /// Creates a new builder-style object to manufacture [`UseExtendableResourceInput`](crate::operation::operation::UseExtendableResourceInput).
    pub fn builder(
    ) -> crate::operation::use_extendable_resource::builders::UseExtendableResourceInputBuilder
    {
        crate::operation::use_extendable_resource::builders::UseExtendableResourceInputBuilder::default()
    }
}

/// A builder for [`UseExtendableResourceInput`](crate::operation::operation::UseExtendableResourceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::default::Default)]
pub struct UseExtendableResourceInputBuilder {
    input: Option<GetExtendableResourceDataInput>,
    resource: Option<crate::types::extendable_resource::ExtendableResourceRef>,
}

impl UseExtendableResourceInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn input(mut self, input: GetExtendableResourceDataInput) -> Self {
        self.input = Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_input(mut self, input: Option<GetExtendableResourceDataInput>) -> Self {
        self.input = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_input(&self) -> &Option<GetExtendableResourceDataInput> {
        &self.input
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn resource(
        mut self,
        input: crate::types::extendable_resource::ExtendableResourceRef,
    ) -> Self {
        self.resource = Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_resource(
        mut self,
        input: Option<crate::types::extendable_resource::ExtendableResourceRef>,
    ) -> Self {
        self.resource = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_resource(
        &self,
    ) -> &Option<crate::types::extendable_resource::ExtendableResourceRef> {
        &self.resource
    }

    /// Consumes the builder and constructs a [`UseExtendableResourceInput`](crate::operation::operation::UseExtendableResourceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::use_extendable_resource::UseExtendableResourceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::use_extendable_resource::UseExtendableResourceInput {
                input: self.input.unwrap(),
                resource: self.resource.unwrap(),
            },
        )
    }
}
