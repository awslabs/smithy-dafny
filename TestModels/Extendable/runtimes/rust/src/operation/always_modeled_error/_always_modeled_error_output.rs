// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AlwaysModeledErrorOutput {
    pub(crate) value: Option<String>,
}

impl AlwaysModeledErrorOutput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn value(&self) -> &Option<String> {
        &self.value
    }
}

impl AlwaysModeledErrorOutput {
    /// Creates a new builder-style object to manufacture [`AlwaysModeledErrorOutput`](crate::operation::operation::AlwaysModeledErrorOutput).
    pub fn builder(
    ) -> crate::operation::always_modeled_error::builders::AlwaysModeledErrorOutputBuilder {
        crate::operation::always_modeled_error::builders::AlwaysModeledErrorOutputBuilder::default()
    }
}

/// A builder for [`AlwaysModeledErrorOutput`](crate::operation::operation::AlwaysModeledErrorOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::default::Default)]
pub struct AlwaysModeledErrorOutputBuilder {
    value: Option<String>,
}

impl AlwaysModeledErrorOutputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn value(mut self, input: String) -> Self {
        self.value = Some(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_value(mut self, input: Option<String>) -> Self {
        self.value = input;
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_value(&self) -> &Option<String> {
        &self.value
    }

    /// Consumes the builder and constructs a [`AlwaysModeledErrorOutput`](crate::operation::operation::AlwaysModeledErrorOutput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::always_modeled_error::AlwaysModeledErrorOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::always_modeled_error::AlwaysModeledErrorOutput { value: self.value },
        )
    }
}
