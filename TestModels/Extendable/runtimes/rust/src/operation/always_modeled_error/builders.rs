// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::always_modeled_error::_always_modeled_error_output::AlwaysModeledErrorOutputBuilder;

pub use crate::operation::always_modeled_error::_always_modeled_error_input::AlwaysModeledErrorInputBuilder;

impl AlwaysModeledErrorInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: crate::types::extendable_resource::ExtendableResourceRef,
    ) -> ::std::result::Result<
        crate::operation::always_modeled_error::AlwaysModeledErrorOutput,
        crate::operation::always_modeled_error::AlwaysModeledErrorError,
    > {
        let input = self.build().unwrap();
        // let mut fluent_builder = client.borrow_mut().get_extendable_resource_data();
        // fluent_builder.inner = self;
        // fluent_builder.send().await
        client.borrow_mut().always_modeled_error(input)
    }
}
/// Fluent builder constructing a request to `AlwaysModeledError`.
///
#[derive(::std::clone::Clone)]
pub struct AlwaysModeledErrorFluentBuilder {
    client: crate::types::extendable_resource::ExtendableResourceRef,
    inner: crate::operation::always_modeled_error::builders::AlwaysModeledErrorInputBuilder,
}
impl AlwaysModeledErrorFluentBuilder {
    /// Creates a new `AlwaysModeledError`.
    #[allow(dead_code)]
    pub(crate) fn new(client: crate::types::extendable_resource::ExtendableResourceRef) -> Self {
        Self {
            client,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the AlwaysModeledError as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::always_modeled_error::builders::AlwaysModeledErrorInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::always_modeled_error::AlwaysModeledErrorOutput,
        crate::operation::always_modeled_error::AlwaysModeledErrorError,
    > {
        let input = self
            .inner
            .build()
            // Using unhandled since AlwaysModeledError doesn't declare any validation,
            // and smithy-rs seems to not generate a ValidationError case unless there is
            // (but isn't that a backwards compatibility problem for output structures?)
            // Vanilla smithy-rs uses SdkError::construction_failure,
            // but we aren't using SdkError.
            .map_err(crate::operation::always_modeled_error::AlwaysModeledErrorError::unhandled)?;
        crate::operation::always_modeled_error::AlwaysModeledError::send(self.client, input).await
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn value(mut self, input: impl ::std::convert::Into<String>) -> Self {
        self.inner = self.inner.value(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_value(mut self, input: Option<String>) -> Self {
        self.inner = self.inner.set_value(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_value(&self) -> &Option<String> {
        self.inner.get_value()
    }
}
