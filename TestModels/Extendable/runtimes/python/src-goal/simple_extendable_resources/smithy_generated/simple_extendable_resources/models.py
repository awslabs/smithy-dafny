# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import Any, Dict, Optional


class GetExtendableResourceErrorsInput:
    value: Optional[str]
    def __init__(
        self,
        *,
        value: Optional[str] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetExtendableResourceErrorsInput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetExtendableResourceErrorsInput":
        """Creates a GetExtendableResourceErrorsInput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return GetExtendableResourceErrorsInput(**kwargs)

    def __repr__(self) -> str:
        result = "GetExtendableResourceErrorsInput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetExtendableResourceErrorsInput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class GetExtendableResourceErrorsOutput:
    value: Optional[str]
    def __init__(
        self,
        *,
        value: Optional[str] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetExtendableResourceErrorsOutput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetExtendableResourceErrorsOutput":
        """Creates a GetExtendableResourceErrorsOutput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return GetExtendableResourceErrorsOutput(**kwargs)

    def __repr__(self) -> str:
        result = "GetExtendableResourceErrorsOutput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetExtendableResourceErrorsOutput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class CreateExtendableResourceInput:
    name: str
    def __init__(
        self,
        *,
        name: str,
    ):
        self.name = name

    def as_dict(self) -> Dict[str, Any]:
        """Converts the CreateExtendableResourceInput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        return {
            "name": self.name,
        }

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "CreateExtendableResourceInput":
        """Creates a CreateExtendableResourceInput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {
            "name": d["name"],
        }

        return CreateExtendableResourceInput(**kwargs)

    def __repr__(self) -> str:
        result = "CreateExtendableResourceInput("
        if self.name is not None:
            result += f"name={repr(self.name)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, CreateExtendableResourceInput):
            return False
        attributes: list[str] = ['name',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class ExtendableResourceReference:
    def as_dict(self) -> Dict[str, Any]:
        """Converts the ExtendableResourceReference to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        return {}

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "ExtendableResourceReference":
        """Creates a ExtendableResourceReference from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        return ExtendableResourceReference()

    def __repr__(self) -> str:
        result = "ExtendableResourceReference("

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        return isinstance(other, ExtendableResourceReference)

class CreateExtendableResourceOutput:
    resource: ExtendableResourceReference
    def __init__(
        self,
        *,
        resource: ExtendableResourceReference,
    ):
        self.resource = resource

    def as_dict(self) -> Dict[str, Any]:
        """Converts the CreateExtendableResourceOutput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        return {
            "resource": self.resource.as_dict(),
        }

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "CreateExtendableResourceOutput":
        """Creates a CreateExtendableResourceOutput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {
            "resource": ExtendableResourceReference.from_dict(d["resource"]),
        }

        return CreateExtendableResourceOutput(**kwargs)

    def __repr__(self) -> str:
        result = "CreateExtendableResourceOutput("
        if self.resource is not None:
            result += f"resource={repr(self.resource)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, CreateExtendableResourceOutput):
            return False
        attributes: list[str] = ['resource',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class GetExtendableResourceDataInput:
    blob_value: Optional[bytes | bytearray]
    boolean_value: Optional[bool]
    string_value: Optional[str]
    integer_value: Optional[int]
    long_value: Optional[int]
    def __init__(
        self,
        *,
        blob_value: Optional[bytes | bytearray] = None,
        boolean_value: Optional[bool] = None,
        string_value: Optional[str] = None,
        integer_value: Optional[int] = None,
        long_value: Optional[int] = None,
    ):
        self.blob_value = blob_value
        self.boolean_value = boolean_value
        self.string_value = string_value
        self.integer_value = integer_value
        self.long_value = long_value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetExtendableResourceDataInput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.blob_value is not None:
            d["blobValue"] = self.blob_value

        if self.boolean_value is not None:
            d["booleanValue"] = self.boolean_value

        if self.string_value is not None:
            d["stringValue"] = self.string_value

        if self.integer_value is not None:
            d["integerValue"] = self.integer_value

        if self.long_value is not None:
            d["longValue"] = self.long_value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetExtendableResourceDataInput":
        """Creates a GetExtendableResourceDataInput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "blobValue" in d:
            kwargs["blob_value"] = d["blobValue"]

        if "booleanValue" in d:
            kwargs["boolean_value"] = d["booleanValue"]

        if "stringValue" in d:
            kwargs["string_value"] = d["stringValue"]

        if "integerValue" in d:
            kwargs["integer_value"] = d["integerValue"]

        if "longValue" in d:
            kwargs["long_value"] = d["longValue"]

        return GetExtendableResourceDataInput(**kwargs)

    def __repr__(self) -> str:
        result = "GetExtendableResourceDataInput("
        if self.blob_value is not None:
            result += f"blob_value={repr(self.blob_value)}, "

        if self.boolean_value is not None:
            result += f"boolean_value={repr(self.boolean_value)}, "

        if self.string_value is not None:
            result += f"string_value={repr(self.string_value)}, "

        if self.integer_value is not None:
            result += f"integer_value={repr(self.integer_value)}, "

        if self.long_value is not None:
            result += f"long_value={repr(self.long_value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetExtendableResourceDataInput):
            return False
        attributes: list[str] = ['blob_value','boolean_value','string_value','integer_value','long_value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class GetExtendableResourceDataOutput:
    blob_value: Optional[bytes | bytearray]
    boolean_value: Optional[bool]
    string_value: Optional[str]
    integer_value: Optional[int]
    long_value: Optional[int]
    def __init__(
        self,
        *,
        blob_value: Optional[bytes | bytearray] = None,
        boolean_value: Optional[bool] = None,
        string_value: Optional[str] = None,
        integer_value: Optional[int] = None,
        long_value: Optional[int] = None,
    ):
        self.blob_value = blob_value
        self.boolean_value = boolean_value
        self.string_value = string_value
        self.integer_value = integer_value
        self.long_value = long_value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetExtendableResourceDataOutput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.blob_value is not None:
            d["blobValue"] = self.blob_value

        if self.boolean_value is not None:
            d["booleanValue"] = self.boolean_value

        if self.string_value is not None:
            d["stringValue"] = self.string_value

        if self.integer_value is not None:
            d["integerValue"] = self.integer_value

        if self.long_value is not None:
            d["longValue"] = self.long_value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetExtendableResourceDataOutput":
        """Creates a GetExtendableResourceDataOutput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "blobValue" in d:
            kwargs["blob_value"] = d["blobValue"]

        if "booleanValue" in d:
            kwargs["boolean_value"] = d["booleanValue"]

        if "stringValue" in d:
            kwargs["string_value"] = d["stringValue"]

        if "integerValue" in d:
            kwargs["integer_value"] = d["integerValue"]

        if "longValue" in d:
            kwargs["long_value"] = d["longValue"]

        return GetExtendableResourceDataOutput(**kwargs)

    def __repr__(self) -> str:
        result = "GetExtendableResourceDataOutput("
        if self.blob_value is not None:
            result += f"blob_value={repr(self.blob_value)}, "

        if self.boolean_value is not None:
            result += f"boolean_value={repr(self.boolean_value)}, "

        if self.string_value is not None:
            result += f"string_value={repr(self.string_value)}, "

        if self.integer_value is not None:
            result += f"integer_value={repr(self.integer_value)}, "

        if self.long_value is not None:
            result += f"long_value={repr(self.long_value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetExtendableResourceDataOutput):
            return False
        attributes: list[str] = ['blob_value','boolean_value','string_value','integer_value','long_value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class UseExtendableResourceInput:
    resource: ExtendableResourceReference
    input: GetExtendableResourceDataInput
    def __init__(
        self,
        *,
        resource: ExtendableResourceReference,
        input: GetExtendableResourceDataInput,
    ):
        self.resource = resource
        self.input = input

    def as_dict(self) -> Dict[str, Any]:
        """Converts the UseExtendableResourceInput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        return {
            "resource": self.resource.as_dict(),
            "input": self.input.as_dict(),
        }

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "UseExtendableResourceInput":
        """Creates a UseExtendableResourceInput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {
            "resource": ExtendableResourceReference.from_dict(d["resource"]),
            "input": GetExtendableResourceDataInput.from_dict(d["input"]),
        }

        return UseExtendableResourceInput(**kwargs)

    def __repr__(self) -> str:
        result = "UseExtendableResourceInput("
        if self.resource is not None:
            result += f"resource={repr(self.resource)}, "

        if self.input is not None:
            result += f"input={repr(self.input)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, UseExtendableResourceInput):
            return False
        attributes: list[str] = ['resource','input',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class UseExtendableResourceOutput:
    output: GetExtendableResourceDataOutput
    def __init__(
        self,
        *,
        output: GetExtendableResourceDataOutput,
    ):
        self.output = output

    def as_dict(self) -> Dict[str, Any]:
        """Converts the UseExtendableResourceOutput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        return {
            "output": self.output.as_dict(),
        }

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "UseExtendableResourceOutput":
        """Creates a UseExtendableResourceOutput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {
            "output": GetExtendableResourceDataOutput.from_dict(d["output"]),
        }

        return UseExtendableResourceOutput(**kwargs)

    def __repr__(self) -> str:
        result = "UseExtendableResourceOutput("
        if self.output is not None:
            result += f"output={repr(self.output)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, UseExtendableResourceOutput):
            return False
        attributes: list[str] = ['output',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class UseExtendableResourceErrorsInput:
    resource: ExtendableResourceReference
    input: GetExtendableResourceErrorsInput
    def __init__(
        self,
        *,
        resource: ExtendableResourceReference,
        input: GetExtendableResourceErrorsInput,
    ):
        self.resource = resource
        self.input = input

    def as_dict(self) -> Dict[str, Any]:
        """Converts the UseExtendableResourceErrorsInput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        return {
            "resource": self.resource.as_dict(),
            "input": self.input.as_dict(),
        }

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "UseExtendableResourceErrorsInput":
        """Creates a UseExtendableResourceErrorsInput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {
            "resource": ExtendableResourceReference.from_dict(d["resource"]),
            "input": GetExtendableResourceErrorsInput.from_dict(d["input"]),
        }

        return UseExtendableResourceErrorsInput(**kwargs)

    def __repr__(self) -> str:
        result = "UseExtendableResourceErrorsInput("
        if self.resource is not None:
            result += f"resource={repr(self.resource)}, "

        if self.input is not None:
            result += f"input={repr(self.input)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, UseExtendableResourceErrorsInput):
            return False
        attributes: list[str] = ['resource','input',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class ExtendableResource:
    _impl: Any

    def __init__(self, _impl):
        self._impl = _impl

    def GetExtendableResourceData(self, dafny_input):
        return self._impl.GetExtendableResourceData(dafny_input)

    def AlwaysModeledError(self, dafny_input):
        return self._impl.AlwaysModeledError(dafny_input)

    def AlwaysMultipleErrors(self, dafny_input):
        return self._impl.AlwaysMultipleErrors(dafny_input)

    def AlwaysOpaqueError(self, dafny_input):
        return self._impl.AlwaysOpaqueError(dafny_input)

class Unit:
    pass
