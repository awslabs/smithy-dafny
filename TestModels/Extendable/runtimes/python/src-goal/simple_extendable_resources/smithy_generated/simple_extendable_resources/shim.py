# Code generated by smithy-python-codegen DO NOT EDIT.

from .errors import CollectionOfErrors, OpaqueError, ServiceError, SimpleExtendableResourcesException
from .models import (
    CreateExtendableResourceInput,
    CreateExtendableResourceOutput,
    ExtendableResource,
    GetExtendableResourceDataInput,
    GetExtendableResourceErrorsInput,
    GetExtendableResourceErrorsOutput,
    UseExtendableResourceErrorsInput,
    UseExtendableResourceInput,
    UseExtendableResourceOutput,
)
from Wrappers_Compile import Option_None, Option_Some
from simple.extendable.resources.internaldafny.types import (
    CreateExtendableResourceInput_CreateExtendableResourceInput as DafnyCreateExtendableResourceInput,
    CreateExtendableResourceOutput_CreateExtendableResourceOutput as DafnyCreateExtendableResourceOutput,
    GetExtendableResourceDataOutput_GetExtendableResourceDataOutput as DafnyGetExtendableResourceDataOutput,
    GetExtendableResourceErrorsOutput_GetExtendableResourceErrorsOutput as DafnyGetExtendableResourceErrorsOutput,
    IExtendableResource,
    UseExtendableResourceErrorsInput_UseExtendableResourceErrorsInput as DafnyUseExtendableResourceErrorsInput,
    UseExtendableResourceInput_UseExtendableResourceInput as DafnyUseExtendableResourceInput,
    UseExtendableResourceOutput_UseExtendableResourceOutput as DafnyUseExtendableResourceOutput,
)


import Wrappers_Compile
import asyncio
import simple.extendable.resources.internaldafny.types
import simple_extendable_resources.smithy_generated.simple_extendable_resources.client as client_impl

def smithy_error_to_dafny_error(e: ServiceError):
    if isinstance(e, CollectionOfErrors):
        return simple.extendable.resources.internaldafny.types.Error_CollectionOfErrors(message=e.message, list=e.list)

    if isinstance(e, OpaqueError):
        return simple.extendable.resources.internaldafny.types.Error_Opaque(obj=e.obj)

    if isinstance(e, SimpleExtendableResourcesException):
        return simple.extendable.resources.internaldafny.types.Error_SimpleExtendableResourcesException(message=e.message)

class SimpleExtendableResourcesShim(simple.extendable.resources.internaldafny.types.ISimpleExtendableResourcesClient):
    def __init__(self, _impl: client_impl) :
        self._impl = _impl

    def CreateExtendableResource(self, input: DafnyCreateExtendableResourceInput) -> DafnyCreateExtendableResourceOutput:
        unwrapped_request: CreateExtendableResourceInput = CreateExtendableResourceInput(name=input.name,
    )
        try:
            wrapped_response = asyncio.run(self._impl.create_extendable_resource(unwrapped_request))
        except ServiceError as e:
            return Wrappers_Compile.Result_Failure(smithy_error_to_dafny_error(e))
        return Wrappers_Compile.Result_Success(DafnyCreateExtendableResourceOutput(resource=wrapped_response.resource,
    ))

    def UseExtendableResource(self, input: DafnyUseExtendableResourceInput) -> DafnyUseExtendableResourceOutput:
        unwrapped_request: UseExtendableResourceInput = UseExtendableResourceInput(resource=ExtendableResource(_impl=input.resource),
    input=GetExtendableResourceDataInput(blob_value=input.input.blobValue.UnwrapOr(None),
    boolean_value=input.input.booleanValue.UnwrapOr(None),
    string_value=input.input.stringValue.UnwrapOr(None),
    integer_value=input.input.integerValue.UnwrapOr(None),
    long_value=input.input.longValue.UnwrapOr(None),
    ),
    )
        try:
            wrapped_response = asyncio.run(self._impl.use_extendable_resource(unwrapped_request))
        except ServiceError as e:
            return Wrappers_Compile.Result_Failure(smithy_error_to_dafny_error(e))
        return Wrappers_Compile.Result_Success(DafnyUseExtendableResourceOutput(output=DafnyGetExtendableResourceDataOutput(blobValue=((Option_Some(wrapped_response.output.blob_value)) if (wrapped_response.output.blob_value is not None) else (Option_None())),
    booleanValue=((Option_Some(wrapped_response.output.boolean_value)) if (wrapped_response.output.boolean_value is not None) else (Option_None())),
    stringValue=((Option_Some(wrapped_response.output.string_value)) if (wrapped_response.output.string_value is not None) else (Option_None())),
    integerValue=((Option_Some(wrapped_response.output.integer_value)) if (wrapped_response.output.integer_value is not None) else (Option_None())),
    longValue=((Option_Some(wrapped_response.output.long_value)) if (wrapped_response.output.long_value is not None) else (Option_None())),
    ),
    ))

    def UseExtendableResourceAlwaysModeledError(self, input: DafnyUseExtendableResourceErrorsInput) -> DafnyGetExtendableResourceErrorsOutput:
        unwrapped_request: UseExtendableResourceErrorsInput = UseExtendableResourceErrorsInput(resource=ExtendableResource(_impl=input.resource),
    input=GetExtendableResourceErrorsInput(value=input.input.value.UnwrapOr(None),
    ),
    )
        try:
            wrapped_response = asyncio.run(self._impl.use_extendable_resource_always_modeled_error(unwrapped_request))
            print("wrapped_response")
            print(wrapped_response)
        except ServiceError as e:
            print("yoo")
            print(e)
            return Wrappers_Compile.Result_Failure(smithy_error_to_dafny_error(e))
        return Wrappers_Compile.Result_Success(DafnyGetExtendableResourceErrorsOutput(value=((Option_Some(wrapped_response.value)) if (wrapped_response.value is not None) else (Option_None())),
    ))

    def UseExtendableResourceAlwaysMultipleErrors(self, input: DafnyUseExtendableResourceErrorsInput) -> DafnyGetExtendableResourceErrorsOutput:
        unwrapped_request: UseExtendableResourceErrorsInput = UseExtendableResourceErrorsInput(resource=ExtendableResource(_impl=input.resource),
    input=GetExtendableResourceErrorsInput(value=input.input.value.UnwrapOr(None),
    ),
    )
        try:
            wrapped_response = asyncio.run(self._impl.use_extendable_resource_always_multiple_errors(unwrapped_request))
        except ServiceError as e:
            return Wrappers_Compile.Result_Failure(smithy_error_to_dafny_error(e))
        return Wrappers_Compile.Result_Success(DafnyGetExtendableResourceErrorsOutput(value=((Option_Some(wrapped_response.value)) if (wrapped_response.value is not None) else (Option_None())),
    ))

    def UseExtendableResourceAlwaysOpaqueError(self, input: DafnyUseExtendableResourceErrorsInput) -> DafnyGetExtendableResourceErrorsOutput:
        unwrapped_request: UseExtendableResourceErrorsInput = UseExtendableResourceErrorsInput(resource=ExtendableResource(_impl=input.resource),
    input=GetExtendableResourceErrorsInput(value=input.input.value.UnwrapOr(None),
    ),
    )
        try:
            wrapped_response = asyncio.run(self._impl.use_extendable_resource_always_opaque_error(unwrapped_request))
        except ServiceError as e:
            return Wrappers_Compile.Result_Failure(smithy_error_to_dafny_error(e))
        return Wrappers_Compile.Result_Success(DafnyGetExtendableResourceErrorsOutput(value=((Option_Some(wrapped_response.value)) if (wrapped_response.value is not None) else (Option_None())),
    ))
