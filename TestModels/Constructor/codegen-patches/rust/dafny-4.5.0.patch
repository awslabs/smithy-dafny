diff --git b/TestModels/Constructor/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs a/TestModels/Constructor/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
new file mode 100644
index 00000000..ebf74066
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
@@ -0,0 +1,1057 @@
+#![allow(warnings, unconditional_panic)]
+#![allow(nonstandard_style)]
+
+pub use dafny_standard_library::implementation_from_dafny::*;
+
+pub mod r#_simple_dconstructor_dinternaldafny_dtypes {
+    #[derive(PartialEq, Clone)]
+    pub enum DafnyCallEvent<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType> {
+        DafnyCallEvent { input: I, output: O },
+        _PhantomVariant(::std::marker::PhantomData<I>, ::std::marker::PhantomData<O>),
+    }
+
+    impl<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType> DafnyCallEvent<I, O> {
+        pub fn input(&self) -> &I {
+            match self {
+                DafnyCallEvent::DafnyCallEvent { input, output } => input,
+                DafnyCallEvent::_PhantomVariant(..) => panic!(),
+            }
+        }
+        pub fn output(&self) -> &O {
+            match self {
+                DafnyCallEvent::DafnyCallEvent { input, output } => output,
+                DafnyCallEvent::_PhantomVariant(..) => panic!(),
+            }
+        }
+    }
+
+    impl<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType> ::std::fmt::Debug
+        for DafnyCallEvent<I, O>
+    {
+        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> std::fmt::Result {
+            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
+        }
+    }
+
+    impl<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType> ::dafny_runtime::DafnyPrint
+        for DafnyCallEvent<I, O>
+    {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            match self {
+                DafnyCallEvent::DafnyCallEvent { input, output } => {
+                    write!(
+                        _formatter,
+                        "simple.constructor.internaldafny.types.DafnyCallEvent.DafnyCallEvent("
+                    )?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(input, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(output, _formatter, false)?;
+                    write!(_formatter, ")")?;
+                    Ok(())
+                }
+                DafnyCallEvent::_PhantomVariant(..) => {
+                    panic!()
+                }
+            }
+        }
+    }
+
+    impl<I: ::dafny_runtime::DafnyType + Eq, O: ::dafny_runtime::DafnyType + Eq> Eq
+        for DafnyCallEvent<I, O>
+    {
+    }
+
+    impl<
+            I: ::dafny_runtime::DafnyType + ::std::hash::Hash,
+            O: ::dafny_runtime::DafnyType + ::std::hash::Hash,
+        > ::std::hash::Hash for DafnyCallEvent<I, O>
+    {
+        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
+            match self {
+                DafnyCallEvent::DafnyCallEvent { input, output } => {
+                    ::std::hash::Hash::hash(input, _state);
+                    ::std::hash::Hash::hash(output, _state)
+                }
+                DafnyCallEvent::_PhantomVariant(..) => {
+                    panic!()
+                }
+            }
+        }
+    }
+
+    impl<
+            I: ::dafny_runtime::DafnyType + ::std::default::Default,
+            O: ::dafny_runtime::DafnyType + ::std::default::Default,
+        > ::std::default::Default for DafnyCallEvent<I, O>
+    {
+        fn default() -> DafnyCallEvent<I, O> {
+            DafnyCallEvent::DafnyCallEvent {
+                input: ::std::default::Default::default(),
+                output: ::std::default::Default::default(),
+            }
+        }
+    }
+
+    impl<I: ::dafny_runtime::DafnyType, O: ::dafny_runtime::DafnyType>
+        ::std::convert::AsRef<DafnyCallEvent<I, O>> for &DafnyCallEvent<I, O>
+    {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+
+    #[derive(PartialEq, Clone)]
+    pub enum GetConstructorInput {
+        GetConstructorInput {
+            value: ::std::rc::Rc<
+                super::r#_Wrappers_Compile::Option<
+                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+                >,
+            >,
+        },
+    }
+
+    impl GetConstructorInput {
+        pub fn value(
+            &self,
+        ) -> &::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >,
+        > {
+            match self {
+                GetConstructorInput::GetConstructorInput { value } => value,
+            }
+        }
+    }
+
+    impl ::std::fmt::Debug for GetConstructorInput {
+        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> std::fmt::Result {
+            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
+        }
+    }
+
+    impl ::dafny_runtime::DafnyPrint for GetConstructorInput {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            match self {
+                GetConstructorInput::GetConstructorInput { value } => {
+                    write!(_formatter, "simple.constructor.internaldafny.types.GetConstructorInput.GetConstructorInput(")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(value, _formatter, false)?;
+                    write!(_formatter, ")")?;
+                    Ok(())
+                }
+            }
+        }
+    }
+
+    impl Eq for GetConstructorInput {}
+
+    impl ::std::hash::Hash for GetConstructorInput {
+        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
+            match self {
+                GetConstructorInput::GetConstructorInput { value } => {
+                    ::std::hash::Hash::hash(value, _state)
+                }
+            }
+        }
+    }
+
+    impl ::std::default::Default for GetConstructorInput {
+        fn default() -> GetConstructorInput {
+            GetConstructorInput::GetConstructorInput {
+                value: ::std::default::Default::default(),
+            }
+        }
+    }
+
+    impl ::std::convert::AsRef<GetConstructorInput> for &GetConstructorInput {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+
+    #[derive(PartialEq, Clone)]
+    pub enum GetConstructorOutput {
+        GetConstructorOutput {
+            internalConfigString: ::std::rc::Rc<
+                super::r#_Wrappers_Compile::Option<
+                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+                >,
+            >,
+            blobValue:
+                ::std::rc::Rc<super::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>>,
+            booleanValue: ::std::rc::Rc<super::r#_Wrappers_Compile::Option<bool>>,
+            stringValue: ::std::rc::Rc<
+                super::r#_Wrappers_Compile::Option<
+                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+                >,
+            >,
+            integerValue: ::std::rc::Rc<super::r#_Wrappers_Compile::Option<i32>>,
+            longValue: ::std::rc::Rc<super::r#_Wrappers_Compile::Option<i64>>,
+        },
+    }
+
+    impl GetConstructorOutput {
+        pub fn internalConfigString(
+            &self,
+        ) -> &::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >,
+        > {
+            match self {
+                GetConstructorOutput::GetConstructorOutput {
+                    internalConfigString,
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => internalConfigString,
+            }
+        }
+        pub fn blobValue(
+            &self,
+        ) -> &::std::rc::Rc<super::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>>
+        {
+            match self {
+                GetConstructorOutput::GetConstructorOutput {
+                    internalConfigString,
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => blobValue,
+            }
+        }
+        pub fn booleanValue(&self) -> &::std::rc::Rc<super::r#_Wrappers_Compile::Option<bool>> {
+            match self {
+                GetConstructorOutput::GetConstructorOutput {
+                    internalConfigString,
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => booleanValue,
+            }
+        }
+        pub fn stringValue(
+            &self,
+        ) -> &::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >,
+        > {
+            match self {
+                GetConstructorOutput::GetConstructorOutput {
+                    internalConfigString,
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => stringValue,
+            }
+        }
+        pub fn integerValue(&self) -> &::std::rc::Rc<super::r#_Wrappers_Compile::Option<i32>> {
+            match self {
+                GetConstructorOutput::GetConstructorOutput {
+                    internalConfigString,
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => integerValue,
+            }
+        }
+        pub fn longValue(&self) -> &::std::rc::Rc<super::r#_Wrappers_Compile::Option<i64>> {
+            match self {
+                GetConstructorOutput::GetConstructorOutput {
+                    internalConfigString,
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => longValue,
+            }
+        }
+    }
+
+    impl ::std::fmt::Debug for GetConstructorOutput {
+        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> std::fmt::Result {
+            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
+        }
+    }
+
+    impl ::dafny_runtime::DafnyPrint for GetConstructorOutput {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            match self {
+                GetConstructorOutput::GetConstructorOutput {
+                    internalConfigString,
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => {
+                    write!(_formatter, "simple.constructor.internaldafny.types.GetConstructorOutput.GetConstructorOutput(")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(
+                        internalConfigString,
+                        _formatter,
+                        false,
+                    )?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(blobValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(booleanValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(stringValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(integerValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(longValue, _formatter, false)?;
+                    write!(_formatter, ")")?;
+                    Ok(())
+                }
+            }
+        }
+    }
+
+    impl Eq for GetConstructorOutput {}
+
+    impl ::std::hash::Hash for GetConstructorOutput {
+        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
+            match self {
+                GetConstructorOutput::GetConstructorOutput {
+                    internalConfigString,
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => {
+                    ::std::hash::Hash::hash(internalConfigString, _state);
+                    ::std::hash::Hash::hash(blobValue, _state);
+                    ::std::hash::Hash::hash(booleanValue, _state);
+                    ::std::hash::Hash::hash(stringValue, _state);
+                    ::std::hash::Hash::hash(integerValue, _state);
+                    ::std::hash::Hash::hash(longValue, _state)
+                }
+            }
+        }
+    }
+
+    impl ::std::default::Default for GetConstructorOutput {
+        fn default() -> GetConstructorOutput {
+            GetConstructorOutput::GetConstructorOutput {
+                internalConfigString: ::std::default::Default::default(),
+                blobValue: ::std::default::Default::default(),
+                booleanValue: ::std::default::Default::default(),
+                stringValue: ::std::default::Default::default(),
+                integerValue: ::std::default::Default::default(),
+                longValue: ::std::default::Default::default(),
+            }
+        }
+    }
+
+    impl ::std::convert::AsRef<GetConstructorOutput> for &GetConstructorOutput {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+
+    pub struct ISimpleConstructorClientCallHistory {}
+
+    impl ISimpleConstructorClientCallHistory {
+        pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
+            ::dafny_runtime::allocate_object::<Self>()
+        }
+    }
+
+    impl ::dafny_runtime::UpcastObject<dyn::std::any::Any>
+        for super::r#_simple_dconstructor_dinternaldafny_dtypes::ISimpleConstructorClientCallHistory
+    {
+        ::dafny_runtime::UpcastObjectFn!(dyn::std::any::Any);
+    }
+
+    pub trait ISimpleConstructorClient:
+        ::std::any::Any + ::dafny_runtime::UpcastObject<dyn::std::any::Any>
+    {
+        fn GetConstructor(
+            &mut self,
+            input: &::std::rc::Rc<
+                super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>,
+            >,
+        >;
+    }
+
+    #[derive(PartialEq, Clone)]
+    pub enum SimpleConstructorConfig {
+        SimpleConstructorConfig {
+            blobValue:
+                ::std::rc::Rc<super::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>>,
+            booleanValue: ::std::rc::Rc<super::r#_Wrappers_Compile::Option<bool>>,
+            stringValue: ::std::rc::Rc<
+                super::r#_Wrappers_Compile::Option<
+                    ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+                >,
+            >,
+            integerValue: ::std::rc::Rc<super::r#_Wrappers_Compile::Option<i32>>,
+            longValue: ::std::rc::Rc<super::r#_Wrappers_Compile::Option<i64>>,
+        },
+    }
+
+    impl SimpleConstructorConfig {
+        pub fn blobValue(
+            &self,
+        ) -> &::std::rc::Rc<super::r#_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>>
+        {
+            match self {
+                SimpleConstructorConfig::SimpleConstructorConfig {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => blobValue,
+            }
+        }
+        pub fn booleanValue(&self) -> &::std::rc::Rc<super::r#_Wrappers_Compile::Option<bool>> {
+            match self {
+                SimpleConstructorConfig::SimpleConstructorConfig {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => booleanValue,
+            }
+        }
+        pub fn stringValue(
+            &self,
+        ) -> &::std::rc::Rc<
+            super::r#_Wrappers_Compile::Option<
+                ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            >,
+        > {
+            match self {
+                SimpleConstructorConfig::SimpleConstructorConfig {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => stringValue,
+            }
+        }
+        pub fn integerValue(&self) -> &::std::rc::Rc<super::r#_Wrappers_Compile::Option<i32>> {
+            match self {
+                SimpleConstructorConfig::SimpleConstructorConfig {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => integerValue,
+            }
+        }
+        pub fn longValue(&self) -> &::std::rc::Rc<super::r#_Wrappers_Compile::Option<i64>> {
+            match self {
+                SimpleConstructorConfig::SimpleConstructorConfig {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => longValue,
+            }
+        }
+    }
+
+    impl ::std::fmt::Debug for SimpleConstructorConfig {
+        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> std::fmt::Result {
+            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
+        }
+    }
+
+    impl ::dafny_runtime::DafnyPrint for SimpleConstructorConfig {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            match self {
+                SimpleConstructorConfig::SimpleConstructorConfig {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => {
+                    write!(_formatter, "simple.constructor.internaldafny.types.SimpleConstructorConfig.SimpleConstructorConfig(")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(blobValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(booleanValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(stringValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(integerValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(longValue, _formatter, false)?;
+                    write!(_formatter, ")")?;
+                    Ok(())
+                }
+            }
+        }
+    }
+
+    impl Eq for SimpleConstructorConfig {}
+
+    impl ::std::hash::Hash for SimpleConstructorConfig {
+        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
+            match self {
+                SimpleConstructorConfig::SimpleConstructorConfig {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => {
+                    ::std::hash::Hash::hash(blobValue, _state);
+                    ::std::hash::Hash::hash(booleanValue, _state);
+                    ::std::hash::Hash::hash(stringValue, _state);
+                    ::std::hash::Hash::hash(integerValue, _state);
+                    ::std::hash::Hash::hash(longValue, _state)
+                }
+            }
+        }
+    }
+
+    impl ::std::default::Default for SimpleConstructorConfig {
+        fn default() -> SimpleConstructorConfig {
+            SimpleConstructorConfig::SimpleConstructorConfig {
+                blobValue: ::std::default::Default::default(),
+                booleanValue: ::std::default::Default::default(),
+                stringValue: ::std::default::Default::default(),
+                integerValue: ::std::default::Default::default(),
+                longValue: ::std::default::Default::default(),
+            }
+        }
+    }
+
+    impl ::std::convert::AsRef<SimpleConstructorConfig> for &SimpleConstructorConfig {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+
+    #[derive(PartialEq, Clone)]
+    pub enum Error {
+        CollectionOfErrors {
+            list: ::dafny_runtime::Sequence<
+                ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>,
+            >,
+            message: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+        },
+        Opaque {
+            obj: ::dafny_runtime::Object<dyn::std::any::Any>,
+        },
+    }
+
+    impl Error {
+        pub fn list(
+            &self,
+        ) -> &::dafny_runtime::Sequence<
+            ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>,
+        > {
+            match self {
+                Error::CollectionOfErrors { list, message } => list,
+                Error::Opaque { obj } => panic!("field does not exist on this variant"),
+            }
+        }
+        pub fn message(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
+            match self {
+                Error::CollectionOfErrors { list, message } => message,
+                Error::Opaque { obj } => panic!("field does not exist on this variant"),
+            }
+        }
+        pub fn obj(&self) -> &::dafny_runtime::Object<dyn::std::any::Any> {
+            match self {
+                Error::CollectionOfErrors { list, message } => {
+                    panic!("field does not exist on this variant")
+                }
+                Error::Opaque { obj } => obj,
+            }
+        }
+    }
+
+    impl ::std::fmt::Debug for Error {
+        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> std::fmt::Result {
+            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
+        }
+    }
+
+    impl ::dafny_runtime::DafnyPrint for Error {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            match self {
+                Error::CollectionOfErrors { list, message } => {
+                    write!(
+                        _formatter,
+                        "simple.constructor.internaldafny.types.Error.CollectionOfErrors("
+                    )?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(list, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(message, _formatter, false)?;
+                    write!(_formatter, ")")?;
+                    Ok(())
+                }
+                Error::Opaque { obj } => {
+                    write!(
+                        _formatter,
+                        "simple.constructor.internaldafny.types.Error.Opaque("
+                    )?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(obj, _formatter, false)?;
+                    write!(_formatter, ")")?;
+                    Ok(())
+                }
+            }
+        }
+    }
+
+    impl Eq for Error {}
+
+    impl ::std::hash::Hash for Error {
+        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
+            match self {
+                Error::CollectionOfErrors { list, message } => {
+                    ::std::hash::Hash::hash(list, _state);
+                    ::std::hash::Hash::hash(message, _state)
+                }
+                Error::Opaque { obj } => ::std::hash::Hash::hash(obj, _state),
+            }
+        }
+    }
+
+    impl ::std::default::Default for Error {
+        fn default() -> Error {
+            Error::CollectionOfErrors {
+                list: ::std::default::Default::default(),
+                message: ::std::default::Default::default(),
+            }
+        }
+    }
+
+    impl ::std::convert::AsRef<Error> for &Error {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+
+    pub type OpaqueError =
+        ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>;
+}
+pub mod r#_SimpleConstructorImpl_Compile {
+    pub struct _default {}
+
+    impl _default {
+        pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
+            ::dafny_runtime::allocate_object::<Self>()
+        }
+        pub fn GetConstructor(
+            config: &::std::rc::Rc<super::r#_SimpleConstructorImpl_Compile::Config>,
+            input: &::std::rc::Rc<
+                super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            let mut output = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput>, ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>>>>::new();
+            let mut res: ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput> = ::std::rc::Rc::new(super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput::GetConstructorOutput {
+            internalConfigString: input.value().clone(),
+            blobValue: ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<::dafny_runtime::Sequence<u8>>::Some {
+                  value: config.blobValue().clone()
+                }),
+            booleanValue: ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<bool>::Some {
+                  value: config.booleanValue().clone()
+                }),
+            stringValue: ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Some {
+                  value: config.stringValue().clone()
+                }),
+            integerValue: ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<i32>::Some {
+                  value: config.integerValue().clone()
+                }),
+            longValue: ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<i64>::Some {
+                  value: config.longValue().clone()
+                })
+          });
+            output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
+                super::r#_Wrappers_Compile::Result::<
+                    ::std::rc::Rc<
+                        super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput,
+                    >,
+                    ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>,
+                >::Success {
+                    value: res.clone(),
+                },
+            ));
+            return output.read();
+        }
+    }
+
+    impl ::dafny_runtime::UpcastObject<dyn::std::any::Any>
+        for super::r#_SimpleConstructorImpl_Compile::_default
+    {
+        ::dafny_runtime::UpcastObjectFn!(dyn::std::any::Any);
+    }
+
+    #[derive(PartialEq, Clone)]
+    pub enum Config {
+        Config {
+            blobValue: ::dafny_runtime::Sequence<u8>,
+            booleanValue: bool,
+            stringValue: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+            integerValue: i32,
+            longValue: i64,
+        },
+    }
+
+    impl Config {
+        pub fn blobValue(&self) -> &::dafny_runtime::Sequence<u8> {
+            match self {
+                Config::Config {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => blobValue,
+            }
+        }
+        pub fn booleanValue(&self) -> &bool {
+            match self {
+                Config::Config {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => booleanValue,
+            }
+        }
+        pub fn stringValue(&self) -> &::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
+            match self {
+                Config::Config {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => stringValue,
+            }
+        }
+        pub fn integerValue(&self) -> &i32 {
+            match self {
+                Config::Config {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => integerValue,
+            }
+        }
+        pub fn longValue(&self) -> &i64 {
+            match self {
+                Config::Config {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => longValue,
+            }
+        }
+    }
+
+    impl ::std::fmt::Debug for Config {
+        fn fmt(&self, f: &mut ::std::fmt::Formatter) -> std::fmt::Result {
+            ::dafny_runtime::DafnyPrint::fmt_print(self, f, true)
+        }
+    }
+
+    impl ::dafny_runtime::DafnyPrint for Config {
+        fn fmt_print(
+            &self,
+            _formatter: &mut ::std::fmt::Formatter,
+            _in_seq: bool,
+        ) -> std::fmt::Result {
+            match self {
+                Config::Config {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => {
+                    write!(_formatter, "SimpleConstructorImpl_Compile.Config.Config(")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(blobValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(booleanValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(stringValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(integerValue, _formatter, false)?;
+                    write!(_formatter, ", ")?;
+                    ::dafny_runtime::DafnyPrint::fmt_print(longValue, _formatter, false)?;
+                    write!(_formatter, ")")?;
+                    Ok(())
+                }
+            }
+        }
+    }
+
+    impl Eq for Config {}
+
+    impl ::std::hash::Hash for Config {
+        fn hash<_H: ::std::hash::Hasher>(&self, _state: &mut _H) {
+            match self {
+                Config::Config {
+                    blobValue,
+                    booleanValue,
+                    stringValue,
+                    integerValue,
+                    longValue,
+                } => {
+                    ::std::hash::Hash::hash(blobValue, _state);
+                    ::std::hash::Hash::hash(booleanValue, _state);
+                    ::std::hash::Hash::hash(stringValue, _state);
+                    ::std::hash::Hash::hash(integerValue, _state);
+                    ::std::hash::Hash::hash(longValue, _state)
+                }
+            }
+        }
+    }
+
+    impl ::std::default::Default for Config {
+        fn default() -> Config {
+            Config::Config {
+                blobValue: ::std::default::Default::default(),
+                booleanValue: ::std::default::Default::default(),
+                stringValue: ::std::default::Default::default(),
+                integerValue: ::std::default::Default::default(),
+                longValue: ::std::default::Default::default(),
+            }
+        }
+    }
+
+    impl ::std::convert::AsRef<Config> for &Config {
+        fn as_ref(&self) -> Self {
+            self
+        }
+    }
+}
+pub mod r#_simple_dconstructor_dinternaldafny {
+    pub struct _default {}
+
+    impl _default {
+        pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
+            ::dafny_runtime::allocate_object::<Self>()
+        }
+        pub fn DefaultSimpleConstructorConfig() -> ::std::rc::Rc<
+            super::r#_simple_dconstructor_dinternaldafny_dtypes::SimpleConstructorConfig,
+        > {
+            ::std::rc::Rc::new(super::r#_simple_dconstructor_dinternaldafny_dtypes::SimpleConstructorConfig::SimpleConstructorConfig {
+          blobValue: ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<::dafny_runtime::Sequence<u8>>::Some {
+                value: ::dafny_runtime::seq![0]
+              }),
+          booleanValue: ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<bool>::Some {
+                value: false
+              }),
+          stringValue: ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>::Some {
+                value: ::dafny_runtime::string_utf16_of("")
+              }),
+          integerValue: ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<i32>::Some {
+                value: 0
+              }),
+          longValue: ::std::rc::Rc::new(super::r#_Wrappers_Compile::Option::<i64>::Some {
+                value: 0
+              })
+        })
+        }
+        pub fn SimpleConstructor(
+            config: &::std::rc::Rc<
+                super::r#_simple_dconstructor_dinternaldafny_dtypes::SimpleConstructorConfig,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::dafny_runtime::Object<
+                    super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient,
+                >,
+                ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            let mut res = ::dafny_runtime::MaybePlacebo::<
+                ::std::rc::Rc<
+                    super::r#_Wrappers_Compile::Result<
+                        ::dafny_runtime::Object<
+                            super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient,
+                        >,
+                        ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>,
+                    >,
+                >,
+            >::new();
+            let mut configToAssign: ::std::rc::Rc<super::r#_SimpleConstructorImpl_Compile::Config> =
+                ::std::rc::Rc::new(super::r#_SimpleConstructorImpl_Compile::Config::Config {
+                    blobValue: config.blobValue().UnwrapOr(&::dafny_runtime::seq![0]),
+                    booleanValue: config.booleanValue().UnwrapOr(&true),
+                    stringValue: config
+                        .stringValue()
+                        .UnwrapOr(&::dafny_runtime::string_utf16_of("")),
+                    integerValue: config.integerValue().UnwrapOr(&0),
+                    longValue: config.longValue().UnwrapOr(&0),
+                });
+            let mut client = ::dafny_runtime::MaybePlacebo::<
+                ::dafny_runtime::Object<
+                    super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient,
+                >,
+            >::new();
+            let mut _nw0: ::dafny_runtime::Object<super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient> = super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient::_allocate_object();
+            super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient::_ctor(
+                &_nw0,
+                &configToAssign,
+            );
+            client = ::dafny_runtime::MaybePlacebo::from(_nw0.clone());
+            res = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
+                super::r#_Wrappers_Compile::Result::<
+                    ::dafny_runtime::Object<
+                        super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient,
+                    >,
+                    ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>,
+                >::Success {
+                    value: client.read(),
+                },
+            ));
+            return res.read();
+        }
+        pub fn CreateSuccessOfClient(client: &::dafny_runtime::Object<dyn super::r#_simple_dconstructor_dinternaldafny_dtypes::ISimpleConstructorClient>) -> ::std::rc::Rc<super::r#_Wrappers_Compile::Result<::dafny_runtime::Object<dyn super::r#_simple_dconstructor_dinternaldafny_dtypes::ISimpleConstructorClient>, ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>>>{
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Result::<::dafny_runtime::Object<dyn super::r#_simple_dconstructor_dinternaldafny_dtypes::ISimpleConstructorClient>, ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>>::Success {
+          value: client.clone()
+        })
+        }
+        pub fn CreateFailureOfError(error: &::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>) -> ::std::rc::Rc<super::r#_Wrappers_Compile::Result<::dafny_runtime::Object<dyn super::r#_simple_dconstructor_dinternaldafny_dtypes::ISimpleConstructorClient>, ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>>>{
+            ::std::rc::Rc::new(super::r#_Wrappers_Compile::Result::<::dafny_runtime::Object<dyn super::r#_simple_dconstructor_dinternaldafny_dtypes::ISimpleConstructorClient>, ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>>::Failure {
+          error: error.clone()
+        })
+        }
+    }
+
+    impl ::dafny_runtime::UpcastObject<dyn::std::any::Any>
+        for super::r#_simple_dconstructor_dinternaldafny::_default
+    {
+        ::dafny_runtime::UpcastObjectFn!(dyn::std::any::Any);
+    }
+
+    pub struct SimpleConstructorClient {
+        pub r#__i_config: ::std::rc::Rc<super::r#_SimpleConstructorImpl_Compile::Config>,
+    }
+
+    impl SimpleConstructorClient {
+        pub fn _allocate_object() -> ::dafny_runtime::Object<Self> {
+            ::dafny_runtime::allocate_object::<Self>()
+        }
+        pub fn _ctor(
+            this: &::dafny_runtime::Object<
+                super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient,
+            >,
+            config: &::std::rc::Rc<super::r#_SimpleConstructorImpl_Compile::Config>,
+        ) -> () {
+            let mut _set__i_config: bool = false;
+            ::dafny_runtime::update_field_uninit_object!(
+                this.clone(),
+                r#__i_config,
+                _set__i_config,
+                config.clone()
+            );
+            return ();
+        }
+        pub fn config(&self) -> ::std::rc::Rc<super::r#_SimpleConstructorImpl_Compile::Config> {
+            self.r#__i_config.clone()
+        }
+    }
+
+    impl ::dafny_runtime::UpcastObject<dyn::std::any::Any>
+        for super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient
+    {
+        ::dafny_runtime::UpcastObjectFn!(dyn::std::any::Any);
+    }
+
+    impl super::r#_simple_dconstructor_dinternaldafny_dtypes::ISimpleConstructorClient
+        for super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient
+    {
+        fn GetConstructor(
+            &mut self,
+            input: &::std::rc::Rc<
+                super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorInput,
+            >,
+        ) -> ::std::rc::Rc<
+            super::r#_Wrappers_Compile::Result<
+                ::std::rc::Rc<
+                    super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput,
+                >,
+                ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>,
+            >,
+        > {
+            let mut output = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput>, ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>>>>::new();
+            let mut _out0 = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput>, ::std::rc::Rc<super::r#_simple_dconstructor_dinternaldafny_dtypes::Error>>>>::new();
+            _out0 = ::dafny_runtime::MaybePlacebo::from(
+                super::r#_SimpleConstructorImpl_Compile::_default::GetConstructor(
+                    &self.config().clone(),
+                    input,
+                ),
+            );
+            output = ::dafny_runtime::MaybePlacebo::from(_out0.read());
+            return output.read();
+        }
+    }
+
+    impl
+        ::dafny_runtime::UpcastObject<
+            dyn super::r#_simple_dconstructor_dinternaldafny_dtypes::ISimpleConstructorClient,
+        > for super::r#_simple_dconstructor_dinternaldafny::SimpleConstructorClient
+    {
+        ::dafny_runtime::UpcastObjectFn!(dyn super::r#_simple_dconstructor_dinternaldafny_dtypes::ISimpleConstructorClient);
+    }
+}
+pub mod _module {}
diff --git b/TestModels/Constructor/runtimes/rust/src/client.rs a/TestModels/Constructor/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..9eeb9da7
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/client.rs
@@ -0,0 +1,36 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::ISimpleConstructorClient>,
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(conf: crate::Config) -> Result<Self, BuildError> {
+        let inner =
+            ::constructor_dafny::r#_simple_dconstructor_dinternaldafny::_default::SimpleConstructor(
+                &crate::conversions::simple_constructor_config::_simple_constructor_config::to_dafny(conf),
+            );
+        if matches!(
+            inner.as_ref(),
+            ::constructor_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+
+        Ok(Self {
+            dafny_client: ::dafny_runtime::upcast_object()(inner.Extract()),
+        })
+    }
+}
+
+mod get_constructor;
diff --git b/TestModels/Constructor/runtimes/rust/src/client/get_constructor.rs a/TestModels/Constructor/runtimes/rust/src/client/get_constructor.rs
new file mode 100644
index 00000000..c1ec2593
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/client/get_constructor.rs
@@ -0,0 +1,19 @@
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetConstructor`](crate::operation::get_constructor::builders::GetConstructorFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<String>)`](crate::operation::get_constructor::builders::GetConstructorFluentBuilder::value) / [`set_value(Option<String>)`](crate::operation::get_constructor::builders::GetConstructorFluentBuilder::set_value):<br>required: **false**<br>(undocumented)<br>
+    /// - On success, responds with [`GetConstructorOutput`](crate::operation::get_constructor::GetConstructorOutput) with field(s):
+    ///   - [`internal_config_string(Option<String>)`](crate::operation::get_constructor::GetConstructorOutput::internal_config_string): (undocumented)
+    ///   - [`blob_value(Option<Blob>)`](crate::operation::get_constructor::GetConstructorOutput::blob_value): (undocumented)
+    ///   - [`boolean_value(Option<bool>)`](crate::operation::get_constructor::GetConstructorOutput::boolean_value): (undocumented)
+    ///   - [`string_value(Option<String>)`](crate::operation::get_constructor::GetConstructorOutput::string_value): (undocumented)
+    ///   - [`integer_value(Option<i32>)`](crate::operation::get_constructor::GetConstructorOutput::integer_value): (undocumented)
+    ///   - [`long_value(Option<i64>)`](crate::operation::get_constructor::GetConstructorOutput::long_value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetConstructorError>`](crate::operation::get_constructor::GetConstructorError)
+    pub fn get_constructor(
+        &self,
+    ) -> crate::operation::get_constructor::builders::GetConstructorFluentBuilder {
+        crate::operation::get_constructor::builders::GetConstructorFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/config.rs a/TestModels/Constructor/runtimes/rust/src/config.rs
new file mode 100644
index 00000000..4e944c46
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/config.rs
@@ -0,0 +1,119 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Configuration for a simple service client.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Config {
+    pub(crate) blob_value: Option<Vec<u8>>,
+    pub(crate) boolean_value: Option<bool>,
+    pub(crate) string_value: Option<String>,
+    pub(crate) integer_value: Option<i32>,
+    pub(crate) long_value: Option<i64>,
+}
+
+impl Config {
+    /// Constructs a config builder.
+    pub fn builder() -> Builder {
+        Builder::default()
+    }
+    /// Converts this config back into a builder so that it can be tweaked.
+    pub fn to_builder(&self) -> Builder {
+        Builder {
+            blob_value: self.blob_value.clone(),
+            boolean_value: self.boolean_value,
+            string_value: self.string_value.clone(),
+            integer_value: self.integer_value,
+            long_value: self.long_value,
+        }
+    }
+}
+/// Builder for creating a `Config`.
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Builder {
+    pub(crate) blob_value: Option<Vec<u8>>,
+    pub(crate) boolean_value: Option<bool>,
+    pub(crate) string_value: Option<String>,
+    pub(crate) integer_value: Option<i32>,
+    pub(crate) long_value: Option<i64>,
+}
+impl ::std::default::Default for Builder {
+    fn default() -> Self {
+        Self {
+            blob_value: Some(vec![0]),
+            boolean_value: Some(false),
+            string_value: Some("".to_string()),
+            integer_value: Some(0),
+            long_value: Some(0),
+        }
+    }
+}
+impl Builder {
+    /// Constructs a config builder.
+    pub fn new() -> Self {
+        Self::default()
+    }
+
+    pub fn blob_value(mut self, blob_value: Vec<u8>) -> Self {
+        self.set_blob_value(Some(blob_value));
+        self
+    }
+
+    pub fn set_blob_value(&mut self, blob_value: Option<Vec<u8>>) -> &mut Self {
+        self.blob_value = blob_value;
+        self
+    }
+
+    pub fn boolean_value(mut self, boolean_value: bool) -> Self {
+        self.set_boolean_value(Some(boolean_value));
+        self
+    }
+
+    pub fn set_boolean_value(&mut self, boolean_value: Option<bool>) -> &mut Self {
+        self.boolean_value = boolean_value;
+        self
+    }
+
+    pub fn string_value(mut self, string_value: String) -> Self {
+        self.set_string_value(Some(string_value));
+        self
+    }
+
+    pub fn set_string_value(&mut self, string_value: Option<String>) -> &mut Self {
+        self.string_value = string_value;
+        self
+    }
+
+    pub fn integer_value(mut self, integer_value: i32) -> Self {
+        self.set_integer_value(Some(integer_value));
+        self
+    }
+
+    pub fn set_integer_value(&mut self, integer_value: Option<i32>) -> &mut Self {
+        self.integer_value = integer_value;
+        self
+    }
+
+    pub fn long_value(mut self, long_value: i64) -> Self {
+        self.set_long_value(Some(long_value));
+        self
+    }
+
+    pub fn set_long_value(&mut self, long_value: Option<i64>) -> &mut Self {
+        self.long_value = long_value;
+        self
+    }
+
+    /// Builds a [`Config`].
+    #[allow(unused_mut)]
+    pub fn build(mut self) -> Config {
+        Config {
+            blob_value: self.blob_value,
+            boolean_value: self.boolean_value,
+            string_value: self.string_value,
+            integer_value: self.integer_value,
+            long_value: self.long_value,
+        }
+    }
+}
+
+pub use ::aws_smithy_runtime_api::client::behavior_version::BehaviorVersion;
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions.rs a/TestModels/Constructor/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..d6c2383c
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_constructor;
+pub mod simple_constructor_config;
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor.rs a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor.rs
new file mode 100644
index 00000000..3c68bb0f
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor.rs
@@ -0,0 +1,46 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_constructor::GetConstructorError,
+) -> ::std::rc::Rc<::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::Error> {
+    match value {
+        crate::operation::get_constructor::GetConstructorError::Unhandled(unhandled) => {
+            ::std::rc::Rc::new(
+                ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::Error::Opaque {
+                    obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)),
+                },
+            )
+        }
+    }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_constructor::GetConstructorError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(
+        &dafny_value.as_ref(),
+        ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }
+    ) {
+        let error_message = "TODO: can't get message yet";
+        crate::operation::get_constructor::GetConstructorError::generic(
+            ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                .message(error_message)
+                .build(),
+        )
+    } else {
+        crate::operation::get_constructor::GetConstructorError::generic(
+            ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                .message("Opaque error")
+                .build(),
+        )
+    }
+}
+
+pub mod _get_constructor_input;
+
+pub mod _get_constructor_output;
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_input.rs a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_input.rs
new file mode 100644
index 00000000..142b8675
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_input.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_constructor::GetConstructorInput,
+) -> ::std::rc::Rc<
+    ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::GetConstructorInput,
+> {
+    let dafny_value = match value.value {
+            Some(s) => ::constructor_dafny::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+            None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+        };
+    ::std::rc::Rc::new(::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::GetConstructorInput::GetConstructorInput {
+            value: ::std::rc::Rc::new(dafny_value)
+        })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::GetConstructorInput,
+    >,
+) -> crate::operation::get_constructor::GetConstructorInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_constructor::GetConstructorInput { value }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_output.rs a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_output.rs
new file mode 100644
index 00000000..fe072ac7
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_output.rs
@@ -0,0 +1,170 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_constructor::GetConstructorOutput,
+) -> ::std::rc::Rc<
+    ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput,
+> {
+    let crate::operation::get_constructor::GetConstructorOutput {
+        internal_config_string,
+        blob_value,
+        boolean_value,
+        string_value,
+        integer_value,
+        long_value,
+    } = value;
+
+    let internal_config_string = match internal_config_string {
+        Some(s) => ::constructor_dafny::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    let blob_value = match blob_value {
+        Some(v) => ::constructor_dafny::_Wrappers_Compile::Option::Some {
+            value: ::dafny_runtime::Sequence::from_array(&v),
+        },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    let boolean_value = match boolean_value {
+        Some(value) => ::constructor_dafny::_Wrappers_Compile::Option::Some { value },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    let string_value = match string_value {
+        Some(s) => ::constructor_dafny::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    let integer_value = match integer_value {
+        Some(value) => ::constructor_dafny::_Wrappers_Compile::Option::Some { value },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    let long_value = match long_value {
+        Some(value) => ::constructor_dafny::_Wrappers_Compile::Option::Some { value },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput::GetConstructorOutput {
+        internalConfigString: ::std::rc::Rc::new(internal_config_string),
+        blobValue: ::std::rc::Rc::new(blob_value),
+        booleanValue: ::std::rc::Rc::new(boolean_value),
+        stringValue: ::std::rc::Rc::new(string_value),
+        integerValue: ::std::rc::Rc::new(integer_value),
+        longValue: ::std::rc::Rc::new(long_value),
+    })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::GetConstructorOutput,
+    >,
+) -> crate::operation::get_constructor::GetConstructorOutput {
+    let internal_config_string = if matches!(
+        dafny_value.internalConfigString().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.internalConfigString().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.internalConfigString().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    let blob_value = if matches!(
+        dafny_value.blobValue().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(
+                &dafny_value.blobValue().Extract(),
+                |e| *e,
+            ),
+        )
+    } else if matches!(
+        dafny_value.blobValue().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    let boolean_value = if matches!(
+        dafny_value.booleanValue().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.booleanValue().Extract())
+    } else if matches!(
+        dafny_value.booleanValue().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    let string_value = if matches!(
+        dafny_value.stringValue().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.stringValue().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.stringValue().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    let integer_value = if matches!(
+        dafny_value.integerValue().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.integerValue().Extract())
+    } else if matches!(
+        dafny_value.integerValue().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    let long_value = if matches!(
+        dafny_value.longValue().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.longValue().Extract())
+    } else if matches!(
+        dafny_value.longValue().as_ref(),
+        ::constructor_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    crate::operation::get_constructor::GetConstructorOutput {
+        internal_config_string,
+        blob_value,
+        boolean_value,
+        string_value,
+        integer_value,
+        long_value,
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config.rs a/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config.rs
new file mode 100644
index 00000000..e75ae86f
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_constructor_config;
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config/_simple_constructor_config.rs a/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config/_simple_constructor_config.rs
new file mode 100644
index 00000000..300cc4a9
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config/_simple_constructor_config.rs
@@ -0,0 +1,149 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    config: crate::config::Config,
+) -> ::std::rc::Rc<
+    ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::SimpleConstructorConfig,
+> {
+    ::std::rc::Rc::new(
+        ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::SimpleConstructorConfig::SimpleConstructorConfig { blobValue: blob_to_dafny(config.blob_value), booleanValue: boolean_to_dafny(config.boolean_value), stringValue: string_to_dafny(config.string_value), integerValue: integer_to_dafny(config.integer_value), longValue: long_to_dafny(config.long_value) })
+}
+
+fn blob_to_dafny(
+    value: ::std::option::Option<::std::vec::Vec<u8>>,
+) -> ::std::rc::Rc<::constructor_dafny::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>> {
+    let v = match value {
+        Some(v) => ::constructor_dafny::_Wrappers_Compile::Option::Some {
+            value: ::dafny_runtime::Sequence::from_array(&v),
+        },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(v)
+}
+
+fn boolean_to_dafny(
+    value: ::std::option::Option<bool>,
+) -> ::std::rc::Rc<::constructor_dafny::_Wrappers_Compile::Option<bool>> {
+    let v = match value {
+        Some(v) => ::constructor_dafny::_Wrappers_Compile::Option::Some { value: v },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(v)
+}
+
+fn string_to_dafny(
+    value: ::std::option::Option<::std::string::String>,
+) -> ::std::rc::Rc<
+    ::constructor_dafny::_Wrappers_Compile::Option<
+        ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+    >,
+> {
+    let v = match value {
+        Some(v) => ::constructor_dafny::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&v) },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(v)
+}
+
+fn integer_to_dafny(
+    value: ::std::option::Option<i32>,
+) -> ::std::rc::Rc<::constructor_dafny::_Wrappers_Compile::Option<i32>> {
+    let v = match value {
+        Some(v) => ::constructor_dafny::_Wrappers_Compile::Option::Some { value: v },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(v)
+}
+
+fn long_to_dafny(
+    value: ::std::option::Option<i64>,
+) -> ::std::rc::Rc<::constructor_dafny::_Wrappers_Compile::Option<i64>> {
+    let v = match value {
+        Some(v) => ::constructor_dafny::_Wrappers_Compile::Option::Some { value: v },
+        None => ::constructor_dafny::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(v)
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    config: ::std::rc::Rc<
+        ::constructor_dafny::_simple_dconstructor_dinternaldafny_dtypes::SimpleConstructorConfig,
+    >,
+) -> crate::config::Config {
+    crate::config::Config {
+        blob_value: blob_from_dafny(config.blobValue().clone()),
+        boolean_value: boolean_from_dafny(config.booleanValue().clone()),
+        string_value: string_from_dafny(config.stringValue().clone()),
+        integer_value: integer_from_dafny(config.integerValue().clone()),
+        long_value: long_from_dafny(config.longValue().clone()),
+    }
+}
+
+fn blob_from_dafny(
+    value: ::std::rc::Rc<
+        ::constructor_dafny::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>,
+    >,
+) -> ::std::option::Option<::std::vec::Vec<u8>> {
+    match value.as_ref() {
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { value } => {
+            Some(::std::rc::Rc::try_unwrap(value.to_array()).unwrap_or_else(|rc| (*rc).clone()))
+        }
+        ::constructor_dafny::_Wrappers_Compile::Option::None {} => None,
+        constructor_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    }
+}
+
+fn boolean_from_dafny(
+    value: ::std::rc::Rc<::constructor_dafny::_Wrappers_Compile::Option<bool>>,
+) -> ::std::option::Option<bool> {
+    match value.as_ref() {
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { value } => Some(*value),
+        ::constructor_dafny::_Wrappers_Compile::Option::None {} => None,
+        constructor_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    }
+}
+
+fn string_from_dafny(
+    value: ::std::rc::Rc<
+        ::constructor_dafny::_Wrappers_Compile::Option<
+            ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+        >,
+    >,
+) -> ::std::option::Option<::std::string::String> {
+    match value.as_ref() {
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { value } => Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                value,
+            ),
+        ),
+        ::constructor_dafny::_Wrappers_Compile::Option::None {} => None,
+        constructor_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    }
+}
+
+fn integer_from_dafny(
+    value: ::std::rc::Rc<::constructor_dafny::_Wrappers_Compile::Option<i32>>,
+) -> ::std::option::Option<i32> {
+    match value.as_ref() {
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { value } => Some(*value),
+        ::constructor_dafny::_Wrappers_Compile::Option::None {} => None,
+        constructor_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    }
+}
+
+fn long_from_dafny(
+    value: ::std::rc::Rc<::constructor_dafny::_Wrappers_Compile::Option<i64>>,
+) -> ::std::option::Option<i64> {
+    match value.as_ref() {
+        ::constructor_dafny::_Wrappers_Compile::Option::Some { value } => Some(*value),
+        ::constructor_dafny::_Wrappers_Compile::Option::None {} => None,
+        constructor_dafny::_Wrappers_Compile::Option::_PhantomVariant(_) => unreachable!(),
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/error.rs a/TestModels/Constructor/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/Constructor/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/Constructor/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..cce22d1c
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+
+impl ::dafny_runtime::UpcastObject<dyn ::std::any::Any> for Unhandled {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/lib.rs a/TestModels/Constructor/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..5dcdea3a
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/lib.rs
@@ -0,0 +1,21 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[doc(inline)]
+pub use config::Config;
+
+pub mod client;
+
+/// Configuration for Constructor Service.
+pub mod config;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
diff --git b/TestModels/Constructor/runtimes/rust/src/operation.rs a/TestModels/Constructor/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..8de453d5
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/operation.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetConstructor` operation.
+pub mod get_constructor;
diff --git b/TestModels/Constructor/runtimes/rust/src/operation/get_constructor.rs a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor.rs
new file mode 100644
index 00000000..b8966674
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor.rs
@@ -0,0 +1,146 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetConstructor`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetConstructor;
+impl GetConstructor {
+    /// Creates a new `GetConstructor`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_constructor::GetConstructorInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_constructor::GetConstructorOutput,
+        crate::operation::get_constructor::GetConstructorError,
+    > {
+        let inner_input =
+            crate::conversions::get_constructor::_get_constructor_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetConstructor(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::constructor_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_constructor::_get_constructor_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_constructor::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetConstructor` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetConstructorError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetConstructorError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetConstructorError {
+    /// Creates the `GetConstructorError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetConstructorError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetConstructorError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetConstructorError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetConstructorError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetConstructorError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetConstructorError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_constructor::_get_constructor_output::GetConstructorOutput;
+
+pub use crate::operation::get_constructor::_get_constructor_input::GetConstructorInput;
+
+mod _get_constructor_input;
+
+mod _get_constructor_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_input.rs a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_input.rs
new file mode 100644
index 00000000..227b5efb
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetConstructorInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetConstructorInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetConstructorInput {
+    /// Creates a new builder-style object to manufacture [`GetConstructorInput`](crate::operation::get_constructor::GetConstructorInput).
+    pub fn builder() -> crate::operation::get_constructor::builders::GetConstructorInputBuilder {
+        crate::operation::get_constructor::builders::GetConstructorInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetConstructorInput`](crate::operation::get_constructor::GetConstructorInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetConstructorInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetConstructorInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetConstructorInput`](crate::operation::get_constructor::GetConstructorInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_constructor::GetConstructorInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_constructor::GetConstructorInput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_output.rs a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_output.rs
new file mode 100644
index 00000000..cb866fb8
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_output.rs
@@ -0,0 +1,171 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetConstructorOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub internal_config_string: ::std::option::Option<::std::string::String>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub blob_value: ::std::option::Option<::std::vec::Vec<u8>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub boolean_value: ::std::option::Option<bool>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub string_value: ::std::option::Option<::std::string::String>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub integer_value: ::std::option::Option<i32>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub long_value: ::std::option::Option<i64>,
+}
+
+impl GetConstructorOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn internal_config_string(&self) -> ::std::option::Option<&str> {
+        self.internal_config_string.as_deref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(&self) -> ::std::option::Option<&[u8]> {
+        self.blob_value.as_deref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(&self) -> ::std::option::Option<bool> {
+        self.boolean_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(&self) -> ::std::option::Option<&str> {
+        self.string_value.as_deref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(&self) -> ::std::option::Option<i32> {
+        self.integer_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(&self) -> ::std::option::Option<i64> {
+        self.long_value
+    }
+}
+
+impl GetConstructorOutput {
+    /// Creates a new builder-style object to manufacture [`GetConstructorOutput`](crate::operation::get_constructor::GetConstructorOutput).
+    pub fn builder() -> crate::operation::get_constructor::builders::GetConstructorOutputBuilder {
+        crate::operation::get_constructor::builders::GetConstructorOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetConstructorOutput`](crate::operation::get_constructor::GetConstructorOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetConstructorOutputBuilder {
+    pub(crate) internal_config_string: ::std::option::Option<::std::string::String>,
+    pub(crate) blob_value: ::std::option::Option<::std::vec::Vec<u8>>,
+    pub(crate) boolean_value: ::std::option::Option<bool>,
+    pub(crate) string_value: ::std::option::Option<::std::string::String>,
+    pub(crate) integer_value: ::std::option::Option<i32>,
+    pub(crate) long_value: ::std::option::Option<i64>,
+}
+
+impl GetConstructorOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn internal_config_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.internal_config_string = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_internal_config_string(
+        mut self,
+        input: ::std::option::Option<::std::string::String>,
+    ) -> Self {
+        self.internal_config_string = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_internal_config_string(&self) -> &::std::option::Option<::std::string::String> {
+        &self.internal_config_string
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(mut self, input: ::std::vec::Vec<u8>) -> Self {
+        self.blob_value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_blob_value(mut self, input: ::std::option::Option<::std::vec::Vec<u8>>) -> Self {
+        self.blob_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_blob_value(&self) -> &::std::option::Option<::std::vec::Vec<u8>> {
+        &self.blob_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(mut self, input: bool) -> Self {
+        self.boolean_value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_boolean_value(mut self, input: ::std::option::Option<bool>) -> Self {
+        self.boolean_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_boolean_value(&self) -> &::std::option::Option<bool> {
+        &self.boolean_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.string_value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_string_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.string_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_string_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.string_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(mut self, input: i32) -> Self {
+        self.integer_value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_integer_value(mut self, input: ::std::option::Option<i32>) -> Self {
+        self.integer_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_integer_value(&self) -> &::std::option::Option<i32> {
+        &self.integer_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(mut self, input: i64) -> Self {
+        self.long_value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_long_value(mut self, input: ::std::option::Option<i64>) -> Self {
+        self.long_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_long_value(&self) -> &::std::option::Option<i64> {
+        &self.long_value
+    }
+
+    /// Consumes the builder and constructs a [`GetConstructorOutput`](crate::operation::get_constructor::GetConstructorOutput).
+    pub fn build(self) -> crate::operation::get_constructor::GetConstructorOutput {
+        crate::operation::get_constructor::GetConstructorOutput {
+            internal_config_string: self.internal_config_string,
+            blob_value: self.blob_value,
+            boolean_value: self.boolean_value,
+            string_value: self.string_value,
+            integer_value: self.integer_value,
+            long_value: self.long_value,
+        }
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/builders.rs a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/builders.rs
new file mode 100644
index 00000000..52045c7e
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/builders.rs
@@ -0,0 +1,91 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_constructor::_get_constructor_output::GetConstructorOutputBuilder;
+
+pub use crate::operation::get_constructor::_get_constructor_input::GetConstructorInputBuilder;
+
+impl GetConstructorInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_constructor::GetConstructorOutput,
+        crate::operation::get_constructor::GetConstructorError,
+    > {
+        let mut fluent_builder = client.get_constructor();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetConstructor`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetConstructorFluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::get_constructor::builders::GetConstructorInputBuilder,
+    config_override: ::std::option::Option<crate::config::Builder>,
+}
+impl GetConstructorFluentBuilder {
+    /// Creates a new `GetConstructorFluentBuilder`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+            config_override: ::std::option::Option::None,
+        }
+    }
+    /// Access the GetConstructor as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_constructor::builders::GetConstructorInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_constructor::GetConstructorOutput,
+        crate::operation::get_constructor::GetConstructorError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetConstructor doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_constructor::GetConstructorError::unhandled)?;
+        crate::operation::get_constructor::GetConstructor::send(&self.client, input).await
+    }
+
+    pub(crate) fn config_override(
+        mut self,
+        config_override: impl ::std::convert::Into<crate::config::Builder>,
+    ) -> Self {
+        self.set_config_override(::std::option::Option::Some(config_override.into()));
+        self
+    }
+
+    pub(crate) fn set_config_override(
+        &mut self,
+        config_override: ::std::option::Option<crate::config::Builder>,
+    ) -> &mut Self {
+        self.config_override = config_override;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
