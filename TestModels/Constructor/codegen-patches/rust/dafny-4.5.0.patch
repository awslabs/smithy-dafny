diff --git b/TestModels/Constructor/runtimes/rust/src/client.rs a/TestModels/Constructor/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..e209cced
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/client.rs
@@ -0,0 +1,36 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn crate::simple::constructor::internaldafny::types::ISimpleConstructorClient>,
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(conf: crate::Config) -> Result<Self, BuildError> {
+        let inner =
+            crate::r#simple::constructor::internaldafny::_default::SimpleConstructor(
+                &crate::conversions::simple_constructor_config::_simple_constructor_config::to_dafny(conf),
+            );
+        if matches!(
+            inner.as_ref(),
+            crate::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+
+        Ok(Self {
+            dafny_client: ::dafny_runtime::upcast_object()(inner.Extract()),
+        })
+    }
+}
+
+mod get_constructor;
diff --git b/TestModels/Constructor/runtimes/rust/src/client/get_constructor.rs a/TestModels/Constructor/runtimes/rust/src/client/get_constructor.rs
new file mode 100644
index 00000000..c1ec2593
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/client/get_constructor.rs
@@ -0,0 +1,19 @@
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetConstructor`](crate::operation::get_constructor::builders::GetConstructorFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<String>)`](crate::operation::get_constructor::builders::GetConstructorFluentBuilder::value) / [`set_value(Option<String>)`](crate::operation::get_constructor::builders::GetConstructorFluentBuilder::set_value):<br>required: **false**<br>(undocumented)<br>
+    /// - On success, responds with [`GetConstructorOutput`](crate::operation::get_constructor::GetConstructorOutput) with field(s):
+    ///   - [`internal_config_string(Option<String>)`](crate::operation::get_constructor::GetConstructorOutput::internal_config_string): (undocumented)
+    ///   - [`blob_value(Option<Blob>)`](crate::operation::get_constructor::GetConstructorOutput::blob_value): (undocumented)
+    ///   - [`boolean_value(Option<bool>)`](crate::operation::get_constructor::GetConstructorOutput::boolean_value): (undocumented)
+    ///   - [`string_value(Option<String>)`](crate::operation::get_constructor::GetConstructorOutput::string_value): (undocumented)
+    ///   - [`integer_value(Option<i32>)`](crate::operation::get_constructor::GetConstructorOutput::integer_value): (undocumented)
+    ///   - [`long_value(Option<i64>)`](crate::operation::get_constructor::GetConstructorOutput::long_value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetConstructorError>`](crate::operation::get_constructor::GetConstructorError)
+    pub fn get_constructor(
+        &self,
+    ) -> crate::operation::get_constructor::builders::GetConstructorFluentBuilder {
+        crate::operation::get_constructor::builders::GetConstructorFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/config.rs a/TestModels/Constructor/runtimes/rust/src/config.rs
new file mode 100644
index 00000000..4e944c46
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/config.rs
@@ -0,0 +1,119 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Configuration for a simple service client.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Config {
+    pub(crate) blob_value: Option<Vec<u8>>,
+    pub(crate) boolean_value: Option<bool>,
+    pub(crate) string_value: Option<String>,
+    pub(crate) integer_value: Option<i32>,
+    pub(crate) long_value: Option<i64>,
+}
+
+impl Config {
+    /// Constructs a config builder.
+    pub fn builder() -> Builder {
+        Builder::default()
+    }
+    /// Converts this config back into a builder so that it can be tweaked.
+    pub fn to_builder(&self) -> Builder {
+        Builder {
+            blob_value: self.blob_value.clone(),
+            boolean_value: self.boolean_value,
+            string_value: self.string_value.clone(),
+            integer_value: self.integer_value,
+            long_value: self.long_value,
+        }
+    }
+}
+/// Builder for creating a `Config`.
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Builder {
+    pub(crate) blob_value: Option<Vec<u8>>,
+    pub(crate) boolean_value: Option<bool>,
+    pub(crate) string_value: Option<String>,
+    pub(crate) integer_value: Option<i32>,
+    pub(crate) long_value: Option<i64>,
+}
+impl ::std::default::Default for Builder {
+    fn default() -> Self {
+        Self {
+            blob_value: Some(vec![0]),
+            boolean_value: Some(false),
+            string_value: Some("".to_string()),
+            integer_value: Some(0),
+            long_value: Some(0),
+        }
+    }
+}
+impl Builder {
+    /// Constructs a config builder.
+    pub fn new() -> Self {
+        Self::default()
+    }
+
+    pub fn blob_value(mut self, blob_value: Vec<u8>) -> Self {
+        self.set_blob_value(Some(blob_value));
+        self
+    }
+
+    pub fn set_blob_value(&mut self, blob_value: Option<Vec<u8>>) -> &mut Self {
+        self.blob_value = blob_value;
+        self
+    }
+
+    pub fn boolean_value(mut self, boolean_value: bool) -> Self {
+        self.set_boolean_value(Some(boolean_value));
+        self
+    }
+
+    pub fn set_boolean_value(&mut self, boolean_value: Option<bool>) -> &mut Self {
+        self.boolean_value = boolean_value;
+        self
+    }
+
+    pub fn string_value(mut self, string_value: String) -> Self {
+        self.set_string_value(Some(string_value));
+        self
+    }
+
+    pub fn set_string_value(&mut self, string_value: Option<String>) -> &mut Self {
+        self.string_value = string_value;
+        self
+    }
+
+    pub fn integer_value(mut self, integer_value: i32) -> Self {
+        self.set_integer_value(Some(integer_value));
+        self
+    }
+
+    pub fn set_integer_value(&mut self, integer_value: Option<i32>) -> &mut Self {
+        self.integer_value = integer_value;
+        self
+    }
+
+    pub fn long_value(mut self, long_value: i64) -> Self {
+        self.set_long_value(Some(long_value));
+        self
+    }
+
+    pub fn set_long_value(&mut self, long_value: Option<i64>) -> &mut Self {
+        self.long_value = long_value;
+        self
+    }
+
+    /// Builds a [`Config`].
+    #[allow(unused_mut)]
+    pub fn build(mut self) -> Config {
+        Config {
+            blob_value: self.blob_value,
+            boolean_value: self.boolean_value,
+            string_value: self.string_value,
+            integer_value: self.integer_value,
+            long_value: self.long_value,
+        }
+    }
+}
+
+pub use ::aws_smithy_runtime_api::client::behavior_version::BehaviorVersion;
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions.rs a/TestModels/Constructor/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..d6c2383c
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_constructor;
+pub mod simple_constructor_config;
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor.rs a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor.rs
new file mode 100644
index 00000000..cb568f9f
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor.rs
@@ -0,0 +1,48 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_constructor::GetConstructorError,
+) -> ::std::rc::Rc<
+    crate::simple::constructor::internaldafny::types::Error,
+> {
+    match value {
+        crate::operation::get_constructor::GetConstructorError::Unhandled(unhandled) => {
+            ::std::rc::Rc::new(
+                crate::simple::constructor::internaldafny::types::Error::Opaque {
+                    obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)),
+                },
+            )
+        }
+    }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::simple::constructor::internaldafny::types::Error,
+    >,
+) -> crate::operation::get_constructor::GetConstructorError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(
+        &dafny_value.as_ref(),
+        crate::simple::constructor::internaldafny::types::Error::CollectionOfErrors { .. }
+    ) {
+        let error_message = "TODO: can't get message yet";
+        crate::operation::get_constructor::GetConstructorError::generic(
+            ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                .message(error_message)
+                .build(),
+        )
+    } else {
+        crate::operation::get_constructor::GetConstructorError::generic(
+            ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                .message("Opaque error")
+                .build(),
+        )
+    }
+}
+
+pub mod _get_constructor_input;
+
+pub mod _get_constructor_output;
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_input.rs a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_input.rs
new file mode 100644
index 00000000..fdb5c4e3
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_input.rs
@@ -0,0 +1,41 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_constructor::GetConstructorInput,
+) -> ::std::rc::Rc<
+    crate::simple::constructor::internaldafny::types::GetConstructorInput,
+>{
+    let dafny_value = match value.value {
+            Some(s) => crate::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+            None => crate::_Wrappers_Compile::Option::None {},
+        };
+    ::std::rc::Rc::new(crate::simple::constructor::internaldafny::types::GetConstructorInput::GetConstructorInput {
+            value: ::std::rc::Rc::new(dafny_value)
+        })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::simple::constructor::internaldafny::types::GetConstructorInput,
+    >,
+) -> crate::operation::get_constructor::GetConstructorInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_constructor::GetConstructorInput { value }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_output.rs a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_output.rs
new file mode 100644
index 00000000..9374bd3e
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions/get_constructor/_get_constructor_output.rs
@@ -0,0 +1,170 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_constructor::GetConstructorOutput,
+) -> ::std::rc::Rc<
+    crate::simple::constructor::internaldafny::types::GetConstructorOutput,
+>{
+    let crate::operation::get_constructor::GetConstructorOutput {
+        internal_config_string,
+        blob_value,
+        boolean_value,
+        string_value,
+        integer_value,
+        long_value,
+    } = value;
+
+    let internal_config_string = match internal_config_string {
+        Some(s) => crate::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+
+    let blob_value = match blob_value {
+        Some(v) => crate::_Wrappers_Compile::Option::Some {
+            value: ::dafny_runtime::Sequence::from_array(&v),
+        },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+
+    let boolean_value = match boolean_value {
+        Some(value) => crate::_Wrappers_Compile::Option::Some { value },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+
+    let string_value = match string_value {
+        Some(s) => crate::_Wrappers_Compile::Option::Some { value: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&s) },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+
+    let integer_value = match integer_value {
+        Some(value) => crate::_Wrappers_Compile::Option::Some { value },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+
+    let long_value = match long_value {
+        Some(value) => crate::_Wrappers_Compile::Option::Some { value },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(crate::simple::constructor::internaldafny::types::GetConstructorOutput::GetConstructorOutput {
+        internalConfigString: ::std::rc::Rc::new(internal_config_string),
+        blobValue: ::std::rc::Rc::new(blob_value),
+        booleanValue: ::std::rc::Rc::new(boolean_value),
+        stringValue: ::std::rc::Rc::new(string_value),
+        integerValue: ::std::rc::Rc::new(integer_value),
+        longValue: ::std::rc::Rc::new(long_value),
+    })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::simple::constructor::internaldafny::types::GetConstructorOutput,
+    >,
+) -> crate::operation::get_constructor::GetConstructorOutput {
+    let internal_config_string = if matches!(
+        dafny_value.internalConfigString().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.internalConfigString().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.internalConfigString().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    let blob_value = if matches!(
+        dafny_value.blobValue().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(
+                &dafny_value.blobValue().Extract(),
+                |e| *e,
+            ),
+        )
+    } else if matches!(
+        dafny_value.blobValue().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    let boolean_value = if matches!(
+        dafny_value.booleanValue().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.booleanValue().Extract())
+    } else if matches!(
+        dafny_value.booleanValue().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    let string_value = if matches!(
+        dafny_value.stringValue().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.stringValue().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.stringValue().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    let integer_value = if matches!(
+        dafny_value.integerValue().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.integerValue().Extract())
+    } else if matches!(
+        dafny_value.integerValue().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    let long_value = if matches!(
+        dafny_value.longValue().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.longValue().Extract())
+    } else if matches!(
+        dafny_value.longValue().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+
+    crate::operation::get_constructor::GetConstructorOutput {
+        internal_config_string,
+        blob_value,
+        boolean_value,
+        string_value,
+        integer_value,
+        long_value,
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config.rs a/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config.rs
new file mode 100644
index 00000000..e75ae86f
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_constructor_config;
diff --git b/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config/_simple_constructor_config.rs a/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config/_simple_constructor_config.rs
new file mode 100644
index 00000000..61c4d56f
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/conversions/simple_constructor_config/_simple_constructor_config.rs
@@ -0,0 +1,59 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use crate::standard_library_conversions::{
+    obool_from_dafny, obool_to_dafny, oint_from_dafny, oint_to_dafny, olong_from_dafny,
+    olong_to_dafny, ostring_from_dafny, ostring_to_dafny,
+};
+
+#[allow(dead_code)]
+pub fn to_dafny(
+    config: crate::config::Config,
+) -> ::std::rc::Rc<
+    crate::simple::constructor::internaldafny::types::SimpleConstructorConfig,
+>{
+    ::std::rc::Rc::new(
+        crate::simple::constructor::internaldafny::types::SimpleConstructorConfig::SimpleConstructorConfig { blobValue: blob_to_dafny(config.blob_value), booleanValue: obool_to_dafny(config.boolean_value), stringValue: ostring_to_dafny(&config.string_value), integerValue: oint_to_dafny(config.integer_value), longValue: olong_to_dafny(config.long_value) })
+}
+
+fn blob_to_dafny(
+    value: ::std::option::Option<::std::vec::Vec<u8>>,
+) -> ::std::rc::Rc<
+    crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>,
+> {
+    let v = match value {
+        Some(v) => crate::_Wrappers_Compile::Option::Some {
+            value: ::dafny_runtime::Sequence::from_array(&v),
+        },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+
+    ::std::rc::Rc::new(v)
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    config: ::std::rc::Rc<
+        crate::simple::constructor::internaldafny::types::SimpleConstructorConfig,
+    >,
+) -> crate::config::Config {
+    crate::config::Config {
+        blob_value: blob_from_dafny(config.blobValue().clone()),
+        boolean_value: obool_from_dafny(config.booleanValue().clone()),
+        string_value: ostring_from_dafny(config.stringValue().clone()),
+        integer_value: oint_from_dafny(config.integerValue().clone()),
+        long_value: olong_from_dafny(config.longValue().clone()),
+    }
+}
+
+fn blob_from_dafny(
+    value: ::std::rc::Rc<
+        crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>,
+    >,
+) -> ::std::option::Option<::std::vec::Vec<u8>> {
+    match value.as_ref() {
+        crate::_Wrappers_Compile::Option::Some { value } => {
+            Some(::std::rc::Rc::try_unwrap(value.to_array()).unwrap_or_else(|rc| (*rc).clone()))
+        }
+        crate::_Wrappers_Compile::Option::None {} => None,
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/error.rs a/TestModels/Constructor/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/Constructor/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/Constructor/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..cce22d1c
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+
+impl ::dafny_runtime::UpcastObject<dyn ::std::any::Any> for Unhandled {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/implementation_from_dafny.rs a/TestModels/Constructor/runtimes/rust/src/implementation_from_dafny.rs
index c4ac178d..5aea81e2 100644
--- b/TestModels/Constructor/runtimes/rust/src/implementation_from_dafny.rs
+++ a/TestModels/Constructor/runtimes/rust/src/implementation_from_dafny.rs
@@ -1,6 +1,26 @@
 #![allow(warnings, unconditional_panic)]
 #![allow(nonstandard_style)]
 
+#[doc(inline)]
+pub use config::Config;
+
+pub mod client;
+
+/// Configuration for Constructor Service.
+pub mod config;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+pub mod conversions;
+mod standard_library_conversions;
+
+pub use client::Client;
+
+
 pub mod r#_Wrappers_Compile {
     pub use dafny_runtime::DafnyPrint;
     pub use std::cmp::Eq;
diff --git b/TestModels/Constructor/runtimes/rust/src/lib.rs a/TestModels/Constructor/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..9986830f
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/lib.rs
@@ -0,0 +1,23 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[doc(inline)]
+pub use config::Config;
+
+pub mod client;
+
+/// Configuration for Constructor Service.
+pub mod config;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+
+mod implementation_from_dafny;
diff --git b/TestModels/Constructor/runtimes/rust/src/operation.rs a/TestModels/Constructor/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..8de453d5
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/operation.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetConstructor` operation.
+pub mod get_constructor;
diff --git b/TestModels/Constructor/runtimes/rust/src/operation/get_constructor.rs a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor.rs
new file mode 100644
index 00000000..3551482e
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor.rs
@@ -0,0 +1,146 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetConstructor`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetConstructor;
+impl GetConstructor {
+    /// Creates a new `GetConstructor`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_constructor::GetConstructorInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_constructor::GetConstructorOutput,
+        crate::operation::get_constructor::GetConstructorError,
+    > {
+        let inner_input =
+            crate::conversions::get_constructor::_get_constructor_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetConstructor(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_constructor::_get_constructor_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_constructor::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetConstructor` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetConstructorError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetConstructorError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetConstructorError {
+    /// Creates the `GetConstructorError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetConstructorError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetConstructorError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetConstructorError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetConstructorError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetConstructorError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetConstructorError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_constructor::_get_constructor_output::GetConstructorOutput;
+
+pub use crate::operation::get_constructor::_get_constructor_input::GetConstructorInput;
+
+mod _get_constructor_input;
+
+mod _get_constructor_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_input.rs a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_input.rs
new file mode 100644
index 00000000..227b5efb
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetConstructorInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl GetConstructorInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl GetConstructorInput {
+    /// Creates a new builder-style object to manufacture [`GetConstructorInput`](crate::operation::get_constructor::GetConstructorInput).
+    pub fn builder() -> crate::operation::get_constructor::builders::GetConstructorInputBuilder {
+        crate::operation::get_constructor::builders::GetConstructorInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetConstructorInput`](crate::operation::get_constructor::GetConstructorInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetConstructorInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetConstructorInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetConstructorInput`](crate::operation::get_constructor::GetConstructorInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_constructor::GetConstructorInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_constructor::GetConstructorInput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_output.rs a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_output.rs
new file mode 100644
index 00000000..cb866fb8
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/_get_constructor_output.rs
@@ -0,0 +1,171 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetConstructorOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub internal_config_string: ::std::option::Option<::std::string::String>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub blob_value: ::std::option::Option<::std::vec::Vec<u8>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub boolean_value: ::std::option::Option<bool>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub string_value: ::std::option::Option<::std::string::String>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub integer_value: ::std::option::Option<i32>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub long_value: ::std::option::Option<i64>,
+}
+
+impl GetConstructorOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn internal_config_string(&self) -> ::std::option::Option<&str> {
+        self.internal_config_string.as_deref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(&self) -> ::std::option::Option<&[u8]> {
+        self.blob_value.as_deref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(&self) -> ::std::option::Option<bool> {
+        self.boolean_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(&self) -> ::std::option::Option<&str> {
+        self.string_value.as_deref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(&self) -> ::std::option::Option<i32> {
+        self.integer_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(&self) -> ::std::option::Option<i64> {
+        self.long_value
+    }
+}
+
+impl GetConstructorOutput {
+    /// Creates a new builder-style object to manufacture [`GetConstructorOutput`](crate::operation::get_constructor::GetConstructorOutput).
+    pub fn builder() -> crate::operation::get_constructor::builders::GetConstructorOutputBuilder {
+        crate::operation::get_constructor::builders::GetConstructorOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetConstructorOutput`](crate::operation::get_constructor::GetConstructorOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetConstructorOutputBuilder {
+    pub(crate) internal_config_string: ::std::option::Option<::std::string::String>,
+    pub(crate) blob_value: ::std::option::Option<::std::vec::Vec<u8>>,
+    pub(crate) boolean_value: ::std::option::Option<bool>,
+    pub(crate) string_value: ::std::option::Option<::std::string::String>,
+    pub(crate) integer_value: ::std::option::Option<i32>,
+    pub(crate) long_value: ::std::option::Option<i64>,
+}
+
+impl GetConstructorOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn internal_config_string(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.internal_config_string = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_internal_config_string(
+        mut self,
+        input: ::std::option::Option<::std::string::String>,
+    ) -> Self {
+        self.internal_config_string = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_internal_config_string(&self) -> &::std::option::Option<::std::string::String> {
+        &self.internal_config_string
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(mut self, input: ::std::vec::Vec<u8>) -> Self {
+        self.blob_value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_blob_value(mut self, input: ::std::option::Option<::std::vec::Vec<u8>>) -> Self {
+        self.blob_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_blob_value(&self) -> &::std::option::Option<::std::vec::Vec<u8>> {
+        &self.blob_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(mut self, input: bool) -> Self {
+        self.boolean_value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_boolean_value(mut self, input: ::std::option::Option<bool>) -> Self {
+        self.boolean_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_boolean_value(&self) -> &::std::option::Option<bool> {
+        &self.boolean_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.string_value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_string_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.string_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_string_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.string_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(mut self, input: i32) -> Self {
+        self.integer_value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_integer_value(mut self, input: ::std::option::Option<i32>) -> Self {
+        self.integer_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_integer_value(&self) -> &::std::option::Option<i32> {
+        &self.integer_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(mut self, input: i64) -> Self {
+        self.long_value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_long_value(mut self, input: ::std::option::Option<i64>) -> Self {
+        self.long_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_long_value(&self) -> &::std::option::Option<i64> {
+        &self.long_value
+    }
+
+    /// Consumes the builder and constructs a [`GetConstructorOutput`](crate::operation::get_constructor::GetConstructorOutput).
+    pub fn build(self) -> crate::operation::get_constructor::GetConstructorOutput {
+        crate::operation::get_constructor::GetConstructorOutput {
+            internal_config_string: self.internal_config_string,
+            blob_value: self.blob_value,
+            boolean_value: self.boolean_value,
+            string_value: self.string_value,
+            integer_value: self.integer_value,
+            long_value: self.long_value,
+        }
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/builders.rs a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/builders.rs
new file mode 100644
index 00000000..52045c7e
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/operation/get_constructor/builders.rs
@@ -0,0 +1,91 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_constructor::_get_constructor_output::GetConstructorOutputBuilder;
+
+pub use crate::operation::get_constructor::_get_constructor_input::GetConstructorInputBuilder;
+
+impl GetConstructorInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_constructor::GetConstructorOutput,
+        crate::operation::get_constructor::GetConstructorError,
+    > {
+        let mut fluent_builder = client.get_constructor();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetConstructor`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetConstructorFluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::get_constructor::builders::GetConstructorInputBuilder,
+    config_override: ::std::option::Option<crate::config::Builder>,
+}
+impl GetConstructorFluentBuilder {
+    /// Creates a new `GetConstructorFluentBuilder`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+            config_override: ::std::option::Option::None,
+        }
+    }
+    /// Access the GetConstructor as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_constructor::builders::GetConstructorInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_constructor::GetConstructorOutput,
+        crate::operation::get_constructor::GetConstructorError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetConstructor doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_constructor::GetConstructorError::unhandled)?;
+        crate::operation::get_constructor::GetConstructor::send(&self.client, input).await
+    }
+
+    pub(crate) fn config_override(
+        mut self,
+        config_override: impl ::std::convert::Into<crate::config::Builder>,
+    ) -> Self {
+        self.set_config_override(::std::option::Option::Some(config_override.into()));
+        self
+    }
+
+    pub(crate) fn set_config_override(
+        &mut self,
+        config_override: ::std::option::Option<crate::config::Builder>,
+    ) -> &mut Self {
+        self.config_override = config_override;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/Constructor/runtimes/rust/src/standard_library_conversions.rs a/TestModels/Constructor/runtimes/rust/src/standard_library_conversions.rs
new file mode 100644
index 00000000..2fec0ffb
--- /dev/null
+++ a/TestModels/Constructor/runtimes/rust/src/standard_library_conversions.rs
@@ -0,0 +1,246 @@
+pub fn ostring_to_dafny(
+  input: &Option<String>,
+) -> ::std::rc::Rc<
+  crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>,
+> {
+  let dafny_value = match input {
+  Some(b) => crate::_Wrappers_Compile::Option::Some { value:
+      dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&b)
+      },
+  None => crate::_Wrappers_Compile::Option::None {},
+};
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn ostring_from_dafny(
+  input: ::std::rc::Rc<
+      crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>,
+  >,
+) -> Option<String> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(
+          dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+              &input.Extract(),
+          ),
+      )
+  } else {
+      None
+  }
+}
+
+pub fn obool_to_dafny(input: Option<bool>) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<bool>> {
+  let dafny_value = match input {
+      Some(b) => crate::_Wrappers_Compile::Option::Some { value: b },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn obool_from_dafny(input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<bool>>) -> Option<bool> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(input.Extract())
+  } else {
+      None
+  }
+}
+
+pub fn oint_to_dafny(input: Option<i32>) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<i32>> {
+  let dafny_value = match input {
+      Some(b) => crate::_Wrappers_Compile::Option::Some { value: b },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn oint_from_dafny(input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<i32>>) -> Option<i32> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(input.Extract())
+  } else {
+      None
+  }
+}
+
+pub fn olong_to_dafny(input: Option<i64>) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<i64>> {
+  let dafny_value = match input {
+      Some(b) => crate::_Wrappers_Compile::Option::Some { value: b },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn olong_from_dafny(input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<i64>>) -> Option<i64> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(input.Extract())
+  } else {
+      None
+  }
+}
+
+pub fn blob_to_dafny(
+  input: &::aws_smithy_types::Blob,
+) -> ::dafny_runtime::Sequence<u8> {
+  ::dafny_runtime::Sequence::from_array(&input.clone().into_inner())
+}
+
+pub fn oblob_to_dafny(
+  input: &Option<::aws_smithy_types::Blob>,
+) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>> {
+  let dafny_value = match input {
+      Some(b) => crate::_Wrappers_Compile::Option::Some {
+          value: blob_to_dafny(&b),
+      },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn blob_from_dafny(
+  input: ::dafny_runtime::Sequence<u8>,
+) -> ::aws_smithy_types::Blob {
+
+  ::aws_smithy_types::Blob::new(
+      ::std::rc::Rc::try_unwrap(input.to_array())
+          .unwrap_or_else(|rc| (*rc).clone()),
+  )
+}
+
+pub fn oblob_from_dafny(
+  input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>>,
+) -> Option<::aws_smithy_types::Blob> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(blob_from_dafny(input.Extract()))
+  } else {
+      None
+  }
+}
+
+pub fn double_to_dafny(
+  input: f64,
+) -> ::dafny_runtime::Sequence<u8> {
+  ::dafny_runtime::dafny_runtime_conversions::vec_to_dafny_sequence(
+      &f64::to_be_bytes(input).to_vec(),
+      |x| *x)
+}
+
+pub fn odouble_to_dafny(
+  input: &Option<f64>,
+) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>> {
+  let dafny_value = match input {
+      Some(f) => crate::_Wrappers_Compile::Option::Some {
+          value: double_to_dafny(*f),
+      },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn double_from_dafny(
+  input: &::dafny_runtime::Sequence<u8>,
+) -> f64 {
+  let v = ::dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(input, |x| *x);
+  f64::from_be_bytes(v.try_into().expect("Error converting Sequence to f64"))
+}
+
+pub fn odouble_from_dafny(
+  input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>>,
+) -> Option<f64> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(double_from_dafny(&input.Extract()))
+  } else {
+      None
+  }
+}
+
+pub fn timestamp_to_dafny(
+  input: ::aws_smithy_types::DateTime,
+) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
+  ::dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&input.to_string())
+}
+
+pub fn otimestamp_to_dafny(
+  input: &Option<::aws_smithy_types::DateTime>,
+) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>> {
+  let dafny_value = match input {
+      Some(f) => crate::_Wrappers_Compile::Option::Some {
+          value: timestamp_to_dafny(*f),
+      },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn timestamp_from_dafny(
+  input: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+) -> ::aws_smithy_types::DateTime {
+  let s = dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&input);
+  ::aws_smithy_types::DateTime::from_str(
+      &s,
+      aws_smithy_types::date_time::Format::DateTime,
+  ).unwrap()
+}
+
+pub fn otimestamp_from_dafny(
+  input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>>,
+) -> Option<::aws_smithy_types::DateTime> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(timestamp_from_dafny(input.Extract()))
+  } else {
+      None
+  }
+}
+
+pub fn option_from_dafny<T: ::dafny_runtime::DafnyType, TR>(
+  input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<T>>,
+  converter: fn(&T) -> TR,
+) -> Option<TR> {
+  match &*input {
+      crate::_Wrappers_Compile::Option::Some { value } => Some(converter(value)),
+      crate::_Wrappers_Compile::Option::None { } => None,
+  }
+}
+
+pub fn option_to_dafny<T: ::dafny_runtime::DafnyType, TR>(
+  input: &Option<TR>,
+  converter: fn(&TR) -> T,
+) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<T>> {
+  match input {
+      Some(value) => ::std::rc::Rc::new(
+          crate::_Wrappers_Compile::Option::Some {
+              value: converter(&value)
+          }
+      ),
+      None => ::std::rc::Rc::new(
+          crate::_Wrappers_Compile::Option::None {}
+      ),
+  }
+}
+
+pub fn result_from_dafny<T: ::dafny_runtime::DafnyType, TR, E: ::dafny_runtime::DafnyType, ER>(
+  input: ::std::rc::Rc<crate::_Wrappers_Compile::Result<T, E>>,
+  converter_t: fn(&T) -> TR,
+  converter_e: fn(&E) -> ER,
+) -> Result<TR, ER> {
+  match &*input {
+      crate::_Wrappers_Compile::Result::Success { value } => Ok(converter_t(value)),
+      crate::_Wrappers_Compile::Result::Failure { error } => Err(converter_e(error)),
+  }
+}
+
+pub fn result_to_dafny<T: ::dafny_runtime::DafnyType, TR, E: ::dafny_runtime::DafnyType, ER>(
+  input: &Result<TR, ER>,
+  converter_t: fn(&TR) -> T,
+  converter_e: fn(&ER) -> E,
+) -> ::std::rc::Rc<crate::_Wrappers_Compile::Result<T, E>> {
+  match input {
+      Ok(value) => ::std::rc::Rc::new(
+          crate::_Wrappers_Compile::Result::Success {
+              value: converter_t(&value)
+          }
+      ),
+      Err(error) => ::std::rc::Rc::new(
+          crate::_Wrappers_Compile::Result::Failure {
+              error: converter_e(&error)
+          }
+      ),
+  }
+}
\ No newline at end of file
