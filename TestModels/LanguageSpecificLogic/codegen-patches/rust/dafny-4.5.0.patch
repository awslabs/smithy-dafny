diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/client.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..ec4574fc
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/client.rs
@@ -0,0 +1,39 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::ILanguageSpecificLogicClient>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::language_specific_logic_config::LanguageSpecificLogicConfig,
+    ) -> Result<Self, BuildError> {
+        // If this service had any configuration properties,
+        // they would need converting here too.
+        let inner =
+            crate::implementation_from_dafny::_language_dspecific_dlogic_dinternaldafny::_default::LanguageSpecificLogic(
+                &crate::conversions::language_specific_logic_config::_language_specific_logic_config::to_dafny(conf),
+            );
+        if matches!(
+            inner.as_ref(),
+            crate::implementation_from_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::upcast_object()(inner.Extract()),
+        })
+    }
+}
+
+mod get_runtime_information;
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/client/get_runtime_information.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/client/get_runtime_information.rs
new file mode 100644
index 00000000..d8791bd4
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/client/get_runtime_information.rs
@@ -0,0 +1,12 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetRuntimeInformation`](crate::operation::get_runtime_information::builders::GetRuntimeInformationFluentBuilder) operation.
+    ///
+    /// - On success, responds with [`GetRuntimeInformationOutput`](crate::operation::get_runtime_information::GetRuntimeInformationOutput) with field(s):
+    ///   - [`language(String)`](crate::operation::get_runtime_information::GetRuntimeInformationOutput::language): (undocumented)
+    ///   - [`runtime(String)`](crate::operation::get_runtime_information::GetRuntimeInformationOutput::runtime): (undocumented)
+    /// - On failure, responds with [`SdkError<GetRuntimeInformationError>`](crate::operation::get_runtime_information::GetRuntimeInformationError)
+    pub fn get_runtime_information(&self) -> crate::operation::get_runtime_information::builders::GetRuntimeInformationFluentBuilder {
+        crate::operation::get_runtime_information::builders::GetRuntimeInformationFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..1f370a9b
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions.rs
@@ -0,0 +1,6 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_runtime_information;
+
+pub mod language_specific_logic_config;
+
+pub(crate) mod error;
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/error.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/error.rs
new file mode 100644
index 00000000..65f1d853
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/error.rs
@@ -0,0 +1,30 @@
+/// Wraps up an arbitrary Rust Error value as a Dafny Error
+pub fn to_opaque_error<E: std::error::Error + 'static>(value: E) ->
+  ::std::rc::Rc<crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::Error>
+{
+  let error_obj: ::dafny_runtime::Object<dyn::std::any::Any> =
+    ::dafny_runtime::Object(Some(::std::rc::Rc::new(
+        ::std::cell::UnsafeCell::new(value),
+    )));
+  ::std::rc::Rc::new(
+    crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::Error::Opaque {
+        obj: error_obj,
+    },
+  )
+}
+
+/// Wraps up an arbitrary Rust Error value as a Dafny Result<T, Error>.Failure
+pub fn to_opaque_error_result<T: dafny_runtime::DafnyType, E: std::error::Error + 'static>(value: E) ->
+  ::std::rc::Rc<
+    dafny_standard_library::implementation_from_dafny::_Wrappers_Compile::Result<
+      T,
+      ::std::rc::Rc<crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::Error>
+    >
+  >
+{
+  ::std::rc::Rc::new(
+    dafny_standard_library::implementation_from_dafny::_Wrappers_Compile::Result::Failure {
+      error: to_opaque_error(value)
+    }
+  )
+}
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/get_runtime_information.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/get_runtime_information.rs
new file mode 100644
index 00000000..f2d13511
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/get_runtime_information.rs
@@ -0,0 +1,31 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_runtime_information::GetRuntimeInformationError,
+) -> ::std::rc::Rc<crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::Error>
+{
+    match value {
+    crate::operation::get_runtime_information::GetRuntimeInformationError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_runtime_information::GetRuntimeInformationError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_runtime_information::GetRuntimeInformationError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_runtime_information::GetRuntimeInformationError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_runtime_information_output;
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/get_runtime_information/_get_runtime_information_output.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/get_runtime_information/_get_runtime_information_output.rs
new file mode 100644
index 00000000..10efe4af
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/get_runtime_information/_get_runtime_information_output.rs
@@ -0,0 +1,49 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_runtime_information::GetRuntimeInformationOutput,
+) -> ::std::rc::Rc<
+    crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::GetRuntimeInformationOutput,
+> {
+    let crate::operation::get_runtime_information::GetRuntimeInformationOutput {
+        language,
+        runtime,
+    } = value;
+
+    let language =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(
+            &language,
+        );
+
+    let runtime =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(
+            &runtime,
+        );
+
+    ::std::rc::Rc::new(crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::GetRuntimeInformationOutput::GetRuntimeInformationOutput {
+        language: language,
+        runtime: runtime,
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::GetRuntimeInformationOutput>,
+) -> crate::operation::get_runtime_information::GetRuntimeInformationOutput {
+    let crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::GetRuntimeInformationOutput::GetRuntimeInformationOutput { language, runtime } = dafny_value.as_ref();
+
+    let language =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+            &language,
+        );
+
+    let runtime =
+        dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+            &runtime,
+        );
+
+    crate::operation::get_runtime_information::GetRuntimeInformationOutput {
+        language,
+        runtime,
+    }
+}
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/language_specific_logic_config.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/language_specific_logic_config.rs
new file mode 100644
index 00000000..8516fd7d
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/language_specific_logic_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _language_specific_logic_config;
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/language_specific_logic_config/_language_specific_logic_config.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/language_specific_logic_config/_language_specific_logic_config.rs
new file mode 100644
index 00000000..277493e9
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/conversions/language_specific_logic_config/_language_specific_logic_config.rs
@@ -0,0 +1,19 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::language_specific_logic_config::LanguageSpecificLogicConfig,
+) -> ::std::rc::Rc<
+    crate::implementation_from_dafny::_language_dspecific_dlogic_dinternaldafny_dtypes::LanguageSpecificLogicConfig,
+> {
+    ::std::rc::Rc::new(crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::LanguageSpecificLogicConfig::LanguageSpecificLogicConfig {})
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::LanguageSpecificLogicConfig,
+    >,
+) -> crate::types::language_specific_logic_config::LanguageSpecificLogicConfig {
+    crate::types::language_specific_logic_config::LanguageSpecificLogicConfig {}
+}
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/error.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..cce22d1c
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+
+impl ::dafny_runtime::UpcastObject<dyn ::std::any::Any> for Unhandled {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/externs.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/externs.rs
new file mode 100644
index 00000000..0d764211
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/externs.rs
@@ -0,0 +1,16 @@
+#![allow(warnings, unconditional_panic)]
+#![allow(nonstandard_style)]
+
+pub use dafny_standard_library::implementation_from_dafny::*;
+
+impl crate::implementation_from_dafny::r#_LanguageSpecificLogicImpl_Compile::_default {
+    pub fn GetRustRuntimeVersion(config: &::std::rc::Rc<crate::implementation_from_dafny::r#_LanguageSpecificLogicImpl_Compile::Config>) -> ::std::rc::Rc<r#_Wrappers_Compile::Result<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>, ::std::rc::Rc<crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::Error>>> {
+        let os = ::std::env::consts::OS;
+        let arch = ::std::env::consts::ARCH;
+        let runtime = ::std::format!("{} {}", os, arch);
+
+        let runtime_str = dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&runtime);
+        let result = r#_Wrappers_Compile::Result::Success { value: runtime_str };
+        ::std::rc::Rc::new(result)
+    }
+}
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/lib.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..7d3f2bb5
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/lib.rs
@@ -0,0 +1,24 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub mod implementation_from_dafny;
+
+mod externs;
+
+#[cfg(feature = "wrapped-client")]
+pub mod wrapped;
+
+pub use client::Client;
+pub use types::language_specific_logic_config::LanguageSpecificLogicConfig;
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..236168ae
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetRuntimeInformation` operation.
+pub mod get_runtime_information;
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation/get_runtime_information.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation/get_runtime_information.rs
new file mode 100644
index 00000000..319e38bc
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation/get_runtime_information.rs
@@ -0,0 +1,139 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetRuntimeInformation`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetRuntimeInformation;
+impl GetRuntimeInformation {
+    /// Creates a new `GetRuntimeInformation`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_runtime_information::GetRuntimeInformationOutput,
+        crate::operation::get_runtime_information::GetRuntimeInformationError,
+    > {
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetRuntimeInformation();
+        if matches!(
+            inner_result.as_ref(),
+            crate::implementation_from_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_runtime_information::_get_runtime_information_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_runtime_information::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetRuntimeInformation` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetRuntimeInformationError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetRuntimeInformationError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetRuntimeInformationError {
+    /// Creates the `GetRuntimeInformationError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetRuntimeInformationError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetRuntimeInformationError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetRuntimeInformationError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetRuntimeInformationError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetRuntimeInformationError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetRuntimeInformationError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_runtime_information::_get_runtime_information_output::GetRuntimeInformationOutput;
+
+mod _get_runtime_information_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation/get_runtime_information/_get_runtime_information_output.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation/get_runtime_information/_get_runtime_information_output.rs
new file mode 100644
index 00000000..f63eb980
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation/get_runtime_information/_get_runtime_information_output.rs
@@ -0,0 +1,78 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetRuntimeInformationOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub language: ::std::string::String,
+    #[allow(missing_docs)] // documentation missing in model
+    pub runtime: ::std::string::String,
+}
+impl GetRuntimeInformationOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn language(&self) -> &str {
+        &self.language
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn runtime(&self) -> &str {
+        &self.runtime
+    }
+}
+impl GetRuntimeInformationOutput {
+    /// Creates a new builder-style object to manufacture [`GetRuntimeInformationOutput`](crate::operation::operation::GetRuntimeInformationOutput).
+    pub fn builder() -> crate::operation::get_runtime_information::builders::GetRuntimeInformationOutputBuilder {
+        crate::operation::get_runtime_information::builders::GetRuntimeInformationOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetRuntimeInformationOutput`](crate::operation::operation::GetRuntimeInformationOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetRuntimeInformationOutputBuilder {
+    pub(crate) language: ::std::string::String,
+    pub(crate) runtime: ::std::string::String,
+}
+impl GetRuntimeInformationOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.language = input.into();
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_language(mut self, input: ::std::string::String) -> Self {
+        self.language = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_language(&self) -> &::std::string::String {
+        &self.language
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn runtime(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.runtime = input.into();
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_runtime(mut self, input: ::std::string::String) -> Self {
+        self.runtime = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_runtime(&self) -> &::std::string::String {
+        &self.runtime
+    }
+    /// Consumes the builder and constructs a [`GetRuntimeInformationOutput`](crate::operation::operation::GetRuntimeInformationOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_runtime_information::GetRuntimeInformationOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_runtime_information::GetRuntimeInformationOutput {
+            language: self.language,
+            runtime: self.runtime,
+        })
+    }
+}
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation/get_runtime_information/builders.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation/get_runtime_information/builders.rs
new file mode 100644
index 00000000..7f134241
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/operation/get_runtime_information/builders.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_runtime_information::_get_runtime_information_output::GetRuntimeInformationOutputBuilder;
+
+/// Fluent builder constructing a request to `GetRuntimeInformation`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetRuntimeInformationFluentBuilder {
+    client: crate::Client,
+}
+impl GetRuntimeInformationFluentBuilder {
+    /// Creates a new `GetRuntimeInformation`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+        }
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_runtime_information::GetRuntimeInformationOutput,
+        crate::operation::get_runtime_information::GetRuntimeInformationError,
+    > {
+        crate::operation::get_runtime_information::GetRuntimeInformation::send(&self.client).await
+    }
+}
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/types.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..6a061366
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/types.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `LanguageSpecificLogicConfig`
+pub mod language_specific_logic_config;
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/types/language_specific_logic_config.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/types/language_specific_logic_config.rs
new file mode 100644
index 00000000..4ace3ff2
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/types/language_specific_logic_config.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct LanguageSpecificLogicConfig {}
+
+impl LanguageSpecificLogicConfig {
+    pub fn builder() -> LanguageSpecificLogicConfigBuilder {
+        LanguageSpecificLogicConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct LanguageSpecificLogicConfigBuilder {}
+
+impl LanguageSpecificLogicConfigBuilder {
+    /// Creates a new `LanguageSpecificLogicConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {}
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<LanguageSpecificLogicConfig, ::aws_smithy_types::error::operation::BuildError>
+    {
+        ::std::result::Result::Ok(LanguageSpecificLogicConfig {})
+    }
+}
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/wrapped.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/wrapped.rs
new file mode 100644
index 00000000..b9babe5b
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/wrapped.rs
@@ -0,0 +1 @@
+pub mod client;
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/src/wrapped/client.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/src/wrapped/client.rs
new file mode 100644
index 00000000..cc29162a
--- /dev/null
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/src/wrapped/client.rs
@@ -0,0 +1,83 @@
+use tokio::runtime::Runtime;
+
+pub struct Client {
+    wrapped: crate::client::Client,
+
+    /// A `current_thread` runtime for executing operations on the
+    /// asynchronous client in a blocking manner.
+    rt: Runtime
+}
+
+impl dafny_runtime::UpcastObject<dyn crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::ILanguageSpecificLogicClient> for Client {
+  ::dafny_runtime::UpcastObjectFn!(dyn crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::ILanguageSpecificLogicClient);
+}
+
+impl dafny_runtime::UpcastObject<dyn std::any::Any> for Client {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
+
+impl Client {
+  pub fn from_conf(config: &::std::rc::Rc<
+    crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::LanguageSpecificLogicConfig,
+  >) ->
+::std::rc::Rc<crate::implementation_from_dafny::r#_Wrappers_Compile::Result<
+  ::dafny_runtime::Object<dyn crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::ILanguageSpecificLogicClient>,
+  ::std::rc::Rc<crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::Error>
+>> {
+    let rt_result = tokio::runtime::Builder::new_current_thread()
+          .enable_all()
+          .build();
+    let rt = match rt_result {
+        Ok(x) => x,
+        Err(error) => return crate::conversions::error::to_opaque_error_result(error),
+    };
+    let result = crate::client::Client::from_conf(
+      crate::conversions::language_specific_logic_config::_language_specific_logic_config::from_dafny(
+          config.clone(),
+      ),
+    );
+    match result {
+      Ok(client) =>  {
+        let wrap = crate::wrapped::client::Client {
+          wrapped: client,
+          rt
+        };
+        std::rc::Rc::new(
+          crate::implementation_from_dafny::_Wrappers_Compile::Result::Success {
+            value: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(wrap))
+          }
+        )
+      },
+      Err(error) => crate::conversions::error::to_opaque_error_result(error)
+    }
+  }
+}
+
+impl crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::ILanguageSpecificLogicClient
+    for Client
+{
+    fn GetRuntimeInformation(
+        &mut self,
+    ) -> std::rc::Rc<
+        crate::implementation_from_dafny::r#_Wrappers_Compile::Result<
+            std::rc::Rc<
+                crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::GetRuntimeInformationOutput,
+            >,
+            std::rc::Rc<crate::implementation_from_dafny::r#_language_dspecific_dlogic_dinternaldafny_dtypes::Error>,
+        >,
+    >{
+        let result = self.rt.block_on(crate::operation::get_runtime_information::GetRuntimeInformation::send(&self.wrapped));
+        match result {
+            Err(error) => ::std::rc::Rc::new(
+                crate::implementation_from_dafny::_Wrappers_Compile::Result::Failure {
+                    error: crate::conversions::get_runtime_information::to_dafny_error(error),
+                },
+            ),
+            Ok(client) => ::std::rc::Rc::new(
+                crate::implementation_from_dafny::_Wrappers_Compile::Result::Success {
+                    value: crate::conversions::get_runtime_information::_get_runtime_information_output::to_dafny(client),
+                },
+            ),
+        }
+    }
+}
diff --git b/TestModels/LanguageSpecificLogic/runtimes/rust/tests/tests_from_dafny/mod.rs a/TestModels/LanguageSpecificLogic/runtimes/rust/tests/tests_from_dafny/mod.rs
index 4a50adf2..0f4f4f9f 100644
--- b/TestModels/LanguageSpecificLogic/runtimes/rust/tests/tests_from_dafny/mod.rs
+++ a/TestModels/LanguageSpecificLogic/runtimes/rust/tests/tests_from_dafny/mod.rs
@@ -1,6 +1,10 @@
 #![allow(warnings, unconditional_panic)]
 #![allow(nonstandard_style)]
 
+use language_specific_logic::implementation_from_dafny::*;
+use language_specific_logic::*;
+mod _wrapped;
+
 pub mod r#_language_dspecific_dlogic_dinternaldafny_dwrapped {
     pub struct _default {}
 
@@ -80,10 +84,6 @@ pub mod r#_LanguageSpecificLogicImplTest_Compile {
                 "{}",
                 ::dafny_runtime::DafnyPrintWrapper(output.read().value().runtime())
             );
-            print!(
-                "{}",
-                ::dafny_runtime::DafnyPrintWrapper(&::dafny_runtime::string_utf16_of("\n"))
-            );
             return ();
         }
         pub fn AllLanguageTests() -> () {
