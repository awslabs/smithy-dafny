# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import Any, Dict, Optional


class ExternV2MustErrorInput:
    value: Optional[str]
    def __init__(
        self,
        *,
        value: Optional[str] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the ExternV2MustErrorInput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "ExternV2MustErrorInput":
        """Creates a ExternV2MustErrorInput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return ExternV2MustErrorInput(**kwargs)

    def __repr__(self) -> str:
        result = "ExternV2MustErrorInput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, ExternV2MustErrorInput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class ExternV2MustErrorOutput:
    value: Optional[str]
    def __init__(
        self,
        *,
        value: Optional[str] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the ExternV2MustErrorOutput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "ExternV2MustErrorOutput":
        """Creates a ExternV2MustErrorOutput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return ExternV2MustErrorOutput(**kwargs)

    def __repr__(self) -> str:
        result = "ExternV2MustErrorOutput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, ExternV2MustErrorOutput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class GetExternV2Input:
    blob_value: Optional[bytes | bytearray]
    boolean_value: Optional[bool]
    string_value: Optional[str]
    integer_value: Optional[int]
    long_value: Optional[int]
    def __init__(
        self,
        *,
        blob_value: Optional[bytes | bytearray] = None,
        boolean_value: Optional[bool] = None,
        string_value: Optional[str] = None,
        integer_value: Optional[int] = None,
        long_value: Optional[int] = None,
    ):
        self.blob_value = blob_value
        self.boolean_value = boolean_value
        self.string_value = string_value
        self.integer_value = integer_value
        self.long_value = long_value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetExternV2Input to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.blob_value is not None:
            d["blobValue"] = self.blob_value

        if self.boolean_value is not None:
            d["booleanValue"] = self.boolean_value

        if self.string_value is not None:
            d["stringValue"] = self.string_value

        if self.integer_value is not None:
            d["integerValue"] = self.integer_value

        if self.long_value is not None:
            d["longValue"] = self.long_value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetExternV2Input":
        """Creates a GetExternV2Input from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "blobValue" in d:
            kwargs["blob_value"] = d["blobValue"]

        if "booleanValue" in d:
            kwargs["boolean_value"] = d["booleanValue"]

        if "stringValue" in d:
            kwargs["string_value"] = d["stringValue"]

        if "integerValue" in d:
            kwargs["integer_value"] = d["integerValue"]

        if "longValue" in d:
            kwargs["long_value"] = d["longValue"]

        return GetExternV2Input(**kwargs)

    def __repr__(self) -> str:
        result = "GetExternV2Input("
        if self.blob_value is not None:
            result += f"blob_value={repr(self.blob_value)}, "

        if self.boolean_value is not None:
            result += f"boolean_value={repr(self.boolean_value)}, "

        if self.string_value is not None:
            result += f"string_value={repr(self.string_value)}, "

        if self.integer_value is not None:
            result += f"integer_value={repr(self.integer_value)}, "

        if self.long_value is not None:
            result += f"long_value={repr(self.long_value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetExternV2Input):
            return False
        attributes: list[str] = ['blob_value','boolean_value','string_value','integer_value','long_value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class GetExternV2Output:
    blob_value: Optional[bytes | bytearray]
    boolean_value: Optional[bool]
    string_value: Optional[str]
    integer_value: Optional[int]
    long_value: Optional[int]
    def __init__(
        self,
        *,
        blob_value: Optional[bytes | bytearray] = None,
        boolean_value: Optional[bool] = None,
        string_value: Optional[str] = None,
        integer_value: Optional[int] = None,
        long_value: Optional[int] = None,
    ):
        self.blob_value = blob_value
        self.boolean_value = boolean_value
        self.string_value = string_value
        self.integer_value = integer_value
        self.long_value = long_value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetExternV2Output to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.blob_value is not None:
            d["blobValue"] = self.blob_value

        if self.boolean_value is not None:
            d["booleanValue"] = self.boolean_value

        if self.string_value is not None:
            d["stringValue"] = self.string_value

        if self.integer_value is not None:
            d["integerValue"] = self.integer_value

        if self.long_value is not None:
            d["longValue"] = self.long_value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetExternV2Output":
        """Creates a GetExternV2Output from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "blobValue" in d:
            kwargs["blob_value"] = d["blobValue"]

        if "booleanValue" in d:
            kwargs["boolean_value"] = d["booleanValue"]

        if "stringValue" in d:
            kwargs["string_value"] = d["stringValue"]

        if "integerValue" in d:
            kwargs["integer_value"] = d["integerValue"]

        if "longValue" in d:
            kwargs["long_value"] = d["longValue"]

        return GetExternV2Output(**kwargs)

    def __repr__(self) -> str:
        result = "GetExternV2Output("
        if self.blob_value is not None:
            result += f"blob_value={repr(self.blob_value)}, "

        if self.boolean_value is not None:
            result += f"boolean_value={repr(self.boolean_value)}, "

        if self.string_value is not None:
            result += f"string_value={repr(self.string_value)}, "

        if self.integer_value is not None:
            result += f"integer_value={repr(self.integer_value)}, "

        if self.long_value is not None:
            result += f"long_value={repr(self.long_value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetExternV2Output):
            return False
        attributes: list[str] = ['blob_value','boolean_value','string_value','integer_value','long_value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class UseClassExternV2Input:
    value: Optional[str]
    def __init__(
        self,
        *,
        value: Optional[str] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the UseClassExternV2Input to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "UseClassExternV2Input":
        """Creates a UseClassExternV2Input from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return UseClassExternV2Input(**kwargs)

    def __repr__(self) -> str:
        result = "UseClassExternV2Input("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, UseClassExternV2Input):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class UseClassExternV2Output:
    value: Optional[str]
    def __init__(
        self,
        *,
        value: Optional[str] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the UseClassExternV2Output to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "UseClassExternV2Output":
        """Creates a UseClassExternV2Output from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return UseClassExternV2Output(**kwargs)

    def __repr__(self) -> str:
        result = "UseClassExternV2Output("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, UseClassExternV2Output):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class Unit:
    pass
