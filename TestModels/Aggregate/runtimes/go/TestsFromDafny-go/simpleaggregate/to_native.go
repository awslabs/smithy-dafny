// Code generated by smithy-go-codegen DO NOT EDIT.

package simpleaggregate

import (
	"github.com/Smithy-dafny/TestModels/Aggregate/simpleaggregateinternaldafnytypes"
	"github.com/Smithy-dafny/TestModels/Aggregate/simpleaggregatetypes"
	"github.com/dafny-lang/DafnyRuntimeGo/dafny"
)

func GetAggregateInput_FromDafny(dafnyInput simpleaggregateinternaldafnytypes.GetAggregateInput) simpleaggregatetypes.GetAggregateInput {

	return simpleaggregatetypes.GetAggregateInput{SimpleStringList: simple_aggregate_GetAggregateInput_simpleStringList_FromDafny(dafnyInput.Dtor_simpleStringList().UnwrapOr(nil)), StructureList: simple_aggregate_GetAggregateInput_structureList_FromDafny(dafnyInput.Dtor_structureList().UnwrapOr(nil)), SimpleStringMap: simple_aggregate_GetAggregateInput_simpleStringMap_FromDafny(dafnyInput.Dtor_simpleStringMap().UnwrapOr(nil)), SimpleIntegerMap: simple_aggregate_GetAggregateInput_simpleIntegerMap_FromDafny(dafnyInput.Dtor_simpleIntegerMap().UnwrapOr(nil)), NestedStructure: simple_aggregate_GetAggregateInput_nestedStructure_FromDafny(dafnyInput.Dtor_nestedStructure().UnwrapOr(nil).(simpleaggregateinternaldafnytypes.NestedStructure))}

}

func GetAggregateOutput_FromDafny(dafnyOutput simpleaggregateinternaldafnytypes.GetAggregateOutput) simpleaggregatetypes.GetAggregateOutput {

	return simpleaggregatetypes.GetAggregateOutput{SimpleStringList: simple_aggregate_GetAggregateOutput_simpleStringList_FromDafny(dafnyOutput.Dtor_simpleStringList().UnwrapOr(nil)), StructureList: simple_aggregate_GetAggregateOutput_structureList_FromDafny(dafnyOutput.Dtor_structureList().UnwrapOr(nil)), SimpleStringMap: simple_aggregate_GetAggregateOutput_simpleStringMap_FromDafny(dafnyOutput.Dtor_simpleStringMap().UnwrapOr(nil)), SimpleIntegerMap: simple_aggregate_GetAggregateOutput_simpleIntegerMap_FromDafny(dafnyOutput.Dtor_simpleIntegerMap().UnwrapOr(nil)), NestedStructure: simple_aggregate_GetAggregateOutput_nestedStructure_FromDafny(dafnyOutput.Dtor_nestedStructure().UnwrapOr(nil))}

}

func CollectionOfErrors_Output_FromDafny(dafnyOutput simpleaggregateinternaldafnytypes.Error) simpleaggregatetypes.CollectionOfErrors {
	listOfErrors := dafnyOutput.Dtor_list()
	message := dafnyOutput.Dtor_message()
	t := simpleaggregatetypes.CollectionOfErrors{}
	for i := dafny.Iterate(listOfErrors); ; {
		val, ok := i()
		if !ok {
			break
		}
		err := val.(simpleaggregateinternaldafnytypes.Error)
		t.ListOfErrors = append(t.ListOfErrors, Error_FromDafny(err))

	}
	t.Message = func() string {
		var s string
		for i := dafny.Iterate(message); ; {
			val, ok := i()
			if !ok {
				return s
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()
	return t
}
func OpaqueError_Output_FromDafny(dafnyOutput simpleaggregateinternaldafnytypes.Error) simpleaggregatetypes.OpaqueError {
	return simpleaggregatetypes.OpaqueError{
		ErrObject: dafnyOutput.Dtor_obj(),
	}
}

func Error_FromDafny(err simpleaggregateinternaldafnytypes.Error) error {
	// Service Errors

	//DependentErrors

	//Unmodelled Errors
	if err.Is_CollectionOfErrors() {
		return CollectionOfErrors_Output_FromDafny(err)
	}

	return OpaqueError_Output_FromDafny(err)
}

func SimpleAggregateConfig_FromDafny(dafnyOutput simpleaggregateinternaldafnytypes.SimpleAggregateConfig) simpleaggregatetypes.SimpleAggregateConfig {
	return simpleaggregatetypes.SimpleAggregateConfig{}

}

func simple_aggregate_GetAggregateInput_structureList_FromDafny(input interface{}) []simpleaggregatetypes.StructureListElement {
	var fieldValue []simpleaggregatetypes.StructureListElement
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, simple_aggregate_StructureList_member_FromDafny(val))
	}
	return fieldValue
}
func simple_aggregate_GetAggregateOutput_simpleStringList_FromDafny(input interface{}) []string {
	var fieldValue []string
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, func() string {
			var s string
			for i := dafny.Iterate(val.(dafny.Sequence)); ; {
				val, ok := i()
				if !ok {
					return s
				} else {
					s = s + string(val.(dafny.Char))
				}
			}
		}())
	}
	return fieldValue
}
func simple_aggregate_StructureList_member_FromDafny(input interface{}) simpleaggregatetypes.StructureListElement {
	return simpleaggregatetypes.StructureListElement{StringValue: func() *string {
		var s string
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}(), IntegerValue: func() *int32 {
		var b int32
		if input == nil {
			return nil
		}
		b = input.(int32)
		return &b
	}()}
}
func simple_aggregate_NestedStructure_stringStructure_FromDafny(input interface{}) *simpleaggregatetypes.StringStructure {
	return &simpleaggregatetypes.StringStructure{Value: func() *string {
		var s string
		if input == nil {
			return nil
		}
		for i := dafny.Iterate(input); ; {
			val, ok := i()
			if !ok {
				return &[]string{s}[0]
			} else {
				s = s + string(val.(dafny.Char))
			}
		}
	}()}
}
func simple_aggregate_GetAggregateOutput_simpleStringMap_FromDafny(input interface{}) map[string]string {
	var m map[string]string = make(map[string]string)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[func() string {
			var s string
			for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
				val, ok := i()
				if !ok {
					return s
				} else {
					s = s + string(val.(dafny.Char))
				}
			}
		}()] = func() string {
			var s string
			for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
				val, ok := i()
				if !ok {
					return s
				} else {
					s = s + string(val.(dafny.Char))
				}
			}
		}()
	}
	return m

}
func simple_aggregate_GetAggregateInput_simpleStringMap_FromDafny(input interface{}) map[string]string {
	var m map[string]string = make(map[string]string)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[func() string {
			var s string
			for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
				val, ok := i()
				if !ok {
					return s
				} else {
					s = s + string(val.(dafny.Char))
				}
			}
		}()] = func() string {
			var s string
			for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(1)).(dafny.Sequence)); ; {
				val, ok := i()
				if !ok {
					return s
				} else {
					s = s + string(val.(dafny.Char))
				}
			}
		}()
	}
	return m

}
func simple_aggregate_GetAggregateInput_nestedStructure_FromDafny(input simpleaggregateinternaldafnytypes.NestedStructure) *simpleaggregatetypes.NestedStructure {
	return &simpleaggregatetypes.NestedStructure{StringStructure: simple_aggregate_NestedStructure_stringStructure_FromDafny(input.Dtor_stringStructure().UnwrapOr(nil).(simpleaggregateinternaldafnytypes.StringStructure))}
}
func simple_aggregate_GetAggregateInput_simpleIntegerMap_FromDafny(input interface{}) map[string]int32 {
	var m map[string]int32 = make(map[string]int32)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[func() string {
			var s string
			for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
				val, ok := i()
				if !ok {
					return s
				} else {
					s = s + string(val.(dafny.Char))
				}
			}
		}()] = func() int32 {
			var b = (*val.(dafny.Tuple).IndexInt(1)).(int32)
			return b
		}()

	}
	return m

}
func simple_aggregate_GetAggregateOutput_simpleIntegerMap_FromDafny(input interface{}) map[string]int32 {
	var m map[string]int32 = make(map[string]int32)
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Map).Items()); ; {
		val, ok := i()
		if !ok {
			break
		}
		m[func() string {
			var s string
			for i := dafny.Iterate((*val.(dafny.Tuple).IndexInt(0))); ; {
				val, ok := i()
				if !ok {
					return s
				} else {
					s = s + string(val.(dafny.Char))
				}
			}
		}()] = func() int32 {
			var b = (*val.(dafny.Tuple).IndexInt(1)).(int32)
			return b
		}()

	}
	return m

}
func simple_aggregate_GetAggregateOutput_nestedStructure_FromDafny(input interface{}) *simpleaggregatetypes.NestedStructure {
	return &simpleaggregatetypes.NestedStructure{StringStructure: simple_aggregate_NestedStructure_stringStructure_FromDafny(input.(simpleaggregateinternaldafnytypes.NestedStructure).Dtor_stringStructure().UnwrapOr(nil).(simpleaggregateinternaldafnytypes.StringStructure))}
}
func simple_aggregate_GetAggregateInput_simpleStringList_FromDafny(input interface{}) []string {
	var fieldValue []string
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, func() string {
			var s string
			for i := dafny.Iterate(val.(dafny.Sequence)); ; {
				val, ok := i()
				if !ok {
					return s
				} else {
					s = s + string(val.(dafny.Char))
				}
			}
		}())
	}
	return fieldValue
}
func simple_aggregate_GetAggregateOutput_structureList_FromDafny(input interface{}) []simpleaggregatetypes.StructureListElement {
	var fieldValue []simpleaggregatetypes.StructureListElement
	if input == nil {
		return nil
	}
	for i := dafny.Iterate(input.(dafny.Sequence)); ; {
		val, ok := i()
		if !ok {
			break
		}
		fieldValue = append(fieldValue, simple_aggregate_StructureList_member_FromDafny(val))
	}
	return fieldValue
}
