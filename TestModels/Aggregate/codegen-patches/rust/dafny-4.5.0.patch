diff --git b/TestModels/Aggregate/runtimes/rust/src/client.rs a/TestModels/Aggregate/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..96a89e4d
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/client.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::ISimpleAggregateClient>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_aggregate_config::SimpleAggregateConfig,
+    ) -> Result<Self, BuildError> {
+        // If this service had any configuration properties,
+        // they would need converting here too.
+        let inner =
+            ::simple_aggregate_dafny::_simple_daggregate_dinternaldafny::_default::SimpleAggregate(
+                &crate::conversions::simple_aggregate_config::_simple_aggregate_config::to_dafny(
+                    conf,
+                ),
+            );
+        if matches!(
+            inner.as_ref(),
+            ::simple_aggregate_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::upcast_object()(inner.Extract()),
+        })
+    }
+}
+
+mod get_aggregate;
+
+mod get_aggregate_known_value_test;
diff --git b/TestModels/Aggregate/runtimes/rust/src/client/get_aggregate.rs a/TestModels/Aggregate/runtimes/rust/src/client/get_aggregate.rs
new file mode 100644
index 00000000..a9f2e90b
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/client/get_aggregate.rs
@@ -0,0 +1,15 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetAggregate`](crate::operation::get_aggregate::builders::GetAggregateFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::get_aggregate::builders::GetAggregateFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_aggregate::builders::GetAggregateFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetAggregateOutput`](crate::operation::get_aggregate::GetAggregateOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::get_aggregate::GetAggregateOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetAggregateError>`](crate::operation::get_aggregate::GetAggregateError)
+    pub fn get_aggregate(
+        &self,
+    ) -> crate::operation::get_aggregate::builders::GetAggregateFluentBuilder {
+        crate::operation::get_aggregate::builders::GetAggregateFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/client/get_aggregate_known_value_test.rs a/TestModels/Aggregate/runtimes/rust/src/client/get_aggregate_known_value_test.rs
new file mode 100644
index 00000000..f524733e
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/client/get_aggregate_known_value_test.rs
@@ -0,0 +1,17 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetAggregateKnownValueTest`](crate::operation::get_aggregate_known_value::builders::GetAggregateKnownValueTestFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<String>>)`](crate::operation::get_aggregate_known_value::builders::GetAggregateKnownValueTestFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::get_aggregate_known_value::builders::GetAggregateKnownValueTestFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetAggregateKnownValueTestOutput`](crate::operation::get_aggregate_known_value::GetAggregateKnownValueTestOutput) with field(s):
+    ///   - [`value(Option<String>)`](crate::operation::get_aggregate_known_value::GetAggregateKnownValueTestOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetAggregateKnownValueTestError>`](crate::operation::get_aggregate_known_value::GetAggregateKnownValueTestError)
+    pub fn get_aggregate_known_value_test(
+        &self,
+    ) -> crate::operation::get_aggregate_known_value_test::builders::GetAggregateKnownValueTestFluentBuilder{
+        crate::operation::get_aggregate_known_value_test::builders::GetAggregateKnownValueTestFluentBuilder::new(
+            self.clone(),
+        )
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions.rs a/TestModels/Aggregate/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..b5acb2be
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions.rs
@@ -0,0 +1,10 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_aggregate;
+
+pub mod get_aggregate_known_value_test;
+
+pub mod simple_aggregate_config;
+
+pub mod nested_structure;
+pub mod string_structure;
+pub mod structure_list_element;
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate.rs
new file mode 100644
index 00000000..8db680b5
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_aggregate::GetAggregateError,
+) -> ::std::rc::Rc<::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::Error> {
+    match value {
+    crate::operation::get_aggregate::GetAggregateError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_aggregate::GetAggregateError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_aggregate::GetAggregateError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_aggregate::GetAggregateError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_aggregate_input;
+
+pub mod _get_aggregate_output;
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate/_get_aggregate_input.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate/_get_aggregate_input.rs
new file mode 100644
index 00000000..0cac86d0
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate/_get_aggregate_input.rs
@@ -0,0 +1,121 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::operation::get_aggregate::GetAggregateInput,
+) -> ::std::rc::Rc<
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateInput,
+> {
+    ::std::rc::Rc::new(::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateInput::GetAggregateInput {
+        simpleStringList:
+        ::std::rc::Rc::new(
+            match value.simple_string_list() {
+                Some(val) =>
+                    simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some {
+                        value : ::dafny_runtime::Sequence::from_array(
+                            &val.iter().map(|x|
+                                dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&x))
+                                .collect()
+                        )
+                    },
+                None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None{}
+            }
+        ),
+
+        structureList:
+        ::std::rc::Rc::new(
+            match value.structure_list() {
+                Some(val) =>
+                    simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some {
+                        value : ::dafny_runtime::Sequence::from_array(
+                            &val.iter().map(|x|
+                                crate::conversions::structure_list_element::to_dafny(x.clone()))
+                                .collect()
+                        )
+                    },
+                None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None{}
+            }
+        ),
+
+        simpleStringMap: ::std::rc::Rc::new(match value.simple_string_map() {
+            Some(x) => simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value :
+                ::dafny_runtime::dafny_runtime_conversions::hashmap_to_dafny_map(x,
+                    |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&k),
+                    |v| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&v),
+                )
+            },
+            None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None {}
+        }),
+        simpleIntegerMap: ::std::rc::Rc::new(match value.simple_integer_map() {
+            Some(x) => simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value :
+                ::dafny_runtime::dafny_runtime_conversions::hashmap_to_dafny_map(x,
+                    |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&k),
+                    |v| *v,
+                )
+            },
+            None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None {}
+        }),
+        nestedStructure: crate::conversions::nested_structure::option_to_dafny(value.nested_structure())
+    })
+}
+
+// _get_aggregate_input.rs
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateInput,
+    >,
+) -> crate::operation::get_aggregate::GetAggregateInput {
+    match &*dafny_value {
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateInput::GetAggregateInput {
+            simpleStringList,
+            structureList,
+            simpleStringMap,
+            simpleIntegerMap,
+            nestedStructure,
+        } =>
+        crate::operation::get_aggregate::GetAggregateInput {
+            simple_string_list : match  (&**simpleStringList).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(&value, |x|
+                            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&x))
+                    ),
+                _ => None
+            },
+            structure_list : match (&**structureList).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(&value, |x|
+                            crate::conversions::structure_list_element::plain_from_dafny(&x))
+                    ),
+                _ => None
+            },
+
+            simple_string_map : match (&**simpleStringMap).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_map_to_hashmap(&value,
+                            |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&k),
+                            |v| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&v),
+                        )
+                    ),
+                _ => None
+            },
+
+            simple_integer_map : match (&**simpleIntegerMap).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_map_to_hashmap(&value,
+                            |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&k),
+                            |v| *v,
+                        )
+                    ),
+                _ => None
+            },
+
+            nested_structure: crate::conversions::nested_structure::option_from_dafny(nestedStructure.clone())
+        }
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate/_get_aggregate_output.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate/_get_aggregate_output.rs
new file mode 100644
index 00000000..0a0bee21
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate/_get_aggregate_output.rs
@@ -0,0 +1,121 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::operation::get_aggregate::GetAggregateOutput,
+) -> ::std::rc::Rc<
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateOutput,
+> {
+    ::std::rc::Rc::new(::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateOutput::GetAggregateOutput {
+        simpleStringList:
+        ::std::rc::Rc::new(
+            match value.simple_string_list() {
+                Some(val) =>
+                    simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some {
+                        value : ::dafny_runtime::Sequence::from_array(
+                            &val.iter().map(|x|
+                                dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&x))
+                                .collect()
+                        )
+                    },
+                None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None{}
+            }
+        ),
+
+        structureList:
+        ::std::rc::Rc::new(
+            match value.structure_list() {
+                Some(val) =>
+                    simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some {
+                        value : ::dafny_runtime::Sequence::from_array(
+                            &val.iter().map(|x|
+                                crate::conversions::structure_list_element::to_dafny(x.clone()))
+                                .collect()
+                        )
+                    },
+                None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None{}
+            }
+        ),
+
+        simpleStringMap: ::std::rc::Rc::new(match value.simple_string_map() {
+            Some(x) => simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value :
+                ::dafny_runtime::dafny_runtime_conversions::hashmap_to_dafny_map(x,
+                    |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&k),
+                    |v| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&v),
+                )
+            },
+            None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None {}
+        }),
+        simpleIntegerMap: ::std::rc::Rc::new(match value.simple_integer_map() {
+            Some(x) => simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value :
+                ::dafny_runtime::dafny_runtime_conversions::hashmap_to_dafny_map(x,
+                    |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&k),
+                    |v| *v,
+                )
+            },
+            None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None {}
+        }),
+        nestedStructure: crate::conversions::nested_structure::option_to_dafny(value.nested_structure())
+    })
+}
+
+// _get_aggregate_output.rs
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateOutput,
+    >,
+) -> crate::operation::get_aggregate::GetAggregateOutput {
+    match &*dafny_value {
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateOutput::GetAggregateOutput {
+            simpleStringList,
+            structureList,
+            simpleStringMap,
+            simpleIntegerMap,
+            nestedStructure,
+        } =>
+        crate::operation::get_aggregate::GetAggregateOutput {
+            simple_string_list : match  (&**simpleStringList).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(&value, |x|
+                            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&x))
+                    ),
+                _ => None
+            },
+            structure_list : match (&**structureList).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(&value, |x|
+                            crate::conversions::structure_list_element::plain_from_dafny(&x))
+                    ),
+                _ => None
+            },
+
+            simple_string_map : match (&**simpleStringMap).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_map_to_hashmap(&value,
+                            |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&k),
+                            |v| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&v),
+                        )
+                    ),
+                _ => None
+            },
+
+            simple_integer_map : match (&**simpleIntegerMap).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_map_to_hashmap(&value,
+                            |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&k),
+                            |v| *v,
+                        )
+                    ),
+                _ => None
+            },
+
+            nested_structure: crate::conversions::nested_structure::option_from_dafny(nestedStructure.clone())
+        }
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate_known_value_test.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate_known_value_test.rs
new file mode 100644
index 00000000..a128f451
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate_known_value_test.rs
@@ -0,0 +1,39 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestError,
+) -> ::std::rc::Rc<::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::Error> {
+    match value {
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestError::Unhandled(
+            unhandled,
+        ) => ::std::rc::Rc::new(
+            ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::Error::Opaque {
+                obj: ::dafny_runtime::upcast_object()(
+                    ::dafny_runtime::object::new(unhandled),
+                ),
+            },
+        ),
+    }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_aggregate_known_value_test_input;
+
+pub mod _get_aggregate_known_value_test_output;
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate_known_value_test/_get_aggregate_known_value_test_input.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate_known_value_test/_get_aggregate_known_value_test_input.rs
new file mode 100644
index 00000000..4e7574c3
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate_known_value_test/_get_aggregate_known_value_test_input.rs
@@ -0,0 +1,121 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestInput,
+) -> ::std::rc::Rc<
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateInput,
+> {
+    ::std::rc::Rc::new(::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateInput::GetAggregateInput {
+        simpleStringList:
+        ::std::rc::Rc::new(
+            match value.simple_string_list() {
+                Some(val) =>
+                    simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some {
+                        value : ::dafny_runtime::Sequence::from_array(
+                            &val.iter().map(|x|
+                                dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&x))
+                                .collect()
+                        )
+                    },
+                None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None{}
+            }
+        ),
+
+        structureList:
+        ::std::rc::Rc::new(
+            match value.structure_list() {
+                Some(val) =>
+                    simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some {
+                        value : ::dafny_runtime::Sequence::from_array(
+                            &val.iter().map(|x|
+                                crate::conversions::structure_list_element::to_dafny(x.clone()))
+                                .collect()
+                        )
+                    },
+                None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None{}
+            }
+        ),
+
+        simpleStringMap: ::std::rc::Rc::new(match value.simple_string_map() {
+            Some(x) => simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value :
+                ::dafny_runtime::dafny_runtime_conversions::hashmap_to_dafny_map(x,
+                    |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&k),
+                    |v| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&v),
+                )
+            },
+            None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None {}
+        }),
+        simpleIntegerMap: ::std::rc::Rc::new(match value.simple_integer_map() {
+            Some(x) => simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value :
+                ::dafny_runtime::dafny_runtime_conversions::hashmap_to_dafny_map(x,
+                    |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&k),
+                    |v| *v,
+                )
+            },
+            None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None {}
+        }),
+        nestedStructure: crate::conversions::nested_structure::option_to_dafny(value.nested_structure())
+    })
+}
+
+// _get_aggregate_input.rs
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateInput,
+    >,
+) -> crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestInput {
+    match &*dafny_value {
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateInput::GetAggregateInput {
+            simpleStringList,
+            structureList,
+            simpleStringMap,
+            simpleIntegerMap,
+            nestedStructure,
+        } =>
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestInput {
+            simple_string_list : match  (&**simpleStringList).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(&value, |x|
+                            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&x))
+                    ),
+                _ => None
+            },
+            structure_list : match (&**structureList).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(&value, |x|
+                            crate::conversions::structure_list_element::plain_from_dafny(&x))
+                    ),
+                _ => None
+            },
+
+            simple_string_map : match (&**simpleStringMap).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_map_to_hashmap(&value,
+                            |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&k),
+                            |v| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&v),
+                        )
+                    ),
+                _ => None
+            },
+
+            simple_integer_map : match (&**simpleIntegerMap).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_map_to_hashmap(&value,
+                            |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&k),
+                            |v| *v,
+                        )
+                    ),
+                _ => None
+            },
+
+            nested_structure: crate::conversions::nested_structure::option_from_dafny(nestedStructure.clone())
+        }
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate_known_value_test/_get_aggregate_known_value_test_output.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate_known_value_test/_get_aggregate_known_value_test_output.rs
new file mode 100644
index 00000000..08898176
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/get_aggregate_known_value_test/_get_aggregate_known_value_test_output.rs
@@ -0,0 +1,121 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput,
+) -> ::std::rc::Rc<
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateOutput,
+> {
+    ::std::rc::Rc::new(::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateOutput::GetAggregateOutput {
+        simpleStringList:
+        ::std::rc::Rc::new(
+            match value.simple_string_list() {
+                Some(val) =>
+                    simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some {
+                        value : ::dafny_runtime::Sequence::from_array(
+                            &val.iter().map(|x|
+                                dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&x))
+                                .collect()
+                        )
+                    },
+                None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None{}
+            }
+        ),
+
+        structureList:
+        ::std::rc::Rc::new(
+            match value.structure_list() {
+                Some(val) =>
+                    simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some {
+                        value : ::dafny_runtime::Sequence::from_array(
+                            &val.iter().map(|x|
+                                crate::conversions::structure_list_element::to_dafny(x.clone()))
+                                .collect()
+                        )
+                    },
+                None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None{}
+            }
+        ),
+
+        simpleStringMap: ::std::rc::Rc::new(match value.simple_string_map() {
+            Some(x) => simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value :
+                ::dafny_runtime::dafny_runtime_conversions::hashmap_to_dafny_map(x,
+                    |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&k),
+                    |v| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&v),
+                )
+            },
+            None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None {}
+        }),
+        simpleIntegerMap: ::std::rc::Rc::new(match value.simple_integer_map() {
+            Some(x) => simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value :
+                ::dafny_runtime::dafny_runtime_conversions::hashmap_to_dafny_map(x,
+                    |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&k),
+                    |v| *v,
+                )
+            },
+            None => simple_aggregate_dafny::r#_Wrappers_Compile::Option::None {}
+        }),
+        nestedStructure: crate::conversions::nested_structure::option_to_dafny(value.nested_structure())
+    })
+}
+
+// _get_aggregate_known_value_test_output.rs
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateOutput,
+    >,
+) -> crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput {
+    match &*dafny_value {
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::GetAggregateOutput::GetAggregateOutput {
+            simpleStringList,
+            structureList,
+            simpleStringMap,
+            simpleIntegerMap,
+            nestedStructure,
+        } =>
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput {
+            simple_string_list : match  (&**simpleStringList).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(&value, |x|
+                            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&x))
+                    ),
+                _ => None
+            },
+            structure_list : match (&**structureList).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(&value, |x|
+                            crate::conversions::structure_list_element::plain_from_dafny(&x))
+                    ),
+                _ => None
+            },
+
+            simple_string_map : match (&**simpleStringMap).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_map_to_hashmap(&value,
+                            |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&k),
+                            |v| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&v),
+                        )
+                    ),
+                _ => None
+            },
+
+            simple_integer_map : match (&**simpleIntegerMap).as_ref() {
+                simple_aggregate_dafny::r#_Wrappers_Compile::Option::Some { value } =>
+                    Some(
+                        ::dafny_runtime::dafny_runtime_conversions::dafny_map_to_hashmap(&value,
+                            |k| dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&k),
+                            |v| *v,
+                        )
+                    ),
+                _ => None
+            },
+
+            nested_structure: crate::conversions::nested_structure::option_from_dafny(nestedStructure.clone())
+        }
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/nested_structure.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/nested_structure.rs
new file mode 100644
index 00000000..a92c06f3
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/nested_structure.rs
@@ -0,0 +1,81 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::types::NestedStructure,
+) -> ::std::rc::Rc<
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::NestedStructure,
+> {
+    ::std::rc::Rc::new(::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::NestedStructure::NestedStructure {
+    stringStructure: crate::conversions::string_structure::option_to_dafny(value.string_structure),
+})
+}
+
+pub fn to_dafny_plain(
+    value: &crate::types::NestedStructure,
+) -> ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::NestedStructure {
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::NestedStructure::NestedStructure {
+  stringStructure: crate::conversions::string_structure::option_to_dafny(value.string_structure.clone()),
+}
+}
+
+pub fn option_to_dafny(
+    value: Option<&crate::types::NestedStructure>,
+) -> ::std::rc::Rc<
+    simple_aggregate_dafny::_Wrappers_Compile::Option<
+        ::std::rc::Rc<
+            ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::NestedStructure,
+        >,
+    >,
+> {
+    let inner = match value {
+        None => simple_aggregate_dafny::_Wrappers_Compile::Option::None {},
+        Some(x) => simple_aggregate_dafny::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(to_dafny_plain(x)),
+        },
+    };
+    ::std::rc::Rc::new(inner)
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::NestedStructure,
+    >,
+) -> crate::types::NestedStructure {
+    match &*dafny_value {
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::NestedStructure::NestedStructure {
+      stringStructure,
+    } =>
+    crate::types::NestedStructure {
+      string_structure: crate::conversions::string_structure::option_from_dafny(stringStructure.clone()),
+    }
+  }
+}
+
+#[allow(dead_code)]
+pub fn plain_from_dafny(
+    dafny_value: &::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::NestedStructure,
+) -> crate::types::NestedStructure {
+    match dafny_value {
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::NestedStructure::NestedStructure {
+      stringStructure,
+    } =>
+    crate::types::NestedStructure {
+      string_structure: crate::conversions::string_structure::option_from_dafny(stringStructure.clone()),
+    }
+  }
+}
+
+#[allow(dead_code)]
+pub fn option_from_dafny(
+    dafny_value: ::std::rc::Rc<simple_aggregate_dafny::_Wrappers_Compile::Option<::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::NestedStructure,
+    >>>,
+) -> Option<crate::types::NestedStructure> {
+    match &*dafny_value {
+        simple_aggregate_dafny::_Wrappers_Compile::Option::Some { value } => {
+            Some(plain_from_dafny(value))
+        }
+        _ => None,
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/simple_aggregate_config.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/simple_aggregate_config.rs
new file mode 100644
index 00000000..177a7b2f
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/simple_aggregate_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_aggregate_config;
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/simple_aggregate_config/_simple_aggregate_config.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/simple_aggregate_config/_simple_aggregate_config.rs
new file mode 100644
index 00000000..c9653e40
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/simple_aggregate_config/_simple_aggregate_config.rs
@@ -0,0 +1,21 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[allow(unused_variables)]
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::types::simple_aggregate_config::SimpleAggregateConfig,
+) -> ::std::rc::Rc<
+    ::simple_aggregate_dafny::_simple_daggregate_dinternaldafny_dtypes::SimpleAggregateConfig,
+> {
+    ::std::rc::Rc::new(::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::SimpleAggregateConfig::SimpleAggregateConfig {})
+}
+
+#[allow(unused_variables)]
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::SimpleAggregateConfig,
+    >,
+) -> crate::types::simple_aggregate_config::SimpleAggregateConfig {
+    crate::types::simple_aggregate_config::SimpleAggregateConfig {}
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/string_structure.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/string_structure.rs
new file mode 100644
index 00000000..38e264c4
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/string_structure.rs
@@ -0,0 +1,74 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::types::StringStructure,
+) -> ::std::rc::Rc<
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StringStructure,
+> {
+    ::std::rc::Rc::new(::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StringStructure::StringStructure {
+  value: dafny_standard_library::conversion::ostring_to_dafny(&value.value),
+})
+}
+
+pub fn to_dafny_plain(
+    value: crate::types::StringStructure,
+) -> ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StringStructure {
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StringStructure::StringStructure {
+  value: dafny_standard_library::conversion::ostring_to_dafny(&value.value),
+}
+}
+
+pub fn option_to_dafny(
+    value: Option<crate::types::StringStructure>,
+) -> ::std::rc::Rc<
+    simple_aggregate_dafny::_Wrappers_Compile::Option<
+        ::std::rc::Rc<
+            ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StringStructure,
+        >,
+    >,
+> {
+    let inner = match value {
+        None => simple_aggregate_dafny::_Wrappers_Compile::Option::None {},
+        Some(x) => simple_aggregate_dafny::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(to_dafny_plain(x)),
+        },
+    };
+    ::std::rc::Rc::new(inner)
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StringStructure,
+    >,
+) -> crate::types::StringStructure {
+    plain_from_dafny(&*dafny_value)
+}
+
+#[allow(dead_code)]
+pub fn plain_from_dafny(
+    dafny_value : &::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StringStructure,
+) -> crate::types::StringStructure {
+    match dafny_value {
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StringStructure::StringStructure {
+      value,
+    } =>
+    crate::types::StringStructure {
+      value: dafny_standard_library::conversion::ostring_from_dafny(value.clone()),
+    }
+}
+}
+
+#[allow(dead_code)]
+pub fn option_from_dafny(
+    dafny_value: ::std::rc::Rc<simple_aggregate_dafny::_Wrappers_Compile::Option<::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StringStructure,
+    >>>,
+) -> Option<crate::types::StringStructure> {
+    match &*dafny_value {
+        simple_aggregate_dafny::_Wrappers_Compile::Option::Some { value } => {
+            Some(plain_from_dafny(value))
+        }
+        _ => None,
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/conversions/structure_list_element.rs a/TestModels/Aggregate/runtimes/rust/src/conversions/structure_list_element.rs
new file mode 100644
index 00000000..c3c0da81
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/conversions/structure_list_element.rs
@@ -0,0 +1,78 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::types::StructureListElement,
+) -> ::std::rc::Rc<
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StructureListElement,
+> {
+    ::std::rc::Rc::new(::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StructureListElement::StructureListElement {
+  stringValue: dafny_standard_library::conversion::ostring_to_dafny(&value.string_value),
+  integerValue: dafny_standard_library::conversion::oint_to_dafny(value.integer_value),
+})
+}
+
+#[allow(dead_code)]
+pub fn to_dafny_plain(
+    value: crate::types::StructureListElement,
+) -> ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StructureListElement {
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StructureListElement::StructureListElement {
+  stringValue: dafny_standard_library::conversion::ostring_to_dafny(&value.string_value),
+  integerValue: dafny_standard_library::conversion::oint_to_dafny(value.integer_value),
+}
+}
+
+#[allow(dead_code)]
+pub fn option_to_dafny(
+  value: Option<crate::types::StructureListElement>,
+) -> ::std::rc::Rc<simple_aggregate_dafny::_Wrappers_Compile::Option<::std::rc::Rc<
+  ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StructureListElement,
+>>>{
+    let inner = match value {
+        None => simple_aggregate_dafny::_Wrappers_Compile::Option::None {},
+        Some(x) => simple_aggregate_dafny::_Wrappers_Compile::Option::Some {
+            value: ::std::rc::Rc::new(to_dafny_plain(x)),
+        },
+    };
+    ::std::rc::Rc::new(inner)
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StructureListElement,
+    >,
+) -> crate::types::StructureListElement {
+    plain_from_dafny(&*dafny_value)
+}
+
+#[allow(dead_code)]
+pub fn plain_from_dafny(
+    dafny_value : &::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StructureListElement,
+) -> crate::types::StructureListElement {
+    match dafny_value {
+    ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StructureListElement::StructureListElement {
+      stringValue,
+      integerValue,
+    } =>
+    crate::types::StructureListElement {
+      string_value: dafny_standard_library::conversion::ostring_from_dafny(stringValue.clone()),
+      integer_value: dafny_standard_library::conversion::oint_from_dafny(integerValue.clone()),
+    }
+}
+}
+
+#[allow(dead_code)]
+pub fn option_from_dafny(
+    dafny_value: ::std::rc::Rc<simple_aggregate_dafny::_Wrappers_Compile::Option<::std::rc::Rc<
+        ::simple_aggregate_dafny::r#_simple_daggregate_dinternaldafny_dtypes::StructureListElement,
+    >>>,
+) -> Option<crate::types::StructureListElement> {
+    match &*dafny_value {
+        simple_aggregate_dafny::_Wrappers_Compile::Option::Some { value } => {
+            Some(plain_from_dafny(value))
+        }
+        _ => None,
+    }
+}
+
+// structure_list_element.rs
diff --git b/TestModels/Aggregate/runtimes/rust/src/error.rs a/TestModels/Aggregate/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/Aggregate/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/Aggregate/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..cce22d1c
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+
+impl ::dafny_runtime::UpcastObject<dyn ::std::any::Any> for Unhandled {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/lib.rs a/TestModels/Aggregate/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..89dacaff
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/lib.rs
@@ -0,0 +1,17 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+pub use types::simple_aggregate_config::SimpleAggregateConfig;
diff --git b/TestModels/Aggregate/runtimes/rust/src/operation.rs a/TestModels/Aggregate/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..4806430e
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/operation.rs
@@ -0,0 +1,7 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetAggregate` operation.
+pub mod get_aggregate;
+
+/// Types for the `GetAggregateKnownValueTest` operation.
+pub mod get_aggregate_known_value_test;
diff --git b/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate.rs a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate.rs
new file mode 100644
index 00000000..0e21604e
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate.rs
@@ -0,0 +1,146 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetAggregate`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetAggregate;
+impl GetAggregate {
+    /// Creates a new `GetAggregate`
+    pub fn new() -> Self {
+        Self
+    }
+
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_aggregate::GetAggregateInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_aggregate::GetAggregateOutput,
+        crate::operation::get_aggregate::GetAggregateError,
+    > {
+        let inner_input = crate::conversions::get_aggregate::_get_aggregate_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetAggregate(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_aggregate_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_aggregate::_get_aggregate_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_aggregate::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetAggregateError` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetAggregateError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetAggregateError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetAggregateError {
+    /// Creates the `GetAggregateError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetAggregateError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetAggregateError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetAggregateError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetAggregateError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetAggregateError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetAggregateError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_aggregate::_get_aggregate_output::GetAggregateOutput;
+
+pub use crate::operation::get_aggregate::_get_aggregate_input::GetAggregateInput;
+
+mod _get_aggregate_input;
+
+mod _get_aggregate_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate/_get_aggregate_input.rs a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate/_get_aggregate_input.rs
new file mode 100644
index 00000000..6b694dbb
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate/_get_aggregate_input.rs
@@ -0,0 +1,217 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetAggregateInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub structure_list: ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_string_map: ::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    >,
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_integer_map:
+        ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub nested_structure: ::std::option::Option<crate::types::NestedStructure>,
+}
+impl GetAggregateInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
+        &self.simple_string_list
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn structure_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>> {
+        &self.structure_list
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_map(
+        &self,
+    ) -> ::std::option::Option<
+        &::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    > {
+        self.simple_string_map.as_ref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_integer_map(
+        &self,
+    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, i32>> {
+        self.simple_integer_map.as_ref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn nested_structure(&self) -> ::std::option::Option<&crate::types::NestedStructure> {
+        self.nested_structure.as_ref()
+    }
+}
+impl GetAggregateInput {
+    /// Creates a new builder-style object to manufacture [`GetAggregateInput`](crate::operation::get_aggregate::GetAggregateInput).
+    pub fn builder() -> crate::operation::get_aggregate::builders::GetAggregateInputBuilder {
+        crate::operation::get_aggregate::builders::GetAggregateInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetAggregateInput`](crate::operation::get_aggregate::GetAggregateInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetAggregateInputBuilder {
+    pub(crate) simple_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    pub(crate) structure_list:
+        ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    pub(crate) simple_string_map: ::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    >,
+    pub(crate) simple_integer_map:
+        ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    pub(crate) nested_structure: ::std::option::Option<crate::types::NestedStructure>,
+}
+impl GetAggregateInputBuilder {
+    /// Appends an item to `simple_string_list`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_list`](Self::set_simple_string_list).
+    ///
+    pub fn simple_string_list(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        let mut v = self.simple_string_list.unwrap_or_default();
+        v.push(input.into());
+        self.simple_string_list = ::std::option::Option::Some(v);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    ) -> Self {
+        self.simple_string_list = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
+        &self.simple_string_list
+    }
+    /// Appends an item to `structure_list`.
+    ///
+    /// To override the contents of this collection use [`set_structure_list`](Self::set_structure_list).
+    ///
+    pub fn structure_list(mut self, input: crate::types::StructureListElement) -> Self {
+        let mut v = self.structure_list.unwrap_or_default();
+        v.push(input);
+        self.structure_list = ::std::option::Option::Some(v);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_structure_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    ) -> Self {
+        self.structure_list = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_structure_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>> {
+        &self.structure_list
+    }
+    /// Adds a key-value pair to `simple_string_map`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_map`](Self::set_simple_string_map).
+    ///
+    pub fn simple_string_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        let mut hash_map = self.simple_string_map.unwrap_or_default();
+        hash_map.insert(k.into(), v.into());
+        self.simple_string_map = ::std::option::Option::Some(hash_map);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_map(
+        mut self,
+        input: ::std::option::Option<
+            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+        >,
+    ) -> Self {
+        self.simple_string_map = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_map(
+        &self,
+    ) -> &::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    > {
+        &self.simple_string_map
+    }
+    /// Adds a key-value pair to `simple_integer_map`.
+    ///
+    /// To override the contents of this collection use [`set_simple_integer_map`](Self::set_simple_integer_map).
+    ///
+    pub fn simple_integer_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: i32,
+    ) -> Self {
+        let mut hash_map = self.simple_integer_map.unwrap_or_default();
+        hash_map.insert(k.into(), v);
+        self.simple_integer_map = ::std::option::Option::Some(hash_map);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_integer_map(
+        mut self,
+        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    ) -> Self {
+        self.simple_integer_map = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_integer_map(
+        &self,
+    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, i32>> {
+        &self.simple_integer_map
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn nested_structure(mut self, input: crate::types::NestedStructure) -> Self {
+        self.nested_structure = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_nested_structure(
+        mut self,
+        input: ::std::option::Option<crate::types::NestedStructure>,
+    ) -> Self {
+        self.nested_structure = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_nested_structure(&self) -> &::std::option::Option<crate::types::NestedStructure> {
+        &self.nested_structure
+    }
+    /// Consumes the builder and constructs a [`GetAggregateInput`](crate::operation::get_aggregate::GetAggregateInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_aggregate::GetAggregateInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_aggregate::GetAggregateInput {
+            simple_string_list: self.simple_string_list,
+            structure_list: self.structure_list,
+            simple_string_map: self.simple_string_map,
+            simple_integer_map: self.simple_integer_map,
+            nested_structure: self.nested_structure,
+        })
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate/_get_aggregate_output.rs a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate/_get_aggregate_output.rs
new file mode 100644
index 00000000..7f97a2b6
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate/_get_aggregate_output.rs
@@ -0,0 +1,212 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetAggregateOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub structure_list: ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_string_map: ::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    >,
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_integer_map:
+        ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub nested_structure: ::std::option::Option<crate::types::NestedStructure>,
+}
+impl GetAggregateOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
+        &self.simple_string_list
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn structure_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>> {
+        &self.structure_list
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_map(
+        &self,
+    ) -> ::std::option::Option<
+        &::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    > {
+        self.simple_string_map.as_ref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_integer_map(
+        &self,
+    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, i32>> {
+        self.simple_integer_map.as_ref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn nested_structure(&self) -> ::std::option::Option<&crate::types::NestedStructure> {
+        self.nested_structure.as_ref()
+    }
+}
+impl GetAggregateOutput {
+    /// Creates a new builder-style object to manufacture [`GetAggregateOutput`](crate::operation::get_aggregate::GetAggregateOutput).
+    pub fn builder() -> crate::operation::get_aggregate::builders::GetAggregateOutputBuilder {
+        crate::operation::get_aggregate::builders::GetAggregateOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetAggregateOutput`](crate::operation::get_aggregate::GetAggregateOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetAggregateOutputBuilder {
+    pub(crate) simple_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    pub(crate) structure_list:
+        ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    pub(crate) simple_string_map: ::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    >,
+    pub(crate) simple_integer_map:
+        ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    pub(crate) nested_structure: ::std::option::Option<crate::types::NestedStructure>,
+}
+impl GetAggregateOutputBuilder {
+    /// Appends an item to `simple_string_list`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_list`](Self::set_simple_string_list).
+    ///
+    pub fn simple_string_list(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        let mut v = self.simple_string_list.unwrap_or_default();
+        v.push(input.into());
+        self.simple_string_list = ::std::option::Option::Some(v);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    ) -> Self {
+        self.simple_string_list = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
+        &self.simple_string_list
+    }
+    /// Appends an item to `structure_list`.
+    ///
+    /// To override the contents of this collection use [`set_structure_list`](Self::set_structure_list).
+    ///
+    pub fn structure_list(mut self, input: crate::types::StructureListElement) -> Self {
+        let mut v = self.structure_list.unwrap_or_default();
+        v.push(input);
+        self.structure_list = ::std::option::Option::Some(v);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_structure_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    ) -> Self {
+        self.structure_list = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_structure_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>> {
+        &self.structure_list
+    }
+    /// Adds a key-value pair to `simple_string_map`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_map`](Self::set_simple_string_map).
+    ///
+    pub fn simple_string_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        let mut hash_map = self.simple_string_map.unwrap_or_default();
+        hash_map.insert(k.into(), v.into());
+        self.simple_string_map = ::std::option::Option::Some(hash_map);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_map(
+        mut self,
+        input: ::std::option::Option<
+            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+        >,
+    ) -> Self {
+        self.simple_string_map = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_map(
+        &self,
+    ) -> &::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    > {
+        &self.simple_string_map
+    }
+    /// Adds a key-value pair to `simple_integer_map`.
+    ///
+    /// To override the contents of this collection use [`set_simple_integer_map`](Self::set_simple_integer_map).
+    ///
+    pub fn simple_integer_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: i32,
+    ) -> Self {
+        let mut hash_map = self.simple_integer_map.unwrap_or_default();
+        hash_map.insert(k.into(), v);
+        self.simple_integer_map = ::std::option::Option::Some(hash_map);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_integer_map(
+        mut self,
+        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    ) -> Self {
+        self.simple_integer_map = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_integer_map(
+        &self,
+    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, i32>> {
+        &self.simple_integer_map
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn nested_structure(mut self, input: crate::types::NestedStructure) -> Self {
+        self.nested_structure = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_nested_structure(
+        mut self,
+        input: ::std::option::Option<crate::types::NestedStructure>,
+    ) -> Self {
+        self.nested_structure = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_nested_structure(&self) -> &::std::option::Option<crate::types::NestedStructure> {
+        &self.nested_structure
+    }
+    /// Consumes the builder and constructs a [`GetAggregateOutput`](crate::operation::get_aggregate::GetAggregateOutput).
+    pub fn build(self) -> crate::operation::get_aggregate::GetAggregateOutput {
+        crate::operation::get_aggregate::GetAggregateOutput {
+            simple_string_list: self.simple_string_list,
+            structure_list: self.structure_list,
+            simple_string_map: self.simple_string_map,
+            simple_integer_map: self.simple_integer_map,
+            nested_structure: self.nested_structure,
+        }
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate/builders.rs a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate/builders.rs
new file mode 100644
index 00000000..a146e79b
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate/builders.rs
@@ -0,0 +1,189 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_aggregate::_get_aggregate_output::GetAggregateOutputBuilder;
+
+pub use crate::operation::get_aggregate::_get_aggregate_input::GetAggregateInputBuilder;
+
+impl GetAggregateInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_aggregate::GetAggregateOutput,
+        crate::operation::get_aggregate::GetAggregateError,
+    > {
+        let mut fluent_builder = client.get_aggregate();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+
+/// Fluent builder constructing a request to `GetAggregate`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetAggregateFluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::get_aggregate::builders::GetAggregateInputBuilder,
+}
+
+impl GetAggregateFluentBuilder {
+    /// Creates a new `GetAggregateFluentBuilder`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetAggregate as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_aggregate::builders::GetAggregateInputBuilder {
+        &self.inner
+    }
+
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_aggregate::GetAggregateOutput,
+        crate::operation::get_aggregate::GetAggregateError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetAggregate doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_aggregate::GetAggregateError::unhandled)?;
+        crate::operation::get_aggregate::GetAggregate::send(&self.client, input).await
+    }
+
+    ///
+    /// Appends an item to `simpleStringList`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_list`](Self::set_simple_string_list).
+    ///
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_list(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.inner = self.inner.simple_string_list(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    ) -> Self {
+        self.inner = self.inner.set_simple_string_list(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
+        self.inner.get_simple_string_list()
+    }
+    ///
+    /// Appends an item to `structureList`.
+    ///
+    /// To override the contents of this collection use [`set_structure_list`](Self::set_structure_list).
+    ///
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn structure_list(mut self, input: crate::types::StructureListElement) -> Self {
+        self.inner = self.inner.structure_list(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_structure_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    ) -> Self {
+        self.inner = self.inner.set_structure_list(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_structure_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>> {
+        self.inner.get_structure_list()
+    }
+    ///
+    /// Adds a key-value pair to `simpleStringMap`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_map`](Self::set_simple_string_map).
+    ///
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.inner = self.inner.simple_string_map(k.into(), v.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_map(
+        mut self,
+        input: ::std::option::Option<
+            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+        >,
+    ) -> Self {
+        self.inner = self.inner.set_simple_string_map(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_map(
+        &self,
+    ) -> &::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    > {
+        self.inner.get_simple_string_map()
+    }
+    ///
+    /// Adds a key-value pair to `simpleIntegerMap`.
+    ///
+    /// To override the contents of this collection use [`set_simple_integer_map`](Self::set_simple_integer_map).
+    ///
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_integer_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: i32,
+    ) -> Self {
+        self.inner = self.inner.simple_integer_map(k.into(), v);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_integer_map(
+        mut self,
+        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    ) -> Self {
+        self.inner = self.inner.set_simple_integer_map(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_integer_map(
+        &self,
+    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, i32>> {
+        self.inner.get_simple_integer_map()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn nested_structure(mut self, input: crate::types::NestedStructure) -> Self {
+        self.inner = self.inner.nested_structure(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_nested_structure(
+        mut self,
+        input: ::std::option::Option<crate::types::NestedStructure>,
+    ) -> Self {
+        self.inner = self.inner.set_nested_structure(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_nested_structure(&self) -> &::std::option::Option<crate::types::NestedStructure> {
+        self.inner.get_nested_structure()
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test.rs a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test.rs
new file mode 100644
index 00000000..e94ed906
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test.rs
@@ -0,0 +1,149 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetAggregateKnownValueTest`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetAggregateKnownValueTest;
+impl GetAggregateKnownValueTest {
+    /// Creates a new `GetAggregateKnownValueTest`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput,
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestError,
+    > {
+        let inner_input = crate::conversions::get_aggregate_known_value_test::_get_aggregate_known_value_test_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(client.dafny_client.clone())
+            .GetAggregateKnownValueTest(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_aggregate_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_aggregate_known_value_test::_get_aggregate_known_value_test_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(
+                crate::conversions::get_aggregate_known_value_test::from_dafny_error(
+                    inner_result.error().clone(),
+                ),
+            )
+        }
+    }
+}
+
+/// Error type for the `GetAggregateKnownValueTestError` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetAggregateKnownValueTestError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetAggregateKnownValueTestError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetAggregateKnownValueTestError {
+    /// Creates the `GetAggregateKnownValueTestError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetAggregateKnownValueTestError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetAggregateKnownValueTestError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetAggregateKnownValueTestError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetAggregateKnownValueTestError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetAggregateKnownValueTestError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError
+    for GetAggregateKnownValueTestError
+{
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_aggregate_known_value_test::_get_aggregate_known_value_test_output::GetAggregateKnownValueTestOutput;
+
+pub use crate::operation::get_aggregate_known_value_test::_get_aggregate_known_value_test_input::GetAggregateKnownValueTestInput;
+
+mod _get_aggregate_known_value_test_input;
+
+mod _get_aggregate_known_value_test_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test/_get_aggregate_known_value_test_input.rs a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test/_get_aggregate_known_value_test_input.rs
new file mode 100644
index 00000000..fd552e75
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test/_get_aggregate_known_value_test_input.rs
@@ -0,0 +1,219 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetAggregateKnownValueTestInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub structure_list: ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_string_map: ::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    >,
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_integer_map:
+        ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub nested_structure: ::std::option::Option<crate::types::NestedStructure>,
+}
+impl GetAggregateKnownValueTestInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
+        &self.simple_string_list
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn structure_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>> {
+        &self.structure_list
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_map(
+        &self,
+    ) -> ::std::option::Option<
+        &::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    > {
+        self.simple_string_map.as_ref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_integer_map(
+        &self,
+    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, i32>> {
+        self.simple_integer_map.as_ref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn nested_structure(&self) -> ::std::option::Option<&crate::types::NestedStructure> {
+        self.nested_structure.as_ref()
+    }
+}
+impl GetAggregateKnownValueTestInput {
+    /// Creates a new builder-style object to manufacture [`GetAggregateKnownValueTestInput`](crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestInput).
+    pub fn builder() -> crate::operation::get_aggregate_known_value_test::builders::GetAggregateKnownValueTestInputBuilder{
+        crate::operation::get_aggregate_known_value_test::builders::GetAggregateKnownValueTestInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetAggregateKnownValueTestInput`](crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetAggregateKnownValueTestInputBuilder {
+    pub(crate) simple_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    pub(crate) structure_list:
+        ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    pub(crate) simple_string_map: ::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    >,
+    pub(crate) simple_integer_map:
+        ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    pub(crate) nested_structure: ::std::option::Option<crate::types::NestedStructure>,
+}
+impl GetAggregateKnownValueTestInputBuilder {
+    /// Appends an item to `simple_string_list`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_list`](Self::set_simple_string_list).
+    ///
+    pub fn simple_string_list(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        let mut v = self.simple_string_list.unwrap_or_default();
+        v.push(input.into());
+        self.simple_string_list = ::std::option::Option::Some(v);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    ) -> Self {
+        self.simple_string_list = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
+        &self.simple_string_list
+    }
+    /// Appends an item to `structure_list`.
+    ///
+    /// To override the contents of this collection use [`set_structure_list`](Self::set_structure_list).
+    ///
+    pub fn structure_list(mut self, input: crate::types::StructureListElement) -> Self {
+        let mut v = self.structure_list.unwrap_or_default();
+        v.push(input);
+        self.structure_list = ::std::option::Option::Some(v);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_structure_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    ) -> Self {
+        self.structure_list = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_structure_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>> {
+        &self.structure_list
+    }
+    /// Adds a key-value pair to `simple_string_map`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_map`](Self::set_simple_string_map).
+    ///
+    pub fn simple_string_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        let mut hash_map = self.simple_string_map.unwrap_or_default();
+        hash_map.insert(k.into(), v.into());
+        self.simple_string_map = ::std::option::Option::Some(hash_map);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_map(
+        mut self,
+        input: ::std::option::Option<
+            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+        >,
+    ) -> Self {
+        self.simple_string_map = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_map(
+        &self,
+    ) -> &::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    > {
+        &self.simple_string_map
+    }
+    /// Adds a key-value pair to `simple_integer_map`.
+    ///
+    /// To override the contents of this collection use [`set_simple_integer_map`](Self::set_simple_integer_map).
+    ///
+    pub fn simple_integer_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: i32,
+    ) -> Self {
+        let mut hash_map = self.simple_integer_map.unwrap_or_default();
+        hash_map.insert(k.into(), v);
+        self.simple_integer_map = ::std::option::Option::Some(hash_map);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_integer_map(
+        mut self,
+        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    ) -> Self {
+        self.simple_integer_map = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_integer_map(
+        &self,
+    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, i32>> {
+        &self.simple_integer_map
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn nested_structure(mut self, input: crate::types::NestedStructure) -> Self {
+        self.nested_structure = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_nested_structure(
+        mut self,
+        input: ::std::option::Option<crate::types::NestedStructure>,
+    ) -> Self {
+        self.nested_structure = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_nested_structure(&self) -> &::std::option::Option<crate::types::NestedStructure> {
+        &self.nested_structure
+    }
+    /// Consumes the builder and constructs a [`GetAggregateKnownValueTestInput`](crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(
+            crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestInput {
+                simple_string_list: self.simple_string_list,
+                structure_list: self.structure_list,
+                simple_string_map: self.simple_string_map,
+                simple_integer_map: self.simple_integer_map,
+                nested_structure: self.nested_structure,
+            },
+        )
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test/_get_aggregate_known_value_test_output.rs a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test/_get_aggregate_known_value_test_output.rs
new file mode 100644
index 00000000..56d10054
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test/_get_aggregate_known_value_test_output.rs
@@ -0,0 +1,214 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetAggregateKnownValueTestOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub structure_list: ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_string_map: ::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    >,
+    #[allow(missing_docs)] // documentation missing in model
+    pub simple_integer_map:
+        ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub nested_structure: ::std::option::Option<crate::types::NestedStructure>,
+}
+impl GetAggregateKnownValueTestOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
+        &self.simple_string_list
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn structure_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>> {
+        &self.structure_list
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_map(
+        &self,
+    ) -> ::std::option::Option<
+        &::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    > {
+        self.simple_string_map.as_ref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_integer_map(
+        &self,
+    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, i32>> {
+        self.simple_integer_map.as_ref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn nested_structure(&self) -> ::std::option::Option<&crate::types::NestedStructure> {
+        self.nested_structure.as_ref()
+    }
+}
+impl GetAggregateKnownValueTestOutput {
+    /// Creates a new builder-style object to manufacture [`GetAggregateKnownValueTestOutput`](crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput).
+    pub fn builder() -> crate::operation::get_aggregate_known_value_test::builders::GetAggregateKnownValueTestOutputBuilder{
+        crate::operation::get_aggregate_known_value_test::builders::GetAggregateKnownValueTestOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetAggregateKnownValueTestOutput`](crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetAggregateKnownValueTestOutputBuilder {
+    pub(crate) simple_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    pub(crate) structure_list:
+        ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    pub(crate) simple_string_map: ::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    >,
+    pub(crate) simple_integer_map:
+        ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    pub(crate) nested_structure: ::std::option::Option<crate::types::NestedStructure>,
+}
+impl GetAggregateKnownValueTestOutputBuilder {
+    /// Appends an item to `simple_string_list`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_list`](Self::set_simple_string_list).
+    ///
+    pub fn simple_string_list(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        let mut v = self.simple_string_list.unwrap_or_default();
+        v.push(input.into());
+        self.simple_string_list = ::std::option::Option::Some(v);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    ) -> Self {
+        self.simple_string_list = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
+        &self.simple_string_list
+    }
+    /// Appends an item to `structure_list`.
+    ///
+    /// To override the contents of this collection use [`set_structure_list`](Self::set_structure_list).
+    ///
+    pub fn structure_list(mut self, input: crate::types::StructureListElement) -> Self {
+        let mut v = self.structure_list.unwrap_or_default();
+        v.push(input);
+        self.structure_list = ::std::option::Option::Some(v);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_structure_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    ) -> Self {
+        self.structure_list = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_structure_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>> {
+        &self.structure_list
+    }
+    /// Adds a key-value pair to `simple_string_map`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_map`](Self::set_simple_string_map).
+    ///
+    pub fn simple_string_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        let mut hash_map = self.simple_string_map.unwrap_or_default();
+        hash_map.insert(k.into(), v.into());
+        self.simple_string_map = ::std::option::Option::Some(hash_map);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_map(
+        mut self,
+        input: ::std::option::Option<
+            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+        >,
+    ) -> Self {
+        self.simple_string_map = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_map(
+        &self,
+    ) -> &::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    > {
+        &self.simple_string_map
+    }
+    /// Adds a key-value pair to `simple_integer_map`.
+    ///
+    /// To override the contents of this collection use [`set_simple_integer_map`](Self::set_simple_integer_map).
+    ///
+    pub fn simple_integer_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: i32,
+    ) -> Self {
+        let mut hash_map = self.simple_integer_map.unwrap_or_default();
+        hash_map.insert(k.into(), v);
+        self.simple_integer_map = ::std::option::Option::Some(hash_map);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_integer_map(
+        mut self,
+        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    ) -> Self {
+        self.simple_integer_map = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_integer_map(
+        &self,
+    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, i32>> {
+        &self.simple_integer_map
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn nested_structure(mut self, input: crate::types::NestedStructure) -> Self {
+        self.nested_structure = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_nested_structure(
+        mut self,
+        input: ::std::option::Option<crate::types::NestedStructure>,
+    ) -> Self {
+        self.nested_structure = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_nested_structure(&self) -> &::std::option::Option<crate::types::NestedStructure> {
+        &self.nested_structure
+    }
+    /// Consumes the builder and constructs a [`GetAggregateKnownValueTestOutput`](crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput).
+    pub fn build(
+        self,
+    ) -> crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput {
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput {
+            simple_string_list: self.simple_string_list,
+            structure_list: self.structure_list,
+            simple_string_map: self.simple_string_map,
+            simple_integer_map: self.simple_integer_map,
+            nested_structure: self.nested_structure,
+        }
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test/builders.rs a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test/builders.rs
new file mode 100644
index 00000000..63afa764
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/operation/get_aggregate_known_value_test/builders.rs
@@ -0,0 +1,192 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_aggregate_known_value_test::_get_aggregate_known_value_test_output::GetAggregateKnownValueTestOutputBuilder;
+
+pub use crate::operation::get_aggregate_known_value_test::_get_aggregate_known_value_test_input::GetAggregateKnownValueTestInputBuilder;
+
+impl GetAggregateKnownValueTestInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput,
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestError,
+    > {
+        let mut fluent_builder = client.get_aggregate_known_value_test();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+
+/// Fluent builder constructing a request to `GetAggregate`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetAggregateKnownValueTestFluentBuilder {
+    client: crate::Client,
+    inner: crate::operation::get_aggregate_known_value_test::builders::GetAggregateKnownValueTestInputBuilder,
+}
+
+impl GetAggregateKnownValueTestFluentBuilder {
+    /// Creates a new `GetAggregateKnownValueTestFluentBuilder`.
+    pub(crate) fn new(client: crate::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetAggregateKnownValueTest as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_aggregate_known_value_test::builders::GetAggregateKnownValueTestInputBuilder{
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestOutput,
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetAggregateKnownValueTest doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTestError::unhandled)?;
+        crate::operation::get_aggregate_known_value_test::GetAggregateKnownValueTest::send(
+            &self.client,
+            input,
+        )
+        .await
+    }
+
+    ///
+    /// Appends an item to `simpleStringList`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_list`](Self::set_simple_string_list).
+    ///
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_list(
+        mut self,
+        input: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.inner = self.inner.simple_string_list(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
+    ) -> Self {
+        self.inner = self.inner.set_simple_string_list(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
+        self.inner.get_simple_string_list()
+    }
+    ///
+    /// Appends an item to `structureList`.
+    ///
+    /// To override the contents of this collection use [`set_structure_list`](Self::set_structure_list).
+    ///
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn structure_list(mut self, input: crate::types::StructureListElement) -> Self {
+        self.inner = self.inner.structure_list(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_structure_list(
+        mut self,
+        input: ::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>>,
+    ) -> Self {
+        self.inner = self.inner.set_structure_list(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_structure_list(
+        &self,
+    ) -> &::std::option::Option<::std::vec::Vec<crate::types::StructureListElement>> {
+        self.inner.get_structure_list()
+    }
+    ///
+    /// Adds a key-value pair to `simpleStringMap`.
+    ///
+    /// To override the contents of this collection use [`set_simple_string_map`](Self::set_simple_string_map).
+    ///
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_string_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: impl ::std::convert::Into<::std::string::String>,
+    ) -> Self {
+        self.inner = self.inner.simple_string_map(k.into(), v.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_string_map(
+        mut self,
+        input: ::std::option::Option<
+            ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+        >,
+    ) -> Self {
+        self.inner = self.inner.set_simple_string_map(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_string_map(
+        &self,
+    ) -> &::std::option::Option<
+        ::std::collections::HashMap<::std::string::String, ::std::string::String>,
+    > {
+        self.inner.get_simple_string_map()
+    }
+    ///
+    /// Adds a key-value pair to `simpleIntegerMap`.
+    ///
+    /// To override the contents of this collection use [`set_simple_integer_map`](Self::set_simple_integer_map).
+    ///
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn simple_integer_map(
+        mut self,
+        k: impl ::std::convert::Into<::std::string::String>,
+        v: i32,
+    ) -> Self {
+        self.inner = self.inner.simple_integer_map(k.into(), v);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_simple_integer_map(
+        mut self,
+        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, i32>>,
+    ) -> Self {
+        self.inner = self.inner.set_simple_integer_map(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_simple_integer_map(
+        &self,
+    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, i32>> {
+        self.inner.get_simple_integer_map()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn nested_structure(mut self, input: crate::types::NestedStructure) -> Self {
+        self.inner = self.inner.nested_structure(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_nested_structure(
+        mut self,
+        input: ::std::option::Option<crate::types::NestedStructure>,
+    ) -> Self {
+        self.inner = self.inner.set_nested_structure(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_nested_structure(&self) -> &::std::option::Option<crate::types::NestedStructure> {
+        self.inner.get_nested_structure()
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/types.rs a/TestModels/Aggregate/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..dd259ffa
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/types.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _nested_structure;
+pub mod _string_structure;
+pub mod _structure_list_element;
+pub mod builders;
+/// Types for the `SimpleAggregateConfig`
+pub mod simple_aggregate_config;
+
+pub use crate::types::_nested_structure::NestedStructure;
+
+pub use crate::types::_string_structure::StringStructure;
+
+pub use crate::types::_structure_list_element::StructureListElement;
diff --git b/TestModels/Aggregate/runtimes/rust/src/types/_nested_structure.rs a/TestModels/Aggregate/runtimes/rust/src/types/_nested_structure.rs
new file mode 100644
index 00000000..9f47bce0
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/types/_nested_structure.rs
@@ -0,0 +1,54 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct NestedStructure {
+    #[allow(missing_docs)] // documentation missing in model
+    pub string_structure: ::std::option::Option<crate::types::StringStructure>,
+}
+impl NestedStructure {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_structure(&self) -> ::std::option::Option<&crate::types::StringStructure> {
+        self.string_structure.as_ref()
+    }
+}
+impl NestedStructure {
+    /// Creates a new builder-style object to manufacture [`NestedStructure`](crate::types::NestedStructure).
+    pub fn builder() -> crate::types::builders::NestedStructureBuilder {
+        crate::types::builders::NestedStructureBuilder::default()
+    }
+}
+
+/// A builder for [`NestedStructure`](crate::types::NestedStructure).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct NestedStructureBuilder {
+    pub(crate) string_structure: ::std::option::Option<crate::types::StringStructure>,
+}
+impl NestedStructureBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_structure(mut self, input: crate::types::StringStructure) -> Self {
+        self.string_structure = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_string_structure(
+        mut self,
+        input: ::std::option::Option<crate::types::StringStructure>,
+    ) -> Self {
+        self.string_structure = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_aggregate_structure(&self) -> &::std::option::Option<crate::types::StringStructure> {
+        &self.string_structure
+    }
+    /// Consumes the builder and constructs a [`NestedStructure`](crate::types::NestedStructure).
+    pub fn build(self) -> crate::types::NestedStructure {
+        crate::types::NestedStructure {
+            string_structure: self.string_structure,
+        }
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/types/_string_structure.rs a/TestModels/Aggregate/runtimes/rust/src/types/_string_structure.rs
new file mode 100644
index 00000000..8de473f4
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/types/_string_structure.rs
@@ -0,0 +1,49 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct StringStructure {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::string::String>,
+}
+impl StringStructure {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<&str> {
+        self.value.as_deref()
+    }
+}
+impl StringStructure {
+    /// Creates a new builder-style object to manufacture [`StringStructure`](crate::types::StringStructure).
+    pub fn builder() -> crate::types::builders::StringStructureBuilder {
+        crate::types::builders::StringStructureBuilder::default()
+    }
+}
+
+/// A builder for [`StringStructure`](crate::types::StringStructure).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct StringStructureBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl StringStructureBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`StringStructure`](crate::types::StringStructure).
+    pub fn build(self) -> crate::types::StringStructure {
+        crate::types::StringStructure { value: self.value }
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/types/_structure_list_element.rs a/TestModels/Aggregate/runtimes/rust/src/types/_structure_list_element.rs
new file mode 100644
index 00000000..7b3a42ff
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/types/_structure_list_element.rs
@@ -0,0 +1,73 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct StructureListElement {
+    #[allow(missing_docs)] // documentation missing in model
+    pub string_value: ::std::option::Option<::std::string::String>,
+    #[allow(missing_docs)] // documentation missing in model
+    pub integer_value: ::std::option::Option<i32>,
+}
+impl StructureListElement {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(&self) -> ::std::option::Option<&str> {
+        self.string_value.as_deref()
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(&self) -> ::std::option::Option<i32> {
+        self.integer_value
+    }
+}
+impl StructureListElement {
+    /// Creates a new builder-style object to manufacture [`StructureListElement`](crate::types::StructureListElement).
+    pub fn builder() -> crate::types::builders::StructureListElementBuilder {
+        crate::types::builders::StructureListElementBuilder::default()
+    }
+}
+
+/// A builder for [`StructureListElement`](crate::types::StructureListElement).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct StructureListElementBuilder {
+    pub(crate) string_value: ::std::option::Option<::std::string::String>,
+    pub(crate) integer_value: ::std::option::Option<i32>,
+}
+impl StructureListElementBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.string_value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_string_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.string_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_aggregate_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.string_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(mut self, input: i32) -> Self {
+        self.integer_value = ::std::option::Option::Some(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_integer_value(mut self, input: ::std::option::Option<i32>) -> Self {
+        self.integer_value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_integer_value(&self) -> &::std::option::Option<i32> {
+        &self.integer_value
+    }
+    /// Consumes the builder and constructs a [`StructureListElement`](crate::types::StructureListElement).
+    pub fn build(self) -> crate::types::StructureListElement {
+        crate::types::StructureListElement {
+            string_value: self.string_value,
+            integer_value: self.integer_value,
+        }
+    }
+}
diff --git b/TestModels/Aggregate/runtimes/rust/src/types/builders.rs a/TestModels/Aggregate/runtimes/rust/src/types/builders.rs
new file mode 100644
index 00000000..3d309b04
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/types/builders.rs
@@ -0,0 +1,6 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::types::_nested_structure::NestedStructureBuilder;
+
+pub use crate::types::_string_structure::StringStructureBuilder;
+
+pub use crate::types::_structure_list_element::StructureListElementBuilder;
diff --git b/TestModels/Aggregate/runtimes/rust/src/types/simple_aggregate_config.rs a/TestModels/Aggregate/runtimes/rust/src/types/simple_aggregate_config.rs
new file mode 100644
index 00000000..d634c7c8
--- /dev/null
+++ a/TestModels/Aggregate/runtimes/rust/src/types/simple_aggregate_config.rs
@@ -0,0 +1,28 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleAggregateConfig {}
+
+impl SimpleAggregateConfig {
+    pub fn builder() -> SimpleAggregateConfigBuilder {
+        SimpleAggregateConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleAggregateConfigBuilder {}
+
+impl SimpleAggregateConfigBuilder {
+    /// Creates a new `SimpleAggregateConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {}
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        SimpleAggregateConfig,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(SimpleAggregateConfig {})
+    }
+}
