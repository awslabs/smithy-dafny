diff --git b/TestModels/Resource/runtimes/rust/src/client.rs a/TestModels/Resource/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..593b1051
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/client.rs
@@ -0,0 +1,39 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn crate::r#simple::resources::internaldafny::types::ISimpleResourcesClient>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_resources_config::SimpleResourcesConfig,
+    ) -> Result<Self, BuildError> {
+        let inner =
+            crate::simple::resources::internaldafny::_default::SimpleResources(
+                &crate::conversions::simple_resources_config::_simple_resources_config::to_dafny(
+                    conf,
+                ),
+            );
+        if matches!(
+            inner.as_ref(),
+            crate::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::upcast_object()(inner.Extract()),
+        })
+    }
+}
+
+mod get_resources;
diff --git b/TestModels/Resource/runtimes/rust/src/client/get_resources.rs a/TestModels/Resource/runtimes/rust/src/client/get_resources.rs
new file mode 100644
index 00000000..ee8ae97f
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/client/get_resources.rs
@@ -0,0 +1,15 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetResources`](crate::operation::get_resources::builders::GetResourcesFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<Resources>>)`](crate::operation::get_resources::builders::GetResourcesFluentBuilder::name) / [`set_name(Option<Resources>)`](crate::operation::get_resources::builders::GetResourcesFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetResourcesOutput`](crate::operation::get_resources::GetResourcesOutput) with field(s):
+    ///   - [`value(Option<Resources>)`](crate::operation::get_resources::GetResourcesOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetResourcesError>`](crate::operation::get_resources::GetResourcesError)
+    pub fn get_resources(
+        &self,
+    ) -> crate::operation::get_resources::builders::GetResourcesFluentBuilder {
+        crate::operation::get_resources::builders::GetResourcesFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/conversions.rs a/TestModels/Resource/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..6db43c2c
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions.rs
@@ -0,0 +1,6 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_resources;
+
+pub mod get_resource_data;
+
+pub mod simple_resources_config;
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/get_resource_data.rs a/TestModels/Resource/runtimes/rust/src/conversions/get_resource_data.rs
new file mode 100644
index 00000000..ec6cd5b2
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/get_resource_data.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_resource_data::GetResourceDataError,
+) -> ::std::rc::Rc<crate::r#simple::resources::internaldafny::types::Error> {
+    match value {
+    crate::operation::get_resource_data::GetResourceDataError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(crate::r#simple::resources::internaldafny::types::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::resources::internaldafny::types::Error,
+    >,
+) -> crate::operation::get_resource_data::GetResourceDataError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::r#simple::resources::internaldafny::types::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_resource_data::GetResourceDataError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_resource_data::GetResourceDataError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_resource_data_input;
+
+pub mod _get_resource_data_output;
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/get_resource_data/_get_resource_data_input.rs a/TestModels/Resource/runtimes/rust/src/conversions/get_resource_data/_get_resource_data_input.rs
new file mode 100644
index 00000000..3c8f9f69
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/get_resource_data/_get_resource_data_input.rs
@@ -0,0 +1,39 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_resource_data::GetResourceDataInput,
+) -> ::std::rc::Rc<
+    crate::r#simple::resources::internaldafny::types::GetResourceDataInput,
+> {
+    ::std::rc::Rc::new(crate::r#simple::resources::internaldafny::types::GetResourceDataInput::GetResourceDataInput {
+        stringValue: crate::standard_library_conversions::ostring_to_dafny(value.string_value()),
+        booleanValue: crate::standard_library_conversions::obool_to_dafny(value.boolean_value()),
+        integerValue: crate::standard_library_conversions::oint_to_dafny(value.integer_value()),
+        longValue: crate::standard_library_conversions::olong_to_dafny(value.long_value()),
+        blobValue: crate::standard_library_conversions::oblob_to_dafny(value.blob_value())
+  })
+}
+// _get_resource_data_Input
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::resources::internaldafny::types::GetResourceDataInput,
+    >,
+) -> crate::operation::get_resource_data::GetResourceDataInput {
+    match &*dafny_value {
+        crate::r#simple::resources::internaldafny::types::GetResourceDataInput::GetResourceDataInput {
+            blobValue,
+            booleanValue,
+            integerValue,
+            longValue,
+            stringValue,
+        } =>
+        crate::operation::get_resource_data::GetResourceDataInput {
+            string_value: crate::standard_library_conversions::ostring_from_dafny(stringValue.clone()),
+            boolean_value: crate::standard_library_conversions::obool_from_dafny(booleanValue.clone()),
+            integer_value: crate::standard_library_conversions::oint_from_dafny(integerValue.clone()),
+            long_value: crate::standard_library_conversions::olong_from_dafny(longValue.clone()),
+            blob_value: crate::standard_library_conversions::oblob_from_dafny(blobValue.clone())
+         }
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/get_resource_data/_get_resource_data_output.rs a/TestModels/Resource/runtimes/rust/src/conversions/get_resource_data/_get_resource_data_output.rs
new file mode 100644
index 00000000..514edbdb
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/get_resource_data/_get_resource_data_output.rs
@@ -0,0 +1,39 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_resource_data::GetResourceDataOutput,
+) -> ::std::rc::Rc<
+    crate::r#simple::resources::internaldafny::types::GetResourceDataOutput,
+> {
+    ::std::rc::Rc::new(crate::r#simple::resources::internaldafny::types::GetResourceDataOutput::GetResourceDataOutput {
+        stringValue: crate::standard_library_conversions::ostring_to_dafny(value.string_value()),
+        booleanValue: crate::standard_library_conversions::obool_to_dafny(value.boolean_value()),
+        integerValue: crate::standard_library_conversions::oint_to_dafny(value.integer_value()),
+        longValue: crate::standard_library_conversions::olong_to_dafny(value.long_value()),
+        blobValue: crate::standard_library_conversions::oblob_to_dafny(value.blob_value())
+  })
+}
+// _get_resource_data_output
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::resources::internaldafny::types::GetResourceDataOutput,
+    >,
+) -> crate::operation::get_resource_data::GetResourceDataOutput {
+    match &*dafny_value {
+        crate::r#simple::resources::internaldafny::types::GetResourceDataOutput::GetResourceDataOutput {
+            blobValue,
+            booleanValue,
+            integerValue,
+            longValue,
+            stringValue,
+        } =>
+        crate::operation::get_resource_data::GetResourceDataOutput {
+            string_value: crate::standard_library_conversions::ostring_from_dafny(stringValue.clone()),
+            boolean_value: crate::standard_library_conversions::obool_from_dafny(booleanValue.clone()),
+            integer_value: crate::standard_library_conversions::oint_from_dafny(integerValue.clone()),
+            long_value: crate::standard_library_conversions::olong_from_dafny(longValue.clone()),
+            blob_value: crate::standard_library_conversions::oblob_from_dafny(blobValue.clone())
+         }
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/get_resources.rs a/TestModels/Resource/runtimes/rust/src/conversions/get_resources.rs
new file mode 100644
index 00000000..1cffc46a
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/get_resources.rs
@@ -0,0 +1,32 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_resources::GetResourcesError,
+) -> ::std::rc::Rc<crate::r#simple::resources::internaldafny::types::Error> {
+    match value {
+    crate::operation::get_resources::GetResourcesError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(crate::r#simple::resources::internaldafny::types::Error::Opaque { obj: ::dafny_runtime::upcast_object()(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::resources::internaldafny::types::Error,
+    >,
+) -> crate::operation::get_resources::GetResourcesError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), crate::r#simple::resources::internaldafny::types::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_resources::GetResourcesError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_resources::GetResourcesError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_resources_input;
+
+pub mod _get_resources_output;
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_input.rs a/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_input.rs
new file mode 100644
index 00000000..95e17091
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_input.rs
@@ -0,0 +1,43 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_resources::GetResourcesInput,
+) -> ::std::rc::Rc<
+    crate::r#simple::resources::internaldafny::types::GetResourcesInput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => crate::_Wrappers_Compile::Option::Some { value:
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&b)
+            },
+        None => crate::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(crate::r#simple::resources::internaldafny::types::GetResourcesInput::GetResourcesInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::resources::internaldafny::types::GetResourcesInput,
+    >,
+) -> crate::operation::get_resources::GetResourcesInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(
+            dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+                &dafny_value.value().Extract(),
+            ),
+        )
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        crate::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_resources::GetResourcesInput { value }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_output.rs a/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_output.rs
new file mode 100644
index 00000000..294b93b5
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_output.rs
@@ -0,0 +1,111 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+use crate::types::simple_resource::SimpleResource;
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_resources::GetResourcesOutput,
+) -> ::std::rc::Rc<
+    crate::r#simple::resources::internaldafny::types::GetResourcesOutput,
+> {
+    let wrap = SimpleResourceWrapper {
+        obj: value.output.clone(),
+    };
+    let inner : ::std::rc::Rc<::std::cell::UnsafeCell<dyn crate::r#simple::resources::internaldafny::types::ISimpleResource>>
+    = ::std::rc::Rc::new(::std::cell::UnsafeCell::new(wrap));
+
+    ::std::rc::Rc::new(crate::r#simple::resources::internaldafny::types::GetResourcesOutput::GetResourcesOutput {
+    output: ::dafny_runtime::Object (Some(inner) )
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::resources::internaldafny::types::GetResourcesOutput,
+    >,
+) -> crate::operation::get_resources::GetResourcesOutput {
+    let wrap = SimpleResourceDafnyWrapper {
+        obj: dafny_value.output().clone(),
+    };
+    crate::operation::get_resources::GetResourcesOutput {
+        output: ::std::rc::Rc::new(::std::cell::RefCell::new(wrap)),
+    }
+}
+
+pub struct SimpleResourceWrapper {
+    obj: crate::types::simple_resource::SimpleResourceRef,
+}
+
+impl ::dafny_runtime::UpcastObject<dyn ::std::any::Any> for SimpleResourceWrapper {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
+
+impl crate::r#simple::resources::internaldafny::types::ISimpleResource
+    for SimpleResourceWrapper
+{
+    fn r#_GetResourceData_k(
+        &mut self,
+        input: &::std::rc::Rc<
+            crate::r#simple::resources::internaldafny::types::GetResourceDataInput,
+        >,
+    ) -> ::std::rc::Rc<
+        crate::r#_Wrappers_Compile::Result<
+            ::std::rc::Rc<
+                crate::r#simple::resources::internaldafny::types::GetResourceDataOutput,
+            >,
+            ::std::rc::Rc<crate::r#simple::resources::internaldafny::types::Error>,
+        >,
+    >
+    {
+        let inner_input =
+            crate::conversions::get_resource_data::_get_resource_data_input::from_dafny(
+                input.clone(),
+            );
+        let inner_result = self.obj.borrow_mut().get_resource_data(inner_input);
+        let result = match inner_result {
+            Ok(x) => crate::r#_Wrappers_Compile::Result::Success {
+                value: crate::conversions::get_resource_data::_get_resource_data_output::to_dafny(
+                    x,
+                ),
+            },
+            Err(x) => crate::r#_Wrappers_Compile::Result::Failure {
+                error: crate::conversions::get_resource_data::to_dafny_error(x),
+            },
+        };
+        ::std::rc::Rc::new(result)
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct SimpleResourceDafnyWrapper {
+    pub(crate) obj: ::dafny_runtime::Object<
+        dyn crate::r#simple::resources::internaldafny::types::ISimpleResource,
+    >,
+}
+
+impl SimpleResource for SimpleResourceDafnyWrapper {
+    fn get_resource_data(
+        &mut self,
+        input: crate::operation::get_resource_data::GetResourceDataInput,
+    ) -> Result<
+        crate::operation::get_resource_data::GetResourceDataOutput,
+        crate::operation::get_resource_data::GetResourceDataError,
+    > {
+        let inner_input =
+            crate::conversions::get_resource_data::_get_resource_data_input::to_dafny(input);
+        let inner_result = ::dafny_runtime::md!(self.obj.clone()).GetResourceData(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_resource_data::_get_resource_data_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_resource_data::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config.rs a/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config.rs
new file mode 100644
index 00000000..5121f1c0
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_resources_config;
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config/_simple_resources_config.rs a/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config/_simple_resources_config.rs
new file mode 100644
index 00000000..33886d22
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config/_simple_resources_config.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_resources_config::SimpleResourcesConfig,
+) -> ::std::rc::Rc<
+    crate::simple::resources::internaldafny::types::SimpleResourcesConfig,
+> {
+    let inner = crate::r#simple::resources::internaldafny::types::SimpleResourcesConfig::SimpleResourcesConfig {
+        name : dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&value.name)
+    };
+    ::std::rc::Rc::new(inner)
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        crate::r#simple::resources::internaldafny::types::SimpleResourcesConfig,
+    >,
+) -> crate::types::simple_resources_config::SimpleResourcesConfig {
+    crate::types::simple_resources_config::SimpleResourcesConfig {
+        name: dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+            &dafny_value.name(),
+        ),
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/error.rs a/TestModels/Resource/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/Resource/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/Resource/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..cce22d1c
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,26 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
+
+impl ::dafny_runtime::UpcastObject<dyn ::std::any::Any> for Unhandled {
+    ::dafny_runtime::UpcastObjectFn!(dyn ::std::any::Any);
+}
diff --git b/TestModels/Resource/runtimes/rust/src/implementation_from_dafny.rs a/TestModels/Resource/runtimes/rust/src/implementation_from_dafny.rs
index 8b7375ca..d698ebfd 100644
--- b/TestModels/Resource/runtimes/rust/src/implementation_from_dafny.rs
+++ a/TestModels/Resource/runtimes/rust/src/implementation_from_dafny.rs
@@ -1,6 +1,22 @@
 #![allow(warnings, unconditional_panic)]
 #![allow(nonstandard_style)]
 
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+mod standard_library_conversions;
+
+pub use client::Client;
+pub use types::simple_resources_config::SimpleResourcesConfig;
+
+
 pub mod r#_Wrappers_Compile {
     pub use dafny_runtime::DafnyPrint;
     pub use std::cmp::Eq;
@@ -1380,13 +1396,13 @@ pub mod simple {
                         >,
                     >::new();
                     let mut internalConfig: ::std::rc::Rc<
-                        crate::r#_SimpleResourcesOperations_Compile::Config,
+                        crate::r#simpleResourcesOperations_Compile::Config,
                     > = ::std::rc::Rc::new(
-                        crate::r#_SimpleResourcesOperations_Compile::Config::Config {
+                        crate::r#simpleResourcesOperations_Compile::Config::Config {
                             name: config.name().clone(),
                         },
                     );
-                    if crate::r#_SimpleResourcesOperations_Compile::_default::r#_ValidInternalConfig_q(&internalConfig) {
+                    if crate::r#simpleResourcesOperations_Compile::_default::r#_ValidInternalConfig_q(&internalConfig) {
             let mut client = ::dafny_runtime::MaybePlacebo::<::dafny_runtime::Object<crate::simple::resources::internaldafny::SimpleResourcesClient>>::new();
             let mut _nw2: ::dafny_runtime::Object<crate::simple::resources::internaldafny::SimpleResourcesClient> = crate::simple::resources::internaldafny::SimpleResourcesClient::_allocate_object();
             crate::simple::resources::internaldafny::SimpleResourcesClient::_ctor(&_nw2, &internalConfig);
@@ -1419,7 +1435,7 @@ pub mod simple {
 
             pub struct SimpleResourcesClient {
                 pub r#__i_config:
-                    ::std::rc::Rc<crate::r#_SimpleResourcesOperations_Compile::Config>,
+                    ::std::rc::Rc<crate::r#simpleResourcesOperations_Compile::Config>,
             }
 
             impl SimpleResourcesClient {
@@ -1430,7 +1446,7 @@ pub mod simple {
                     this: &::dafny_runtime::Object<
                         crate::simple::resources::internaldafny::SimpleResourcesClient,
                     >,
-                    config: &::std::rc::Rc<crate::r#_SimpleResourcesOperations_Compile::Config>,
+                    config: &::std::rc::Rc<crate::r#simpleResourcesOperations_Compile::Config>,
                 ) -> () {
                     let mut _set__i_config: bool = false;
                     ::dafny_runtime::update_field_uninit_object!(
@@ -1443,7 +1459,7 @@ pub mod simple {
                 }
                 pub fn config(
                     &self,
-                ) -> ::std::rc::Rc<crate::r#_SimpleResourcesOperations_Compile::Config>
+                ) -> ::std::rc::Rc<crate::r#simpleResourcesOperations_Compile::Config>
                 {
                     self.r#__i_config.clone()
                 }
@@ -1470,7 +1486,7 @@ pub mod simple {
                     let mut output = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::simple::resources::internaldafny::types::GetResourcesOutput>, ::std::rc::Rc<crate::simple::resources::internaldafny::types::Error>>>>::new();
                     let mut _out1 = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<crate::r#_Wrappers_Compile::Result<::std::rc::Rc<crate::simple::resources::internaldafny::types::GetResourcesOutput>, ::std::rc::Rc<crate::simple::resources::internaldafny::types::Error>>>>::new();
                     _out1 = ::dafny_runtime::MaybePlacebo::from(
-                        crate::r#_SimpleResourcesOperations_Compile::_default::GetResources(
+                        crate::r#simpleResourcesOperations_Compile::_default::GetResources(
                             &self.config().clone(),
                             input,
                         ),
@@ -2358,7 +2374,7 @@ pub mod simple {
         }
     }
 }
-pub mod r#_SimpleResource_Compile {
+pub mod r#simpleResource_Compile {
     pub use crate::simple::resources::internaldafny::types::ISimpleResource;
     pub use dafny_runtime::UpcastObject;
     pub use std::any::Any;
@@ -2377,7 +2393,7 @@ pub mod r#_SimpleResource_Compile {
             ::dafny_runtime::allocate_object::<Self>()
         }
         pub fn _ctor(
-            this: &::dafny_runtime::Object<crate::r#_SimpleResource_Compile::SimpleResource>,
+            this: &::dafny_runtime::Object<crate::r#simpleResource_Compile::SimpleResource>,
             value: &::std::rc::Rc<
                 crate::r#_Wrappers_Compile::Option<
                     ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
@@ -2481,7 +2497,7 @@ pub mod r#_SimpleResource_Compile {
         ::dafny_runtime::UpcastObjectFn!(dyn crate::simple::resources::internaldafny::types::ISimpleResource);
     }
 }
-pub mod r#_SimpleResourcesOperations_Compile {
+pub mod r#simpleResourcesOperations_Compile {
     pub use dafny_runtime::DafnyPrint;
     pub use std::cmp::Eq;
     pub use std::convert::AsRef;
@@ -2493,12 +2509,12 @@ pub mod r#_SimpleResourcesOperations_Compile {
 
     impl _default {
         pub fn r#_ValidInternalConfig_q(
-            config: &::std::rc::Rc<crate::r#_SimpleResourcesOperations_Compile::Config>,
+            config: &::std::rc::Rc<crate::r#simpleResourcesOperations_Compile::Config>,
         ) -> bool {
             true && ::dafny_runtime::int!(0) < config.name().cardinality()
         }
         pub fn GetResources(
-            config: &::std::rc::Rc<crate::r#_SimpleResourcesOperations_Compile::Config>,
+            config: &::std::rc::Rc<crate::r#simpleResourcesOperations_Compile::Config>,
             input: &::std::rc::Rc<
                 crate::simple::resources::internaldafny::types::GetResourcesInput,
             >,
@@ -2519,19 +2535,19 @@ pub mod r#_SimpleResourcesOperations_Compile {
                 >,
             >::new();
             let mut resource = ::dafny_runtime::MaybePlacebo::<
-                ::dafny_runtime::Object<crate::r#_SimpleResource_Compile::SimpleResource>,
+                ::dafny_runtime::Object<crate::r#simpleResource_Compile::SimpleResource>,
             >::new();
             let mut _nw1: ::dafny_runtime::Object<
-                crate::r#_SimpleResource_Compile::SimpleResource,
-            > = crate::r#_SimpleResource_Compile::SimpleResource::_allocate_object();
-            crate::r#_SimpleResource_Compile::SimpleResource::_ctor(
+                crate::r#simpleResource_Compile::SimpleResource,
+            > = crate::r#simpleResource_Compile::SimpleResource::_allocate_object();
+            crate::r#simpleResource_Compile::SimpleResource::_ctor(
                 &_nw1,
                 input.value(),
                 config.name(),
             );
             resource = ::dafny_runtime::MaybePlacebo::from(_nw1.clone());
             let mut result: ::std::rc::Rc<crate::simple::resources::internaldafny::types::GetResourcesOutput> = ::std::rc::Rc::new(crate::simple::resources::internaldafny::types::GetResourcesOutput::GetResourcesOutput {
-            output: ::dafny_runtime::upcast_object::<crate::r#_SimpleResource_Compile::SimpleResource, dyn crate::simple::resources::internaldafny::types::ISimpleResource>()(resource.read())
+            output: ::dafny_runtime::upcast_object::<crate::r#simpleResource_Compile::SimpleResource, dyn crate::simple::resources::internaldafny::types::ISimpleResource>()(resource.read())
           });
             output = ::dafny_runtime::MaybePlacebo::from(::std::rc::Rc::new(
                 crate::r#_Wrappers_Compile::Result::<
diff --git b/TestModels/Resource/runtimes/rust/src/lib.rs a/TestModels/Resource/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..7d3dac61
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/lib.rs
@@ -0,0 +1,19 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub mod implementation_from_dafny;
+
+pub use client::Client;
+pub use types::simple_resources_config::SimpleResourcesConfig;
diff --git b/TestModels/Resource/runtimes/rust/src/operation.rs a/TestModels/Resource/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..e1af7f63
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation.rs
@@ -0,0 +1,5 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod get_resource_data;
+/// Types for the `GetResources` operation.
+pub mod get_resources;
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resource_data.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resource_data.rs
new file mode 100644
index 00000000..ba2a8a6e
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resource_data.rs
@@ -0,0 +1,130 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetResourceData`.
+
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetResourceData;
+impl GetResourceData {
+    /// Creates a new `GetResourceData`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: crate::types::simple_resource::SimpleResourceRef,
+        input: crate::operation::get_resource_data::GetResourceDataInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_resource_data::GetResourceDataOutput,
+        crate::operation::get_resource_data::GetResourceDataError,
+    > {
+        client.borrow_mut().get_resource_data(input)
+    }
+}
+
+/// Error type for the `GetResourceData` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetResourceDataError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetResourceDataError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetResourceDataError {
+    /// Creates the `GetResourceDataError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetResourceDataError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetResourceDataError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetResourceDataError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetResourceDataError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetResourceDataError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetResourceDataError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_resource_data::_get_resource_data_output::GetResourceDataOutput;
+
+pub use crate::operation::get_resource_data::_get_resource_data_input::GetResourceDataInput;
+
+mod _get_resource_data_input;
+
+mod _get_resource_data_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resource_data/_get_resource_data_input.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resource_data/_get_resource_data_input.rs
new file mode 100644
index 00000000..58c53177
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resource_data/_get_resource_data_input.rs
@@ -0,0 +1,157 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetResourceDataInput {
+    pub(crate) blob_value: Option<aws_smithy_types::Blob>,
+    pub(crate) boolean_value: Option<bool>,
+    pub(crate) string_value: Option<String>,
+    pub(crate) integer_value: Option<i32>,
+    pub(crate) long_value: Option<i64>,
+}
+
+impl GetResourceDataInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(&self) -> &Option<aws_smithy_types::Blob> {
+        &self.blob_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(&self) -> Option<bool> {
+        self.boolean_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(&self) -> &Option<String> {
+        &self.string_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(&self) -> Option<i32> {
+        self.integer_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(&self) -> Option<i64> {
+        self.long_value
+    }
+}
+
+impl GetResourceDataInput {
+    /// Creates a new builder-style object to manufacture [`GetResourceDataInput`](crate::operation::operation::GetResourceDataInput).
+    pub fn builder() -> crate::operation::get_resource_data::builders::GetResourceDataInputBuilder {
+        crate::operation::get_resource_data::builders::GetResourceDataInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetResourceDataInput`](crate::operation::operation::GetResourceDataInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetResourceDataInputBuilder {
+    blob_value: Option<aws_smithy_types::Blob>,
+    boolean_value: Option<bool>,
+    string_value: Option<String>,
+    integer_value: Option<i32>,
+    long_value: Option<i64>,
+}
+
+impl GetResourceDataInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(mut self, input: aws_smithy_types::Blob) -> Self {
+        self.blob_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_blob_value(mut self, input: Option<aws_smithy_types::Blob>) -> Self {
+        self.blob_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_blob_value(&self) -> &Option<aws_smithy_types::Blob> {
+        &self.blob_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(mut self, input: bool) -> Self {
+        self.boolean_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_boolean_value(mut self, input: Option<bool>) -> Self {
+        self.boolean_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_boolean_value(&self) -> Option<bool> {
+        self.boolean_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(mut self, input: String) -> Self {
+        self.string_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_string_value(mut self, input: Option<String>) -> Self {
+        self.string_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_string_value(&self) -> &Option<String> {
+        &self.string_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(mut self, input: i32) -> Self {
+        self.integer_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_integer_value(mut self, input: Option<i32>) -> Self {
+        self.integer_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_integer_value(&self) -> Option<i32> {
+        self.integer_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(mut self, input: i64) -> Self {
+        self.long_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_long_value(mut self, input: Option<i64>) -> Self {
+        self.long_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_long_value(&self) -> Option<i64> {
+        self.long_value
+    }
+
+    /// Consumes the builder and constructs a [`GetResourceDataInput`](crate::operation::operation::GetResourceDataInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_resource_data::GetResourceDataInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_resource_data::GetResourceDataInput {
+            blob_value: self.blob_value,
+            boolean_value: self.boolean_value,
+            string_value: self.string_value,
+            integer_value: self.integer_value,
+            long_value: self.long_value,
+        })
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resource_data/_get_resource_data_output.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resource_data/_get_resource_data_output.rs
new file mode 100644
index 00000000..1814e59f
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resource_data/_get_resource_data_output.rs
@@ -0,0 +1,158 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetResourceDataOutput {
+    pub(crate) blob_value: Option<aws_smithy_types::Blob>,
+    pub(crate) boolean_value: Option<bool>,
+    pub(crate) string_value: Option<String>,
+    pub(crate) integer_value: Option<i32>,
+    pub(crate) long_value: Option<i64>,
+}
+
+impl GetResourceDataOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(&self) -> &Option<aws_smithy_types::Blob> {
+        &self.blob_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(&self) -> Option<bool> {
+        self.boolean_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(&self) -> &Option<String> {
+        &self.string_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(&self) -> Option<i32> {
+        self.integer_value
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(&self) -> Option<i64> {
+        self.long_value
+    }
+}
+
+impl GetResourceDataOutput {
+    /// Creates a new builder-style object to manufacture [`GetResourceDataOutput`](crate::operation::operation::GetResourceDataOutput).
+    pub fn builder() -> crate::operation::get_resource_data::builders::GetResourceDataOutputBuilder
+    {
+        crate::operation::get_resource_data::builders::GetResourceDataOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetResourceDataOutput`](crate::operation::operation::GetResourceDataOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetResourceDataOutputBuilder {
+    blob_value: Option<aws_smithy_types::Blob>,
+    boolean_value: Option<bool>,
+    string_value: Option<String>,
+    integer_value: Option<i32>,
+    long_value: Option<i64>,
+}
+
+impl GetResourceDataOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(mut self, input: aws_smithy_types::Blob) -> Self {
+        self.blob_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_blob_value(mut self, input: Option<aws_smithy_types::Blob>) -> Self {
+        self.blob_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_blob_value(&self) -> &Option<aws_smithy_types::Blob> {
+        &self.blob_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(mut self, input: bool) -> Self {
+        self.boolean_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_boolean_value(mut self, input: Option<bool>) -> Self {
+        self.boolean_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_boolean_value(&self) -> Option<bool> {
+        self.boolean_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(mut self, input: String) -> Self {
+        self.string_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_string_value(mut self, input: Option<String>) -> Self {
+        self.string_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_string_value(&self) -> &Option<String> {
+        &self.string_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(mut self, input: i32) -> Self {
+        self.integer_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_integer_value(mut self, input: Option<i32>) -> Self {
+        self.integer_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_integer_value(&self) -> Option<i32> {
+        self.integer_value
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(mut self, input: i64) -> Self {
+        self.long_value = Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_long_value(mut self, input: Option<i64>) -> Self {
+        self.long_value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_long_value(&self) -> Option<i64> {
+        self.long_value
+    }
+
+    /// Consumes the builder and constructs a [`GetResourceDataOutput`](crate::operation::operation::GetResourceDataOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_resource_data::GetResourceDataOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_resource_data::GetResourceDataOutput {
+            blob_value: self.blob_value,
+            boolean_value: self.boolean_value,
+            string_value: self.string_value,
+            integer_value: self.integer_value,
+            long_value: self.long_value,
+        })
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resource_data/builders.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resource_data/builders.rs
new file mode 100644
index 00000000..9c1c4890
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resource_data/builders.rs
@@ -0,0 +1,148 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_resource_data::_get_resource_data_output::GetResourceDataOutputBuilder;
+
+pub use crate::operation::get_resource_data::_get_resource_data_input::GetResourceDataInputBuilder;
+
+impl GetResourceDataInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: crate::types::simple_resource::SimpleResourceRef,
+    ) -> ::std::result::Result<
+        crate::operation::get_resource_data::GetResourceDataOutput,
+        crate::operation::get_resource_data::GetResourceDataError,
+    > {
+        // FIXME - how to convert BuildError to GetResourceDataError
+        let input = self.build().unwrap();
+        // let mut fluent_builder = client.borrow_mut().get_resource_data();
+        // fluent_builder.inner = self;
+        // fluent_builder.send().await
+        client.borrow_mut().get_resource_data(input)
+    }
+}
+/// Fluent builder constructing a request to `GetResourceData`.
+///
+#[derive(::std::clone::Clone)]
+pub struct GetResourceDataFluentBuilder {
+    client: crate::types::simple_resource::SimpleResourceRef,
+    inner: crate::operation::get_resource_data::builders::GetResourceDataInputBuilder,
+}
+impl GetResourceDataFluentBuilder {
+    /// Creates a new `GetResourceData`.
+    #[allow(dead_code)]
+    pub(crate) fn new(client: crate::types::simple_resource::SimpleResourceRef) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetResourceData as a reference.
+    pub fn as_input(
+        &self,
+    ) -> &crate::operation::get_resource_data::builders::GetResourceDataInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_resource_data::GetResourceDataOutput,
+        crate::operation::get_resource_data::GetResourceDataError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetResourceData doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_resource_data::GetResourceDataError::unhandled)?;
+        crate::operation::get_resource_data::GetResourceData::send(self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn blob_value(mut self, input: impl ::std::convert::Into<aws_smithy_types::Blob>) -> Self {
+        self.inner = self.inner.blob_value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_blob_value(mut self, input: Option<aws_smithy_types::Blob>) -> Self {
+        self.inner = self.inner.set_blob_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_blob_value(&self) -> &Option<aws_smithy_types::Blob> {
+        self.inner.get_blob_value()
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn boolean_value(mut self, input: impl ::std::convert::Into<bool>) -> Self {
+        self.inner = self.inner.boolean_value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_boolean_value(mut self, input: Option<bool>) -> Self {
+        self.inner = self.inner.set_boolean_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_boolean_value(&self) -> Option<bool> {
+        self.inner.get_boolean_value()
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn string_value(mut self, input: impl ::std::convert::Into<String>) -> Self {
+        self.inner = self.inner.string_value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_string_value(mut self, input: Option<String>) -> Self {
+        self.inner = self.inner.set_string_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_string_value(&self) -> &Option<String> {
+        self.inner.get_string_value()
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn integer_value(mut self, input: impl ::std::convert::Into<i32>) -> Self {
+        self.inner = self.inner.integer_value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_integer_value(mut self, input: Option<i32>) -> Self {
+        self.inner = self.inner.set_integer_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_integer_value(&self) -> Option<i32> {
+        self.inner.get_integer_value()
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn long_value(mut self, input: impl ::std::convert::Into<i64>) -> Self {
+        self.inner = self.inner.long_value(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_long_value(mut self, input: Option<i64>) -> Self {
+        self.inner = self.inner.set_long_value(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_long_value(&self) -> Option<i64> {
+        self.inner.get_long_value()
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resources.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resources.rs
new file mode 100644
index 00000000..56fc89a4
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resources.rs
@@ -0,0 +1,145 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetResources`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetResources;
+impl GetResources {
+    /// Creates a new `GetResources`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_resources::GetResourcesInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_resources::GetResourcesOutput,
+        crate::operation::get_resources::GetResourcesError,
+    > {
+        let inner_input = crate::conversions::get_resources::_get_resources_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetResources(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            crate::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_resources::_get_resources_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_resources::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetResources` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetResourcesError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetResourcesError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetResourcesError {
+    /// Creates the `GetResourcesError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetResourcesError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetResourcesError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetResourcesError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetResourcesError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetResourcesError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetResourcesError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_resources::_get_resources_output::GetResourcesOutput;
+
+pub use crate::operation::get_resources::_get_resources_input::GetResourcesInput;
+
+mod _get_resources_input;
+
+mod _get_resources_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_input.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_input.rs
new file mode 100644
index 00000000..33115a6a
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetResourcesInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetResourcesInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> &::std::option::Option<String> {
+        &self.value
+    }
+}
+impl GetResourcesInput {
+    /// Creates a new builder-style object to manufacture [`GetResourcesInput`](crate::operation::operation::GetResourcesInput).
+    pub fn builder() -> crate::operation::get_resources::builders::GetResourcesInputBuilder {
+        crate::operation::get_resources::builders::GetResourcesInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetResourcesInput`](crate::operation::operation::GetResourcesInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetResourcesInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::string::String>,
+}
+impl GetResourcesInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetResourcesInput`](crate::operation::operation::GetResourcesInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_resources::GetResourcesInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_resources::GetResourcesInput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_output.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_output.rs
new file mode 100644
index 00000000..a5956b44
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_output.rs
@@ -0,0 +1,63 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+pub struct GetResourcesOutput {
+    pub(crate) output: crate::types::simple_resource::SimpleResourceRef,
+}
+
+impl GetResourcesOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn output(&self) -> crate::types::simple_resource::SimpleResourceRef {
+        self.output.clone()
+    }
+}
+
+impl GetResourcesOutput {
+    /// Creates a new builder-style object to manufacture [`GetResourcesOutput`](crate::operation::operation::GetResourcesOutput).
+    pub fn builder() -> crate::operation::get_resources::builders::GetResourcesOutputBuilder {
+        crate::operation::get_resources::builders::GetResourcesOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetResourcesOutput`](crate::operation::operation::GetResourcesOutput).
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::default::Default)]
+pub struct GetResourcesOutputBuilder {
+    pub(crate) output: ::std::option::Option<crate::types::simple_resource::SimpleResourceRef>,
+}
+
+impl GetResourcesOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn output(mut self, input: crate::types::simple_resource::SimpleResourceRef) -> Self {
+        self.output = ::std::option::Option::Some(input);
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_output(
+        mut self,
+        input: ::std::option::Option<crate::types::simple_resource::SimpleResourceRef>,
+    ) -> Self {
+        self.output = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_output(
+        &self,
+    ) -> &::std::option::Option<crate::types::simple_resource::SimpleResourceRef> {
+        &self.output
+    }
+
+    /// Consumes the builder and constructs a [`GetResourcesOutput`](crate::operation::operation::GetResourcesOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_resources::GetResourcesOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_resources::GetResourcesOutput {
+            output: self.output.unwrap(),
+        })
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resources/builders.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resources/builders.rs
new file mode 100644
index 00000000..56453a6b
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resources/builders.rs
@@ -0,0 +1,72 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_resources::_get_resources_output::GetResourcesOutputBuilder;
+
+pub use crate::operation::get_resources::_get_resources_input::GetResourcesInputBuilder;
+
+impl GetResourcesInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_resources::GetResourcesOutput,
+        crate::operation::get_resources::GetResourcesError,
+    > {
+        let mut fluent_builder = client.get_resources();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetResources`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetResourcesFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::get_resources::builders::GetResourcesInputBuilder,
+}
+impl GetResourcesFluentBuilder {
+    /// Creates a new `GetResources`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetResources as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_resources::builders::GetResourcesInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_resources::GetResourcesOutput,
+        crate::operation::get_resources::GetResourcesError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetResources doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_resources::GetResourcesError::unhandled)?;
+        crate::operation::get_resources::GetResources::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/standard_library_conversions.rs a/TestModels/Resource/runtimes/rust/src/standard_library_conversions.rs
new file mode 100644
index 00000000..2fec0ffb
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/standard_library_conversions.rs
@@ -0,0 +1,246 @@
+pub fn ostring_to_dafny(
+  input: &Option<String>,
+) -> ::std::rc::Rc<
+  crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>,
+> {
+  let dafny_value = match input {
+  Some(b) => crate::_Wrappers_Compile::Option::Some { value:
+      dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&b)
+      },
+  None => crate::_Wrappers_Compile::Option::None {},
+};
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn ostring_from_dafny(
+  input: ::std::rc::Rc<
+      crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>,
+  >,
+) -> Option<String> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(
+          dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(
+              &input.Extract(),
+          ),
+      )
+  } else {
+      None
+  }
+}
+
+pub fn obool_to_dafny(input: Option<bool>) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<bool>> {
+  let dafny_value = match input {
+      Some(b) => crate::_Wrappers_Compile::Option::Some { value: b },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn obool_from_dafny(input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<bool>>) -> Option<bool> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(input.Extract())
+  } else {
+      None
+  }
+}
+
+pub fn oint_to_dafny(input: Option<i32>) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<i32>> {
+  let dafny_value = match input {
+      Some(b) => crate::_Wrappers_Compile::Option::Some { value: b },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn oint_from_dafny(input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<i32>>) -> Option<i32> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(input.Extract())
+  } else {
+      None
+  }
+}
+
+pub fn olong_to_dafny(input: Option<i64>) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<i64>> {
+  let dafny_value = match input {
+      Some(b) => crate::_Wrappers_Compile::Option::Some { value: b },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn olong_from_dafny(input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<i64>>) -> Option<i64> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(input.Extract())
+  } else {
+      None
+  }
+}
+
+pub fn blob_to_dafny(
+  input: &::aws_smithy_types::Blob,
+) -> ::dafny_runtime::Sequence<u8> {
+  ::dafny_runtime::Sequence::from_array(&input.clone().into_inner())
+}
+
+pub fn oblob_to_dafny(
+  input: &Option<::aws_smithy_types::Blob>,
+) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>> {
+  let dafny_value = match input {
+      Some(b) => crate::_Wrappers_Compile::Option::Some {
+          value: blob_to_dafny(&b),
+      },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn blob_from_dafny(
+  input: ::dafny_runtime::Sequence<u8>,
+) -> ::aws_smithy_types::Blob {
+
+  ::aws_smithy_types::Blob::new(
+      ::std::rc::Rc::try_unwrap(input.to_array())
+          .unwrap_or_else(|rc| (*rc).clone()),
+  )
+}
+
+pub fn oblob_from_dafny(
+  input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>>,
+) -> Option<::aws_smithy_types::Blob> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(blob_from_dafny(input.Extract()))
+  } else {
+      None
+  }
+}
+
+pub fn double_to_dafny(
+  input: f64,
+) -> ::dafny_runtime::Sequence<u8> {
+  ::dafny_runtime::dafny_runtime_conversions::vec_to_dafny_sequence(
+      &f64::to_be_bytes(input).to_vec(),
+      |x| *x)
+}
+
+pub fn odouble_to_dafny(
+  input: &Option<f64>,
+) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>> {
+  let dafny_value = match input {
+      Some(f) => crate::_Wrappers_Compile::Option::Some {
+          value: double_to_dafny(*f),
+      },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn double_from_dafny(
+  input: &::dafny_runtime::Sequence<u8>,
+) -> f64 {
+  let v = ::dafny_runtime::dafny_runtime_conversions::dafny_sequence_to_vec(input, |x| *x);
+  f64::from_be_bytes(v.try_into().expect("Error converting Sequence to f64"))
+}
+
+pub fn odouble_from_dafny(
+  input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<u8>>>,
+) -> Option<f64> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(double_from_dafny(&input.Extract()))
+  } else {
+      None
+  }
+}
+
+pub fn timestamp_to_dafny(
+  input: ::aws_smithy_types::DateTime,
+) -> ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16> {
+  ::dafny_runtime::dafny_runtime_conversions::unicode_chars_false::string_to_dafny_string(&input.to_string())
+}
+
+pub fn otimestamp_to_dafny(
+  input: &Option<::aws_smithy_types::DateTime>,
+) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>> {
+  let dafny_value = match input {
+      Some(f) => crate::_Wrappers_Compile::Option::Some {
+          value: timestamp_to_dafny(*f),
+      },
+      None => crate::_Wrappers_Compile::Option::None {},
+  };
+  ::std::rc::Rc::new(dafny_value)
+}
+
+pub fn timestamp_from_dafny(
+  input: ::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>,
+) -> ::aws_smithy_types::DateTime {
+  let s = dafny_runtime::dafny_runtime_conversions::unicode_chars_false::dafny_string_to_string(&input);
+  ::aws_smithy_types::DateTime::from_str(
+      &s,
+      aws_smithy_types::date_time::Format::DateTime,
+  ).unwrap()
+}
+
+pub fn otimestamp_from_dafny(
+  input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<::dafny_runtime::Sequence<::dafny_runtime::DafnyCharUTF16>>>,
+) -> Option<::aws_smithy_types::DateTime> {
+  if matches!(input.as_ref(), crate::_Wrappers_Compile::Option::Some { .. }) {
+      Some(timestamp_from_dafny(input.Extract()))
+  } else {
+      None
+  }
+}
+
+pub fn option_from_dafny<T: ::dafny_runtime::DafnyType, TR>(
+  input: ::std::rc::Rc<crate::_Wrappers_Compile::Option<T>>,
+  converter: fn(&T) -> TR,
+) -> Option<TR> {
+  match &*input {
+      crate::_Wrappers_Compile::Option::Some { value } => Some(converter(value)),
+      crate::_Wrappers_Compile::Option::None { } => None,
+  }
+}
+
+pub fn option_to_dafny<T: ::dafny_runtime::DafnyType, TR>(
+  input: &Option<TR>,
+  converter: fn(&TR) -> T,
+) -> ::std::rc::Rc<crate::_Wrappers_Compile::Option<T>> {
+  match input {
+      Some(value) => ::std::rc::Rc::new(
+          crate::_Wrappers_Compile::Option::Some {
+              value: converter(&value)
+          }
+      ),
+      None => ::std::rc::Rc::new(
+          crate::_Wrappers_Compile::Option::None {}
+      ),
+  }
+}
+
+pub fn result_from_dafny<T: ::dafny_runtime::DafnyType, TR, E: ::dafny_runtime::DafnyType, ER>(
+  input: ::std::rc::Rc<crate::_Wrappers_Compile::Result<T, E>>,
+  converter_t: fn(&T) -> TR,
+  converter_e: fn(&E) -> ER,
+) -> Result<TR, ER> {
+  match &*input {
+      crate::_Wrappers_Compile::Result::Success { value } => Ok(converter_t(value)),
+      crate::_Wrappers_Compile::Result::Failure { error } => Err(converter_e(error)),
+  }
+}
+
+pub fn result_to_dafny<T: ::dafny_runtime::DafnyType, TR, E: ::dafny_runtime::DafnyType, ER>(
+  input: &Result<TR, ER>,
+  converter_t: fn(&TR) -> T,
+  converter_e: fn(&ER) -> E,
+) -> ::std::rc::Rc<crate::_Wrappers_Compile::Result<T, E>> {
+  match input {
+      Ok(value) => ::std::rc::Rc::new(
+          crate::_Wrappers_Compile::Result::Success {
+              value: converter_t(&value)
+          }
+      ),
+      Err(error) => ::std::rc::Rc::new(
+          crate::_Wrappers_Compile::Result::Failure {
+              error: converter_e(&error)
+          }
+      ),
+  }
+}
\ No newline at end of file
diff --git b/TestModels/Resource/runtimes/rust/src/types.rs a/TestModels/Resource/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..3ce75ec7
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/types.rs
@@ -0,0 +1,8 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `SimpleResource`
+pub mod simple_resource;
+pub use simple_resource::SimpleResource;
+
+/// Types for the `SimpleResourcesConfig`
+pub mod simple_resources_config;
diff --git b/TestModels/Resource/runtimes/rust/src/types/simple_resource.rs a/TestModels/Resource/runtimes/rust/src/types/simple_resource.rs
new file mode 100644
index 00000000..dcc17819
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/types/simple_resource.rs
@@ -0,0 +1,13 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub trait SimpleResource {
+    fn get_resource_data(
+        &mut self,
+        input: crate::operation::get_resource_data::GetResourceDataInput,
+    ) -> Result<
+        crate::operation::get_resource_data::GetResourceDataOutput,
+        crate::operation::get_resource_data::GetResourceDataError,
+    >;
+}
+
+pub type SimpleResourceRef = ::std::rc::Rc<std::cell::RefCell<dyn SimpleResource>>;
diff --git b/TestModels/Resource/runtimes/rust/src/types/simple_resources_config.rs a/TestModels/Resource/runtimes/rust/src/types/simple_resources_config.rs
new file mode 100644
index 00000000..1001602b
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/types/simple_resources_config.rs
@@ -0,0 +1,61 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleResourcesConfig {
+    pub(crate) name: String,
+}
+
+impl SimpleResourcesConfig {
+    pub fn builder() -> SimpleResourcesConfigBuilder {
+        SimpleResourcesConfigBuilder::new()
+    }
+    pub fn name(&self) -> &String {
+        &self.name
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug, ::std::default::Default)]
+pub struct SimpleResourcesConfigBuilder {
+    name: Option<String>,
+}
+
+impl SimpleResourcesConfigBuilder {
+    /// Creates a new `SimpleResourcesConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self::default()
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        SimpleResourcesConfig,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        if self.name.is_none() {
+            Err(
+                aws_smithy_types::error::operation::BuildError::missing_field(
+                    "name",
+                    "Required for SimpleResourcesConfig.",
+                ),
+            )
+        } else if self.name.as_ref().unwrap().len() < 1 {
+            Err(
+                aws_smithy_types::error::operation::BuildError::invalid_field(
+                    "name",
+                    "Length must be at least 1.",
+                ),
+            )
+        } else {
+            ::std::result::Result::Ok(SimpleResourcesConfig {
+                name: self.name.unwrap(),
+            })
+        }
+    }
+    pub fn name(mut self, input: impl ::std::convert::Into<String>) -> Self {
+        self.name = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_name(&self) -> &::std::option::Option<String> {
+        &self.name
+    }
+}
