diff --git b/TestModels/Resource/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs a/TestModels/Resource/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
index 4aadfc53..f20e4319 100644
--- b/TestModels/Resource/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
+++ a/TestModels/Resource/runtimes/rust/dafny_impl/src/implementation_from_dafny.rs
@@ -548,7 +548,7 @@ pub mod r#_simple_dresources_dinternaldafny_dtypes {
             }
         }
     }
-
+/*
     impl ::std::default::Default for GetResourcesOutput {
         fn default() -> GetResourcesOutput {
             GetResourcesOutput::GetResourcesOutput {
@@ -556,7 +556,7 @@ pub mod r#_simple_dresources_dinternaldafny_dtypes {
             }
         }
     }
-
+*/
     impl ::std::convert::AsRef<GetResourcesOutput> for &GetResourcesOutput {
         fn as_ref(&self) -> Self {
             self
@@ -588,7 +588,7 @@ pub mod r#_simple_dresources_dinternaldafny_dtypes {
             let mut output = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dresources_dinternaldafny_dtypes::GetResourceDataOutput>, ::std::rc::Rc<super::r#_simple_dresources_dinternaldafny_dtypes::Error>>>>::new();
             let mut _out0 = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dresources_dinternaldafny_dtypes::GetResourceDataOutput>, ::std::rc::Rc<super::r#_simple_dresources_dinternaldafny_dtypes::Error>>>>::new();
             _out0 = ::dafny_runtime::MaybePlacebo::from(
-                ::dafny_runtime::md!(self).r#_GetResourceData_k(input),
+                self.r#_GetResourceData_k(input)
             );
             output = ::dafny_runtime::MaybePlacebo::from(_out0.read());
             return output.read();
@@ -845,13 +845,14 @@ pub mod r#_SimpleResource_Compile {
                 ::std::rc::Rc<super::r#_simple_dresources_dinternaldafny_dtypes::Error>,
             >,
         > {
-            let mut _out1 = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dresources_dinternaldafny_dtypes::GetResourceDataOutput>, ::std::rc::Rc<super::r#_simple_dresources_dinternaldafny_dtypes::Error>>>>::new();
-            _out1 = ::dafny_runtime::MaybePlacebo::from(
+            // let mut _out1 = ::dafny_runtime::MaybePlacebo::<::std::rc::Rc<super::r#_Wrappers_Compile::Result<::std::rc::Rc<super::r#_simple_dresources_dinternaldafny_dtypes::GetResourceDataOutput>, ::std::rc::Rc<super::r#_simple_dresources_dinternaldafny_dtypes::Error>>>>::new();
+            let _out1 = ::dafny_runtime::MaybePlacebo::from(
                 super::r#_simple_dresources_dinternaldafny_dtypes::ISimpleResource::GetResourceData(
-                    self.unwrap(),
+                    self,
                     input,
                 ),
             );
+            _out1.read()
         }
         pub fn _ctor(
             this: &::dafny_runtime::Object<Self>,
@@ -958,7 +959,6 @@ pub mod r#_SimpleResource_Compile {
                 },
             ));
             return output.read();
-            return output.read();
         }
     }
 }
@@ -1026,7 +1026,6 @@ pub mod r#_SimpleResourcesOperations_Compile {
                 },
             ));
             return output.read();
-            return output.read();
         }
     }
 
diff --git b/TestModels/Resource/runtimes/rust/src/client.rs a/TestModels/Resource/runtimes/rust/src/client.rs
new file mode 100644
index 00000000..cea36096
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/client.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use aws_smithy_types::error::operation::BuildError;
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct Client {
+    pub(crate) dafny_client: ::dafny_runtime::Object<dyn ::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::ISimpleTypesResourcesClient>
+}
+
+impl Client {
+    /// Creates a new client from the service [`Config`](crate::Config).
+    #[track_caller]
+    pub fn from_conf(
+        conf: crate::types::simple_resources_config::SimpleResourcesConfig,
+    ) -> Result<Self, BuildError> {
+        let inner =
+            ::simple_resources_dafny::_simple_dtypes_dresources_dinternaldafny::_default::SimpleResources(
+                &crate::conversions::simple_resources_config::_simple_resources_config::to_dafny(conf),
+            );
+        if matches!(
+            inner.as_ref(),
+            ::simple_resources_dafny::_Wrappers_Compile::Result::Failure { .. }
+        ) {
+            // TODO: convert error - the potential types are not modeled!
+            return Err(BuildError::other(
+                ::aws_smithy_types::error::metadata::ErrorMetadata::builder()
+                    .message("Invalid client config")
+                    .build(),
+            ));
+        }
+        Ok(Self {
+            dafny_client: ::dafny_runtime::UpcastTo::<dafny_runtime::Object<(dyn ::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::ISimpleTypesResourcesClient + 'static)>>::upcast_to(inner.Extract()),
+        })
+    }
+}
+
+mod get_resources;
diff --git b/TestModels/Resource/runtimes/rust/src/client/get_resources.rs a/TestModels/Resource/runtimes/rust/src/client/get_resources.rs
new file mode 100644
index 00000000..ee8ae97f
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/client/get_resources.rs
@@ -0,0 +1,15 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+impl super::Client {
+    /// Constructs a fluent builder for the [`GetResources`](crate::operation::get_resources::builders::GetResourcesFluentBuilder) operation.
+    ///
+    /// - The fluent builder is configurable:
+    ///   - [`value(impl Into<Option<Resources>>)`](crate::operation::get_resources::builders::GetResourcesFluentBuilder::name) / [`set_name(Option<Resources>)`](crate::operation::get_resources::builders::GetResourcesFluentBuilder::set_name):(undocumented)<br>
+    /// - On success, responds with [`GetResourcesOutput`](crate::operation::get_resources::GetResourcesOutput) with field(s):
+    ///   - [`value(Option<Resources>)`](crate::operation::get_resources::GetResourcesOutput::value): (undocumented)
+    /// - On failure, responds with [`SdkError<GetResourcesError>`](crate::operation::get_resources::GetResourcesError)
+    pub fn get_resources(
+        &self,
+    ) -> crate::operation::get_resources::builders::GetResourcesFluentBuilder {
+        crate::operation::get_resources::builders::GetResourcesFluentBuilder::new(self.clone())
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/conversions.rs a/TestModels/Resource/runtimes/rust/src/conversions.rs
new file mode 100644
index 00000000..57c6591f
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub mod get_resources;
+
+pub mod simple_resources_config;
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/get_resources.rs a/TestModels/Resource/runtimes/rust/src/conversions/get_resources.rs
new file mode 100644
index 00000000..82aca1a6
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/get_resources.rs
@@ -0,0 +1,33 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+use std::any::Any;
+
+#[allow(dead_code)]
+pub fn to_dafny_error(
+    value: crate::operation::get_resources::GetResourcesError,
+) -> ::std::rc::Rc<::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::Error>
+{
+    match value {
+    crate::operation::get_resources::GetResourcesError::Unhandled(unhandled) =>
+      ::std::rc::Rc::new(::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::Error::Opaque { obj: ::dafny_runtime::UpcastTo::<::dafny_runtime::Object<dyn Any>>::upcast_to(::dafny_runtime::object::new(unhandled)) })
+  }
+}
+
+#[allow(dead_code)]
+pub fn from_dafny_error(
+    dafny_value: ::std::rc::Rc<
+        ::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::Error,
+    >,
+) -> crate::operation::get_resources::GetResourcesError {
+    // TODO: Losing information here, but we have to figure out how to wrap an arbitrary Dafny value as std::error::Error
+    if matches!(&dafny_value.as_ref(), ::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::Error::CollectionOfErrors { .. }) {
+    let error_message = "TODO: can't get message yet";
+    crate::operation::get_resources::GetResourcesError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message(error_message).build())
+  } else {
+    crate::operation::get_resources::GetResourcesError::generic(::aws_smithy_types::error::metadata::ErrorMetadata::builder().message("Opaque error").build())
+  }
+}
+
+pub mod _get_resources_input;
+
+pub mod _get_resources_output;
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_input.rs a/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_input.rs
new file mode 100644
index 00000000..54fb0f63
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_input.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_resources::GetResourcesInput,
+) -> ::std::rc::Rc<
+    ::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::GetResourcesInput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => ::simple_resources_dafny::_Wrappers_Compile::Option::Some { value: b },
+        None => ::simple_resources_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::GetResourcesInput::GetResourcesInput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::GetResourcesInput,
+    >,
+) -> crate::operation::get_resources::GetResourcesInput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_resources_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.value().Extract())
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_resources_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_resources::GetResourcesInput { value }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_output.rs a/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_output.rs
new file mode 100644
index 00000000..31abbfc2
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/get_resources/_get_resources_output.rs
@@ -0,0 +1,37 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+pub fn to_dafny(
+    value: crate::operation::get_resources::GetResourcesOutput,
+) -> ::std::rc::Rc<
+    ::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::GetResourcesOutput,
+> {
+    let dafny_value = match value.value {
+        Some(b) => ::simple_resources_dafny::_Wrappers_Compile::Option::Some { value: b },
+        None => ::simple_resources_dafny::_Wrappers_Compile::Option::None {},
+    };
+    ::std::rc::Rc::new(::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::GetResourcesOutput::GetResourcesOutput {
+    value: ::std::rc::Rc::new(dafny_value)
+  })
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::GetResourcesOutput,
+    >,
+) -> crate::operation::get_resources::GetResourcesOutput {
+    let value = if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_resources_dafny::_Wrappers_Compile::Option::Some { .. }
+    ) {
+        Some(dafny_value.value().Extract())
+    } else if matches!(
+        dafny_value.value().as_ref(),
+        ::simple_resources_dafny::_Wrappers_Compile::Option::None { .. }
+    ) {
+        None
+    } else {
+        panic!("Unreachable")
+    };
+    crate::operation::get_resources::GetResourcesOutput { value }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config.rs a/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config.rs
new file mode 100644
index 00000000..5121f1c0
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config.rs
@@ -0,0 +1,3 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod _simple_resources_config;
diff --git b/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config/_simple_resources_config.rs a/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config/_simple_resources_config.rs
new file mode 100644
index 00000000..2a389a54
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/conversions/simple_resources_config/_simple_resources_config.rs
@@ -0,0 +1,19 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(dead_code)]
+
+pub fn to_dafny(
+    value: crate::types::simple_resources_config::SimpleResourcesConfig,
+) -> ::std::rc::Rc<
+    ::simple_resources_dafny::_simple_dtypes_dresources_dinternaldafny_dtypes::SimpleResourcesConfig,
+>{
+    ::std::rc::Rc::new(::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::SimpleResourcesConfig::SimpleResourcesConfig {})
+}
+
+#[allow(dead_code)]
+pub fn from_dafny(
+    dafny_value: ::std::rc::Rc<
+        ::simple_resources_dafny::r#_simple_dtypes_dresources_dinternaldafny_dtypes::SimpleResourcesConfig,
+    >,
+) -> crate::types::simple_resources_config::SimpleResourcesConfig {
+    crate::types::simple_resources_config::SimpleResourcesConfig {}
+}
diff --git b/TestModels/Resource/runtimes/rust/src/error.rs a/TestModels/Resource/runtimes/rust/src/error.rs
new file mode 100644
index 00000000..ec89cbec
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/error.rs
@@ -0,0 +1,14 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use ::aws_smithy_runtime_api::box_error::BoxError;
+
+/// Error type returned by the client.
+pub type SdkError<E, R = ::aws_smithy_runtime_api::client::orchestrator::HttpResponse> =
+    ::aws_smithy_runtime_api::client::result::SdkError<E, R>;
+pub use ::aws_smithy_runtime_api::client::result::ConnectorError;
+pub use ::aws_smithy_types::error::operation::BuildError;
+
+pub use ::aws_smithy_types::error::display::DisplayErrorContext;
+pub use ::aws_smithy_types::error::metadata::ErrorMetadata;
+pub use ::aws_smithy_types::error::metadata::ProvideErrorMetadata;
+
+pub(crate) mod sealed_unhandled;
diff --git b/TestModels/Resource/runtimes/rust/src/error/sealed_unhandled.rs a/TestModels/Resource/runtimes/rust/src/error/sealed_unhandled.rs
new file mode 100644
index 00000000..9d21fbd6
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/error/sealed_unhandled.rs
@@ -0,0 +1,22 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// This struct is not intended to be used.
+///
+/// This struct holds information about an unhandled error,
+/// but that information should be obtained by using the
+/// [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) trait
+/// on the error type.
+///
+/// This struct intentionally doesn't yield any useful information itself.
+#[deprecated(
+    note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+variable wildcard pattern and check `.code()`:
+ \
+&nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+ \
+See [`ProvideErrorMetadata`](::aws_smithy_types::error::metadata::ProvideErrorMetadata) for what information is available for the error."
+)]
+#[derive(Debug)]
+pub struct Unhandled {
+    pub(crate) source: ::aws_smithy_runtime_api::box_error::BoxError,
+    pub(crate) meta: ::aws_smithy_types::error::metadata::ErrorMetadata,
+}
diff --git b/TestModels/Resource/runtimes/rust/src/lib.rs a/TestModels/Resource/runtimes/rust/src/lib.rs
new file mode 100644
index 00000000..8912e4a7
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/lib.rs
@@ -0,0 +1,17 @@
+#![allow(deprecated)]
+
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+pub mod client;
+pub mod types;
+
+/// Common errors and error handling utilities.
+pub mod error;
+
+/// All operations that this crate can perform.
+pub mod operation;
+
+mod conversions;
+
+pub use client::Client;
+pub use types::simple_resources_config::SimpleResourcesConfig;
diff --git b/TestModels/Resource/runtimes/rust/src/operation.rs a/TestModels/Resource/runtimes/rust/src/operation.rs
new file mode 100644
index 00000000..67bb04d7
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `GetResources` operation.
+pub mod get_resources;
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resources.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resources.rs
new file mode 100644
index 00000000..2ac8e0f8
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resources.rs
@@ -0,0 +1,145 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+/// Orchestration and serialization glue logic for `GetResources`.
+#[derive(::std::clone::Clone, ::std::default::Default, ::std::fmt::Debug)]
+#[non_exhaustive]
+pub struct GetResources;
+impl GetResources {
+    /// Creates a new `GetResources`
+    pub fn new() -> Self {
+        Self
+    }
+    pub(crate) async fn send(
+        client: &crate::client::Client,
+        input: crate::operation::get_resources::GetResourcesInput,
+    ) -> ::std::result::Result<
+        crate::operation::get_resources::GetResourcesOutput,
+        crate::operation::get_resources::GetResourcesError,
+    > {
+        let inner_input = crate::conversions::get_resources::_get_resources_input::to_dafny(input);
+        let inner_result =
+            ::dafny_runtime::md!(client.dafny_client.clone()).GetResources(&inner_input);
+        if matches!(
+            inner_result.as_ref(),
+            ::simple_resources_dafny::r#_Wrappers_Compile::Result::Success { .. }
+        ) {
+            Ok(
+                crate::conversions::get_resources::_get_resources_output::from_dafny(
+                    inner_result.value().clone(),
+                ),
+            )
+        } else {
+            Err(crate::conversions::get_resources::from_dafny_error(
+                inner_result.error().clone(),
+            ))
+        }
+    }
+}
+
+/// Error type for the `GetResources` operation.
+#[non_exhaustive]
+#[derive(::std::fmt::Debug)]
+pub enum GetResourcesError {
+    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
+    #[deprecated(
+        note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
+    variable wildcard pattern and check `.code()`:
+     \
+    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
+     \
+    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-GetResourcesError) for what information is available for the error."
+    )]
+    Unhandled(crate::error::sealed_unhandled::Unhandled),
+}
+impl GetResourcesError {
+    /// Creates the `GetResourcesError::Unhandled` variant from any error type.
+    pub fn unhandled(
+        err: impl ::std::convert::Into<
+            ::std::boxed::Box<
+                dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+            >,
+        >,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.into(),
+            meta: ::std::default::Default::default(),
+        })
+    }
+
+    /// Creates the `GetResourcesError::Unhandled` variant from an [`ErrorMetadata`](::aws_smithy_types::error::ErrorMetadata).
+    pub fn generic(err: ::aws_smithy_types::error::ErrorMetadata) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source: err.clone().into(),
+            meta: err,
+        })
+    }
+    ///
+    /// Returns error metadata, which includes the error code, message,
+    /// request ID, and potentially additional information.
+    ///
+    pub fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(e) => &e.meta,
+        }
+    }
+}
+impl ::std::error::Error for GetResourcesError {
+    fn source(&self) -> ::std::option::Option<&(dyn ::std::error::Error + 'static)> {
+        match self {
+            Self::Unhandled(_inner) => ::std::option::Option::Some(&*_inner.source),
+        }
+    }
+}
+impl ::std::fmt::Display for GetResourcesError {
+    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
+        match self {
+            Self::Unhandled(_inner) => {
+                if let ::std::option::Option::Some(code) =
+                    ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+                {
+                    write!(f, "unhandled error ({code})")
+                } else {
+                    f.write_str("unhandled error")
+                }
+            }
+        }
+    }
+}
+impl ::aws_smithy_types::retry::ProvideErrorKind for GetResourcesError {
+    fn code(&self) -> ::std::option::Option<&str> {
+        ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self)
+    }
+    fn retryable_error_kind(&self) -> ::std::option::Option<::aws_smithy_types::retry::ErrorKind> {
+        ::std::option::Option::None
+    }
+}
+impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for GetResourcesError {
+    fn meta(&self) -> &::aws_smithy_types::error::ErrorMetadata {
+        match self {
+            Self::Unhandled(_inner) => &_inner.meta,
+        }
+    }
+}
+impl ::aws_smithy_runtime_api::client::result::CreateUnhandledError for GetResourcesError {
+    fn create_unhandled_error(
+        source: ::std::boxed::Box<
+            dyn ::std::error::Error + ::std::marker::Send + ::std::marker::Sync + 'static,
+        >,
+        meta: ::std::option::Option<::aws_smithy_types::error::ErrorMetadata>,
+    ) -> Self {
+        Self::Unhandled(crate::error::sealed_unhandled::Unhandled {
+            source,
+            meta: meta.unwrap_or_default(),
+        })
+    }
+}
+
+pub use crate::operation::get_resources::_get_resources_output::GetResourcesOutput;
+
+pub use crate::operation::get_resources::_get_resources_input::GetResourcesInput;
+
+mod _get_resources_input;
+
+mod _get_resources_output;
+
+/// Builders
+pub mod builders;
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_input.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_input.rs
new file mode 100644
index 00000000..8a0298da
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_input.rs
@@ -0,0 +1,56 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetResourcesInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::primitive::bool>,
+}
+impl GetResourcesInput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<bool> {
+        self.value
+    }
+}
+impl GetResourcesInput {
+    /// Creates a new builder-style object to manufacture [`GetResourcesInput`](crate::operation::operation::GetResourcesInput).
+    pub fn builder() -> crate::operation::get_resources::builders::GetResourcesInputBuilder {
+        crate::operation::get_resources::builders::GetResourcesInputBuilder::default()
+    }
+}
+
+/// A builder for [`GetResourcesInput`](crate::operation::operation::GetResourcesInput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetResourcesInputBuilder {
+    pub(crate) value: ::std::option::Option<::std::primitive::bool>,
+}
+impl GetResourcesInputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::primitive::bool>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::primitive::bool>) -> Self {
+        self.value = input;
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::primitive::bool> {
+        &self.value
+    }
+    /// Consumes the builder and constructs a [`GetResourcesInput`](crate::operation::operation::GetResourcesInput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_resources::GetResourcesInput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_resources::GetResourcesInput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_output.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_output.rs
new file mode 100644
index 00000000..7f5bdc53
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resources/_get_resources_output.rs
@@ -0,0 +1,62 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+#[allow(missing_docs)] // documentation missing in model
+#[non_exhaustive]
+#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
+pub struct GetResourcesOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub value: ::std::option::Option<::std::primitive::bool>,
+}
+
+impl GetResourcesOutput {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(&self) -> ::std::option::Option<bool> {
+        self.value
+    }
+}
+
+impl GetResourcesOutput {
+    /// Creates a new builder-style object to manufacture [`GetResourcesOutput`](crate::operation::operation::GetResourcesOutput).
+    pub fn builder() -> crate::operation::get_resources::builders::GetResourcesOutputBuilder {
+        crate::operation::get_resources::builders::GetResourcesOutputBuilder::default()
+    }
+}
+
+/// A builder for [`GetResourcesOutput`](crate::operation::operation::GetResourcesOutput).
+#[non_exhaustive]
+#[derive(
+    ::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug,
+)]
+pub struct GetResourcesOutputBuilder {
+    pub(crate) value: ::std::option::Option<::std::primitive::bool>,
+}
+
+impl GetResourcesOutputBuilder {
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::primitive::bool>) -> Self {
+        self.value = ::std::option::Option::Some(input.into());
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::primitive::bool>) -> Self {
+        self.value = input;
+        self
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::primitive::bool> {
+        &self.value
+    }
+
+    /// Consumes the builder and constructs a [`GetResourcesOutput`](crate::operation::operation::GetResourcesOutput).
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_resources::GetResourcesOutput,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(crate::operation::get_resources::GetResourcesOutput {
+            value: self.value,
+        })
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/operation/get_resources/builders.rs a/TestModels/Resource/runtimes/rust/src/operation/get_resources/builders.rs
new file mode 100644
index 00000000..7a051c94
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/operation/get_resources/builders.rs
@@ -0,0 +1,72 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+pub use crate::operation::get_resources::_get_resources_output::GetResourcesOutputBuilder;
+
+pub use crate::operation::get_resources::_get_resources_input::GetResourcesInputBuilder;
+
+impl GetResourcesInputBuilder {
+    /// Sends a request with this input using the given client.
+    pub async fn send_with(
+        self,
+        client: &crate::Client,
+    ) -> ::std::result::Result<
+        crate::operation::get_resources::GetResourcesOutput,
+        crate::operation::get_resources::GetResourcesError,
+    > {
+        let mut fluent_builder = client.get_resources();
+        fluent_builder.inner = self;
+        fluent_builder.send().await
+    }
+}
+/// Fluent builder constructing a request to `GetResources`.
+///
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct GetResourcesFluentBuilder {
+    client: crate::client::Client,
+    inner: crate::operation::get_resources::builders::GetResourcesInputBuilder,
+}
+impl GetResourcesFluentBuilder {
+    /// Creates a new `GetResources`.
+    pub(crate) fn new(client: crate::client::Client) -> Self {
+        Self {
+            client,
+            inner: ::std::default::Default::default(),
+        }
+    }
+    /// Access the GetResources as a reference.
+    pub fn as_input(&self) -> &crate::operation::get_resources::builders::GetResourcesInputBuilder {
+        &self.inner
+    }
+    /// Sends the request and returns the response.
+    pub async fn send(
+        self,
+    ) -> ::std::result::Result<
+        crate::operation::get_resources::GetResourcesOutput,
+        crate::operation::get_resources::GetResourcesError,
+    > {
+        let input = self
+            .inner
+            .build()
+            // Using unhandled since GetResources doesn't declare any validation,
+            // and smithy-rs seems to not generate a ValidationError case unless there is
+            // (but isn't that a backwards compatibility problem for output structures?)
+            // Vanilla smithy-rs uses SdkError::construction_failure,
+            // but we aren't using SdkError.
+            .map_err(crate::operation::get_resources::GetResourcesError::unhandled)?;
+        crate::operation::get_resources::GetResources::send(&self.client, input).await
+    }
+
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn value(mut self, input: impl ::std::convert::Into<::std::primitive::bool>) -> Self {
+        self.inner = self.inner.value(input.into());
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn set_value(mut self, input: ::std::option::Option<::std::primitive::bool>) -> Self {
+        self.inner = self.inner.set_value(input);
+        self
+    }
+    #[allow(missing_docs)] // documentation missing in model
+    pub fn get_value(&self) -> &::std::option::Option<::std::primitive::bool> {
+        self.inner.get_value()
+    }
+}
diff --git b/TestModels/Resource/runtimes/rust/src/types.rs a/TestModels/Resource/runtimes/rust/src/types.rs
new file mode 100644
index 00000000..f57b49d1
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/types.rs
@@ -0,0 +1,4 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+/// Types for the `SimpleResourcesConfig`
+pub mod simple_resources_config;
diff --git b/TestModels/Resource/runtimes/rust/src/types/simple_resources_config.rs a/TestModels/Resource/runtimes/rust/src/types/simple_resources_config.rs
new file mode 100644
index 00000000..fef45631
--- /dev/null
+++ a/TestModels/Resource/runtimes/rust/src/types/simple_resources_config.rs
@@ -0,0 +1,28 @@
+// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleResourcesConfig {}
+
+impl SimpleResourcesConfig {
+    pub fn builder() -> SimpleResourcesConfigBuilder {
+        SimpleResourcesConfigBuilder::new()
+    }
+}
+
+#[derive(::std::clone::Clone, ::std::fmt::Debug)]
+pub struct SimpleResourcesConfigBuilder {}
+
+impl SimpleResourcesConfigBuilder {
+    /// Creates a new `SimpleResourcesConfigBuilder`.
+    pub(crate) fn new() -> Self {
+        Self {}
+    }
+    pub fn build(
+        self,
+    ) -> ::std::result::Result<
+        SimpleResourcesConfig,
+        ::aws_smithy_types::error::operation::BuildError,
+    > {
+        ::std::result::Result::Ok(SimpleResourcesConfig {})
+    }
+}
