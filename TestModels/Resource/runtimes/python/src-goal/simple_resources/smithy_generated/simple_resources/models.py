# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import Any, Dict, Optional


class GetResourcesInput:
    value: Optional[str]
    def __init__(
        self,
        *,
        value: Optional[str] = None,
    ):
        self.value = value

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetResourcesInput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        d: Dict[str, Any] = {}

        if self.value is not None:
            d["value"] = self.value

        return d

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetResourcesInput":
        """Creates a GetResourcesInput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {}

        if "value" in d:
            kwargs["value"] = d["value"]

        return GetResourcesInput(**kwargs)

    def __repr__(self) -> str:
        result = "GetResourcesInput("
        if self.value is not None:
            result += f"value={repr(self.value)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetResourcesInput):
            return False
        attributes: list[str] = ['value',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class SimpleResourceReference:
    def as_dict(self) -> Dict[str, Any]:
        """Converts the SimpleResourceReference to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        return {}

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "SimpleResourceReference":
        """Creates a SimpleResourceReference from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        return SimpleResourceReference()

    def __repr__(self) -> str:
        result = "SimpleResourceReference("

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        return isinstance(other, SimpleResourceReference)

class SimpleResource:
    _impl: Any

    def __init__(self, _impl):
        self._impl = _impl

    def GetResourceData(self, dafny_input):
        return self._impl.GetResourceData(dafny_input)

class GetResourcesOutput:
    output: SimpleResourceReference
    def __init__(
        self,
        *,
        output: SimpleResourceReference,
    ):
        self.output = output

    def as_dict(self) -> Dict[str, Any]:
        """Converts the GetResourcesOutput to a dictionary.

        The dictionary uses the modeled shape names rather than the parameter names as
        keys to be mostly compatible with boto3.
        """
        return {
            "output": self.output.as_dict(),
        }

    @staticmethod
    def from_dict(d: Dict[str, Any]) -> "GetResourcesOutput":
        """Creates a GetResourcesOutput from a dictionary.

        The dictionary is expected to use the modeled shape names rather than the
        parameter names as keys to be mostly compatible with boto3.
        """
        kwargs: Dict[str, Any] = {
            "output": SimpleResourceReference.from_dict(d["output"]),
        }

        return GetResourcesOutput(**kwargs)

    def __repr__(self) -> str:
        result = "GetResourcesOutput("
        if self.output is not None:
            result += f"output={repr(self.output)}"

        return result + ")"

    def __eq__(self, other: Any) -> bool:
        if not isinstance(other, GetResourcesOutput):
            return False
        attributes: list[str] = ['output',]
        return all(
            getattr(self, a) == getattr(other, a)
            for a in attributes
        )

class Unit:
    pass
