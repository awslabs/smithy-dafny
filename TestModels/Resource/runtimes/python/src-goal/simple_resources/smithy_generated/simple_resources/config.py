# Code generated by smithy-python-codegen DO NOT EDIT.

from dataclasses import dataclass
from typing import Any, Callable, TypeAlias, Union

from .dafnyImplInterface import DafnyImplInterface
from .models import GetResourcesInput, GetResourcesOutput
from Wrappers_Compile import Option_Some
from simple.resources.internaldafny.types import (
    SimpleResourcesConfig_SimpleResourcesConfig as DafnySimpleResourcesConfig,
)
from smithy_python.interfaces.interceptor import Interceptor
from smithy_python.interfaces.retries import RetryStrategy


_ServiceInterceptor = Union[Interceptor[GetResourcesInput, GetResourcesOutput, Any, Any]]
@dataclass(kw_only=True)
class Config:
    """Configuration for SimpleResources

    :param interceptors: The list of interceptors, which are hooks that are called
    during the execution of a request.

    :param retry_strategy: The retry strategy for issuing retry tokens and computing
    retry delays.

    :param dafnyImplInterface:
    """
    interceptors: list[_ServiceInterceptor] | None = None
    retry_strategy: RetryStrategy | None = None
    dafnyImplInterface: DafnyImplInterface | None = None

# A callable that allows customizing the config object on each request.
Plugin: TypeAlias = Callable[[Config], None]

class SimpleResourcesConfig(Config):
    # TODO: Add types to Config members
    name: Any

    def __init__(self, name, ):
        super().__init__()
        self.name = name

def dafny_config_to_smithy_config(dafny_config) -> SimpleResourcesConfig:
    return SimpleResourcesConfig(name=dafny_config.name,
           )

def smithy_config_to_dafny_config(smithy_config) -> DafnySimpleResourcesConfig:
    return DafnySimpleResourcesConfig(name=smithy_config.name,
           )
