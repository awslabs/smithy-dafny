# Code generated by smithy-python-codegen DO NOT EDIT.

from .errors import (
    CollectionOfErrors,
    OpaqueError,
    ServiceError,
    SimpleResourcesException,
)
from .models import GetResourcesInput, GetResourcesOutput
from Wrappers_Compile import Option_Some
from simple.resources.internaldafny.types import (
    GetResourcesInput_GetResourcesInput as DafnyGetResourcesInput,
    GetResourcesOutput_GetResourcesOutput as DafnyGetResourcesOutput,
    ISimpleResource as DafnySimpleResourceReference
)


import Wrappers_Compile
import asyncio
import simple.resources.internaldafny.types
import simple_resources.smithy_generated.simple_resources.client as client_impl

def smithy_error_to_dafny_error(e: ServiceError):
    if isinstance(e, SimpleResourcesException):
        return simple.resources.internaldafny.types.Error_SimpleResourcesException(message=e.message)

    if isinstance(e, CollectionOfErrors):
        return simple.resources.internaldafny.types.Error_CollectionOfErrors(message=e.message, list=e.list)

    if isinstance(e, OpaqueError):
        return simple.resources.internaldafny.types.Error_Opaque(obj=e.obj)

class SimpleResourcesShim(simple.resources.internaldafny.types.ISimpleResourcesClient):
    def __init__(self, _impl: client_impl) :
        self._impl = _impl

    def GetResources(self, input: DafnyGetResourcesInput) -> DafnyGetResourcesOutput:
        unwrapped_request: GetResourcesInput = GetResourcesInput(value=input.value.value,
    )
        try:
            wrapped_response = asyncio.run(self._impl.get_resources(unwrapped_request))
            print("wrapped_response")
            print(wrapped_response)
        except ServiceError as e:
            return Wrappers_Compile.Result_Failure(smithy_error_to_dafny_error(e))
        return Wrappers_Compile.Result_Success(DafnyGetResourcesOutput(output=wrapped_response.output,
    ))
