# Code generated by smithy-python-codegen DO NOT EDIT.

from typing import Any

from .dafny_protocol import DafnyResponse
from .errors import (
    CollectionOfErrors,
    OpaqueError,
    ServiceError,
    SimpleResourcesException,
)
from .models import GetResourcesOutput, SimpleResourceReference
from simple.resources.internaldafny.types import (
    Error,
    Error_SimpleResourcesException,
    GetResourcesOutput_GetResourcesOutput as DafnyGetResourcesOutput,
)

from .config import Config
from .models import GetResourcesOutput, SimpleResource


async def _deserialize_get_resources(input: DafnyResponse, config: Config) -> GetResourcesOutput:
  print("deser")
  print(input)
  try:
    if input.IsFailure():
      return await _deserialize_error(input.error)
    a= GetResourcesOutput(output=SimpleResource(_impl=input.value.output),
    )
    print("a")
    print(a)
    return a
  except Exception as e:
    print(e)

async def _deserialize_error(
    error: Error
) -> ServiceError:
  if error.is_Opaque:
    return OpaqueError(obj=error.obj)
  if error.is_CollectionOfErrors:
    return CollectionOfErrors(message=error.message, list=error.list)
  if error.is_SimpleResourcesException:
    return SimpleResourcesException(message=error.message)
