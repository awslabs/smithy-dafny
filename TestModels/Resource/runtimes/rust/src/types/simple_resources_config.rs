// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct SimpleResourcesConfig {
    pub(crate) name: String,
}

impl SimpleResourcesConfig {
    pub fn builder() -> SimpleResourcesConfigBuilder {
        SimpleResourcesConfigBuilder::new()
    }
    pub fn name(&self) -> &String {
        &self.name
    }
}

#[derive(::std::clone::Clone, ::std::fmt::Debug, ::std::default::Default)]
pub struct SimpleResourcesConfigBuilder {
    name: Option<String>,
}

impl SimpleResourcesConfigBuilder {
    /// Creates a new `SimpleResourcesConfigBuilder`.
    pub(crate) fn new() -> Self {
        Self::default()
    }
    pub fn build(
        self,
    ) -> ::std::result::Result<
        SimpleResourcesConfig,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        if self.name.is_none() {
            Err(
                aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "Required for SimpleResourcesConfig.",
                ),
            )
        } else if self.name.as_ref().unwrap().len() < 1 {
            Err(
                aws_smithy_types::error::operation::BuildError::invalid_field(
                    "name",
                    "Length must be at least 1.",
                ),
            )
        } else {
            ::std::result::Result::Ok(SimpleResourcesConfig {
                name: self.name.unwrap(),
            })
        }
    }
    pub fn name(mut self, input: impl ::std::convert::Into<String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn get_name(&self) -> &::std::option::Option<String> {
        &self.name
    }
}
