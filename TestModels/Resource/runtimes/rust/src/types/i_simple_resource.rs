// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

pub trait ISimpleResource {
    fn GetResourceData(
        &mut self,
        input: crate::operation::get_resource_data::GetResourceDataInput,
    ) -> Result<
        crate::operation::get_resource_data::GetResourceDataOutput,
        crate::operation::get_resource_data::GetResourceDataError,
    >;
}

#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ISimpleResourceObject {
    pub(crate) obj: ::dafny_runtime::Object<
        dyn ::simple_resources_dafny::r#_simple_dresources_dinternaldafny_dtypes::ISimpleResource,
    >,
}

impl ISimpleResourceObject {
    pub fn get_resource_data(
        &self,
    ) -> crate::operation::get_resource_data::builders::GetResourceDataFluentBuilder {
        crate::operation::get_resource_data::builders::GetResourceDataFluentBuilder::new(
            self.clone(),
        )
    }
}

impl ISimpleResource for ISimpleResourceObject {
    fn GetResourceData(
        &mut self,
        input: crate::operation::get_resource_data::GetResourceDataInput,
    ) -> Result<
        crate::operation::get_resource_data::GetResourceDataOutput,
        crate::operation::get_resource_data::GetResourceDataError,
    > {
        let inner_input =
            crate::conversions::get_resource_data::_get_resource_data_input::to_dafny(input);
        let inner_result = ::dafny_runtime::md!(self.obj.clone()).GetResourceData(&inner_input);
        if matches!(
            inner_result.as_ref(),
            ::simple_resources_dafny::r#_Wrappers_Compile::Result::Success { .. }
        ) {
            Ok(
                crate::conversions::get_resource_data::_get_resource_data_output::from_dafny(
                    inner_result.value().clone(),
                ),
            )
        } else {
            Err(crate::conversions::get_resource_data::from_dafny_error(
                inner_result.error().clone(),
            ))
        }
    }
}
