// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_resource_data::_get_resource_data_output::GetResourceDataOutputBuilder;

pub use crate::operation::get_resource_data::_get_resource_data_input::GetResourceDataInputBuilder;

impl GetResourceDataInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: crate::types::simple_resource::SimpleResourceRef,
    ) -> ::std::result::Result<
        crate::operation::get_resource_data::GetResourceDataOutput,
        crate::operation::get_resource_data::GetResourceDataError,
    > {
        // FIXME - how to convert BuildError to GetResourceDataError
        let input = self.build().unwrap();
        // let mut fluent_builder = client.borrow_mut().get_resource_data();
        // fluent_builder.inner = self;
        // fluent_builder.send().await
        client.borrow_mut().get_resource_data(input)
    }
}
/// Fluent builder constructing a request to `GetResourceData`.
///
#[derive(::std::clone::Clone)]
pub struct GetResourceDataFluentBuilder {
    client: crate::types::simple_resource::SimpleResourceRef,
    inner: crate::operation::get_resource_data::builders::GetResourceDataInputBuilder,
}
impl GetResourceDataFluentBuilder {
    /// Creates a new `GetResourceData`.
    #[allow(dead_code)]
    pub(crate) fn new(client: crate::types::simple_resource::SimpleResourceRef) -> Self {
        Self {
            client,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the GetResourceData as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::get_resource_data::builders::GetResourceDataInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_resource_data::GetResourceDataOutput,
        crate::operation::get_resource_data::GetResourceDataError,
    > {
        let input = self
            .inner
            .build()
            // Using unhandled since GetResourceData doesn't declare any validation,
            // and smithy-rs seems to not generate a ValidationError case unless there is
            // (but isn't that a backwards compatibility problem for output structures?)
            // Vanilla smithy-rs uses SdkError::construction_failure,
            // but we aren't using SdkError.
            .map_err(crate::operation::get_resource_data::GetResourceDataError::unhandled)?;
        crate::operation::get_resource_data::GetResourceData::send(self.client, input).await
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn blob_value(mut self, input: impl ::std::convert::Into<aws_smithy_types::Blob>) -> Self {
        self.inner = self.inner.blob_value(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_blob_value(mut self, input: Option<aws_smithy_types::Blob>) -> Self {
        self.inner = self.inner.set_blob_value(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_blob_value(&self) -> &Option<aws_smithy_types::Blob> {
        self.inner.get_blob_value()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn boolean_value(mut self, input: impl ::std::convert::Into<bool>) -> Self {
        self.inner = self.inner.boolean_value(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_boolean_value(mut self, input: Option<bool>) -> Self {
        self.inner = self.inner.set_boolean_value(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_boolean_value(&self) -> Option<bool> {
        self.inner.get_boolean_value()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn string_value(mut self, input: impl ::std::convert::Into<String>) -> Self {
        self.inner = self.inner.string_value(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_string_value(mut self, input: Option<String>) -> Self {
        self.inner = self.inner.set_string_value(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_string_value(&self) -> &Option<String> {
        self.inner.get_string_value()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn integer_value(mut self, input: impl ::std::convert::Into<i32>) -> Self {
        self.inner = self.inner.integer_value(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_integer_value(mut self, input: Option<i32>) -> Self {
        self.inner = self.inner.set_integer_value(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_integer_value(&self) -> Option<i32> {
        self.inner.get_integer_value()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn long_value(mut self, input: impl ::std::convert::Into<i64>) -> Self {
        self.inner = self.inner.long_value(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_long_value(mut self, input: Option<i64>) -> Self {
        self.inner = self.inner.set_long_value(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_long_value(&self) -> Option<i64> {
        self.inner.get_long_value()
    }
}
