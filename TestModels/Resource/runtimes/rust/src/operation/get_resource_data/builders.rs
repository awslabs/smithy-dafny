// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_resource_data::_get_resource_data_output::GetResourceDataOutputBuilder;

pub use crate::operation::get_resource_data::_get_resource_data_input::GetResourceDataInputBuilder;

impl GetResourceDataInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::types::i_simple_resource::ISimpleResourceObject,
    ) -> ::std::result::Result<
        crate::operation::get_resource_data::GetResourceDataOutput,
        crate::operation::get_resource_data::GetResourceDataError,
    > {
        let mut fluent_builder = client.get_resource_data();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetResourceData`.
///
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetResourceDataFluentBuilder {
    client: crate::types::i_simple_resource::ISimpleResourceObject,
    inner: crate::operation::get_resource_data::builders::GetResourceDataInputBuilder,
}
impl GetResourceDataFluentBuilder {
    /// Creates a new `GetResourceData`.
    pub(crate) fn new(client: crate::types::i_simple_resource::ISimpleResourceObject) -> Self {
        Self {
            client,
            inner: ::std::default::Default::default(),
        }
    }
    /// Access the GetResourceData as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::get_resource_data::builders::GetResourceDataInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_resource_data::GetResourceDataOutput,
        crate::operation::get_resource_data::GetResourceDataError,
    > {
        let input = self
            .inner
            .build()
            // Using unhandled since GetResourceData doesn't declare any validation,
            // and smithy-rs seems to not generate a ValidationError case unless there is
            // (but isn't that a backwards compatibility problem for output structures?)
            // Vanilla smithy-rs uses SdkError::construction_failure,
            // but we aren't using SdkError.
            .map_err(crate::operation::get_resource_data::GetResourceDataError::unhandled)?;
        crate::operation::get_resource_data::GetResourceData::send(self.client, input).await
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn blobValue(mut self, input: impl ::std::convert::Into<Vec<u8>>) -> Self {
        self.inner = self.inner.blobValue(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_blobValue(mut self, input: Option<Vec<u8>>) -> Self {
        self.inner = self.inner.set_blobValue(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_blobValue(&self) -> &Option<Vec<u8>> {
        self.inner.get_blobValue()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn booleanValue(mut self, input: impl ::std::convert::Into<bool>) -> Self {
        self.inner = self.inner.booleanValue(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_booleanValue(mut self, input: Option<bool>) -> Self {
        self.inner = self.inner.set_booleanValue(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_booleanValue(&self) -> Option<bool> {
        self.inner.get_booleanValue()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn stringValue(mut self, input: impl ::std::convert::Into<String>) -> Self {
        self.inner = self.inner.stringValue(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_stringValue(mut self, input: Option<String>) -> Self {
        self.inner = self.inner.set_stringValue(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_stringValue(&self) -> &Option<String> {
        self.inner.get_stringValue()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn integerValue(mut self, input: impl ::std::convert::Into<i32>) -> Self {
        self.inner = self.inner.integerValue(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_integerValue(mut self, input: Option<i32>) -> Self {
        self.inner = self.inner.set_integerValue(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_integerValue(&self) -> Option<i32> {
        self.inner.get_integerValue()
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn longValue(mut self, input: impl ::std::convert::Into<i64>) -> Self {
        self.inner = self.inner.longValue(input.into());
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn set_longValue(mut self, input: Option<i64>) -> Self {
        self.inner = self.inner.set_longValue(input);
        self
    }

    #[allow(missing_docs)] // documentation missing in model
    pub fn get_longValue(&self) -> Option<i64> {
        self.inner.get_longValue()
    }
}
